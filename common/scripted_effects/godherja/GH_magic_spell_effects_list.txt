# THIS IS A GENERATED FILE.
#
# Source template:
# added_folders/templates/common/scripted_effects/godherja/GH_magic_spell_effects_list.txt.jinja
#
# Please avoid manually editing this file: your changes WILL be overwritten when it gets regenerated.
# Instead, edit the source template and/or variables, then run render_templates.bat .

###################################
# LIST OF GENERATED SPELL EFFECTS #
###################################
 
 # Rules and Information:
 
 #This file contains scripted effect stubs for all leaves of the binary tree
 #Add new spell effects to an empty stub in the correct section. Also add a comment of what the effect tag name is
 #If your effect is more complicated then a few lines move it to a new scripted_effect in another file, with the
 #scripted_effect here activating it

 #The following scopes are available:
 # scope:spell_target is the target of the current effect. It can be either a character or a county and is the initial scope
 # scope:caster is the character who cast the spell
 # scope:spell_being_casted is the current spell being casted
 # scope:spell_effect is the current spell effect tag
 
 # NOTE: This file is for effects that are generated by Jinja. Do not modify directly; instead edit added_folders/templates/common/scripted_effects/gh_magic_spell_effects_generated_list.txt.jinja

 spell_effect_0 = {}	# GH TODO: Remove this from the binary list
 spell_effect_1 = {	# add_character_modifier_magic_health_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_health_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_health_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_health_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_health_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_health_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_health_gain_modifier_duration_value }
	}
 }
 spell_effect_2 = {	# add_character_modifier_magic_health_resistance_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_health_resistance_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_health_resistance_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_health_resistance_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_health_resistance_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_health_resistance_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_health_resistance_gain_modifier_duration_value }
	}
 }
 spell_effect_3 = {	# add_character_modifier_magic_health_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_health_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_health_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_health_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_health_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_health_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_health_loss_modifier_duration_value }
	}
 }
 spell_effect_4 = {	# add_character_modifier_magic_health_loss_minor_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_health_loss_minor_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_health_loss_minor_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_health_loss_minor_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_health_loss_minor_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_health_loss_minor_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_health_loss_minor_modifier_duration_value }
	}
 }
 spell_effect_5 = {	# add_character_modifier_magic_stress_negative
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_stress_negative TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stress_negative_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stress_negative   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_stress_negative_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stress_negative   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stress_negative_duration_value }
	}
 }
 spell_effect_6 = {	# add_character_modifier_magic_stress_positive
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_stress_positive TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stress_positive_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stress_positive   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_stress_positive_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stress_positive   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stress_positive_duration_value }
	}
 }
 spell_effect_7 = {	# add_character_modifier_magic_stress_gain_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_stress_gain_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stress_gain_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stress_gain_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_stress_gain_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stress_gain_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stress_gain_mult_modifier_duration_value }
	}
 }
 spell_effect_8 = {	# add_character_modifier_magic_stress_loss_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_stress_loss_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stress_loss_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stress_loss_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_stress_loss_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stress_loss_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stress_loss_mult_modifier_duration_value }
	}
 }
 spell_effect_9 = {	# add_character_modifier_magic_virility_opinion_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_virility_opinion_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_virility_opinion_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_virility_opinion_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_virility_opinion_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_virility_opinion_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_virility_opinion_modifier_duration_value }
	}
 }
 spell_effect_10 = {	# add_character_modifier_magic_viagra_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_viagra_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_viagra_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_viagra_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_viagra_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_viagra_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_viagra_modifier_duration_value }
	}
 }
 spell_effect_11 = {	# add_character_modifier_magic_general_boost
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_general_boost TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_general_boost_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_general_boost   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_general_boost_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_general_boost   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_general_boost_duration_value }
	}
 }
 spell_effect_12 = {	# add_character_modifier_magic_diplomacy_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_diplomacy_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_diplomacy_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_diplomacy_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_diplomacy_gain_modifier_duration_value }
	}
 }
 spell_effect_13 = {	# add_character_modifier_magic_diplomacy_resistance_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_diplomacy_resistance_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_diplomacy_resistance_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_resistance_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_diplomacy_resistance_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_resistance_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_diplomacy_resistance_gain_modifier_duration_value }
	}
 }
 spell_effect_14 = {	# add_character_modifier_magic_diplomacy_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_diplomacy_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_diplomacy_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_diplomacy_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_diplomacy_loss_modifier_duration_value }
	}
 }
 spell_effect_15 = {	# add_character_modifier_magic_diplomacy_gain_per_piety_level_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_diplomacy_gain_per_piety_level_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_diplomacy_gain_per_piety_level_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_diplomacy_gain_per_piety_level_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_diplomacy_gain_per_piety_level_modifier_duration_value }
	}
 }
 spell_effect_16 = {	# add_character_modifier_magic_martial_animal_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_martial_animal_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_animal_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_animal_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_martial_animal_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_animal_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_animal_gain_modifier_duration_value }
	}
 }
 spell_effect_17 = {	# add_character_modifier_magic_martial_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_martial_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_martial_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_gain_modifier_duration_value }
	}
 }
 spell_effect_18 = {	# add_character_modifier_magic_martial_resistance_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_martial_resistance_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_resistance_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_resistance_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_martial_resistance_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_resistance_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_resistance_gain_modifier_duration_value }
	}
 }
 spell_effect_19 = {	# add_character_modifier_magic_martial_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_martial_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_martial_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_loss_modifier_duration_value }
	}
 }
 spell_effect_20 = {	# add_character_modifier_magic_martial_gain_per_piety_level_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_martial_gain_per_piety_level_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_gain_per_piety_level_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_martial_gain_per_piety_level_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_gain_per_piety_level_modifier_duration_value }
	}
 }
 spell_effect_21 = {	# add_character_modifier_magic_stewardship_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_stewardship_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_stewardship_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_gain_modifier_duration_value }
	}
 }
 spell_effect_22 = {	# add_character_modifier_magic_stewardship_resistance_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_stewardship_resistance_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_resistance_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_resistance_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_stewardship_resistance_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_resistance_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_resistance_gain_modifier_duration_value }
	}
 }
 spell_effect_23 = {	# add_character_modifier_magic_stewardship_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_stewardship_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_stewardship_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_loss_modifier_duration_value }
	}
 }
 spell_effect_24 = {	# add_character_modifier_magic_stewardship_gain_per_piety_level_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_stewardship_gain_per_piety_level_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_gain_per_piety_level_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_stewardship_gain_per_piety_level_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_gain_per_piety_level_modifier_duration_value }
	}
 }
 spell_effect_25 = {	# add_character_modifier_magic_intrigue_animal_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_intrigue_animal_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_animal_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_animal_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_intrigue_animal_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_animal_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_animal_gain_modifier_duration_value }
	}
 }
 spell_effect_26 = {	# add_character_modifier_magic_intrigue_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_intrigue_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_intrigue_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_gain_modifier_duration_value }
	}
 }
 spell_effect_27 = {	# add_character_modifier_magic_intrigue_resistance_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_intrigue_resistance_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_resistance_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_resistance_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_intrigue_resistance_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_resistance_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_resistance_gain_modifier_duration_value }
	}
 }
 spell_effect_28 = {	# add_character_modifier_magic_intrigue_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_intrigue_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_intrigue_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_loss_modifier_duration_value }
	}
 }
 spell_effect_29 = {	# add_character_modifier_magic_intrigue_gain_per_piety_level_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_intrigue_gain_per_piety_level_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_gain_per_piety_level_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_intrigue_gain_per_piety_level_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_gain_per_piety_level_modifier_duration_value }
	}
 }
 spell_effect_30 = {	# add_character_modifier_magic_learning_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_learning_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_learning_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_learning_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_learning_gain_modifier_duration_value }
	}
 }
 spell_effect_31 = {	# add_character_modifier_magic_learning_resistance_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_learning_resistance_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_learning_resistance_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_resistance_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_learning_resistance_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_resistance_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_learning_resistance_gain_modifier_duration_value }
	}
 }
 spell_effect_32 = {	# add_character_modifier_magic_learning_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_learning_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_learning_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_learning_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_learning_loss_modifier_duration_value }
	}
 }
 spell_effect_33 = {	# add_character_modifier_magic_learning_gain_per_piety_level_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_learning_gain_per_piety_level_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_learning_gain_per_piety_level_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_learning_gain_per_piety_level_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_learning_gain_per_piety_level_modifier_duration_value }
	}
 }
 spell_effect_34 = {	# add_character_modifier_magic_prowess_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_prowess_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_prowess_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_prowess_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_prowess_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_prowess_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_prowess_gain_modifier_duration_value }
	}
 }
 spell_effect_35 = {	# add_character_modifier_magic_prowess_resistance_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_prowess_resistance_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_prowess_resistance_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_prowess_resistance_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_prowess_resistance_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_prowess_resistance_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_prowess_resistance_gain_modifier_duration_value }
	}
 }
 spell_effect_36 = {	# add_character_modifier_magic_prowess_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_prowess_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_prowess_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_prowess_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_prowess_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_prowess_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_prowess_loss_modifier_duration_value }
	}
 }
 spell_effect_37 = {	# add_character_modifier_magic_prowess_gain_per_piety_level_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_prowess_gain_per_piety_level_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_prowess_gain_per_piety_level_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_prowess_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_prowess_gain_per_piety_level_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_prowess_gain_per_piety_level_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_prowess_gain_per_piety_level_modifier_duration_value }
	}
 }
 spell_effect_38 = {	# add_character_modifier_magic_attraction_opinion_physical_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_attraction_opinion_physical_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_attraction_opinion_physical_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_attraction_opinion_physical_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_attraction_opinion_physical_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_attraction_opinion_physical_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_attraction_opinion_physical_gain_modifier_duration_value }
	}
 }
 spell_effect_39 = {	# add_character_modifier_magic_attraction_opinion_social_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_attraction_opinion_social_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_attraction_opinion_social_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_attraction_opinion_social_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_attraction_opinion_social_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_attraction_opinion_social_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_attraction_opinion_social_gain_modifier_duration_value }
	}
 }
 spell_effect_40 = {	# add_character_modifier_magic_close_relative_opinion_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_close_relative_opinion_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_close_relative_opinion_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_close_relative_opinion_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_close_relative_opinion_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_close_relative_opinion_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_close_relative_opinion_gain_modifier_duration_value }
	}
 }
 spell_effect_41 = {	# add_character_modifier_magic_child_opinion_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_child_opinion_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_child_opinion_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_child_opinion_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_child_opinion_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_child_opinion_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_child_opinion_modifier_duration_value }
	}
 }
 spell_effect_42 = {	# add_character_modifier_magic_spouse_opinion_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_spouse_opinion_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_spouse_opinion_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_spouse_opinion_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_spouse_opinion_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_spouse_opinion_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_spouse_opinion_modifier_duration_value }
	}
 }
 spell_effect_43 = {	# add_character_modifier_magic_house_opinion_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_house_opinion_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_house_opinion_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_house_opinion_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_house_opinion_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_house_opinion_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_house_opinion_modifier_duration_value }
	}
 }
 spell_effect_44 = {	# add_character_modifier_magic_dynasty_opinion_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_dynasty_opinion_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_dynasty_opinion_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_dynasty_opinion_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_dynasty_opinion_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_dynasty_opinion_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_dynasty_opinion_modifier_duration_value }
	}
 }
 spell_effect_45 = {	# add_character_modifier_magic_general_opinion_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_general_opinion_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_general_opinion_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_general_opinion_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_general_opinion_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_general_opinion_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_general_opinion_modifier_duration_value }
	}
 }
 spell_effect_46 = {	# add_character_modifier_magic_realm_opinion_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_realm_opinion_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_realm_opinion_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_realm_opinion_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_realm_opinion_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_realm_opinion_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_realm_opinion_modifier_duration_value }
	}
 }
 spell_effect_47 = {	# add_character_modifier_magic_internal_strife_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_internal_strife_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_internal_strife_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_internal_strife_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_internal_strife_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_internal_strife_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_internal_strife_modifier_duration_value }
	}
 }
 spell_effect_48 = {	# add_character_modifier_magic_external_condemnation_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_external_condemnation_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_external_condemnation_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_external_condemnation_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_external_condemnation_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_external_condemnation_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_external_condemnation_modifier_duration_value }
	}
 }
 spell_effect_49 = {	# add_character_modifier_diplomacy_magic_modifier_seduction_positive
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = diplomacy_magic_modifier_seduction_positive TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = diplomacy_magic_modifier_seduction_positive_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = diplomacy_magic_modifier_seduction_positive   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = diplomacy_magic_modifier_seduction_positive_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = diplomacy_magic_modifier_seduction_positive   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = diplomacy_magic_modifier_seduction_positive_duration_value }
	}
 }
 spell_effect_50 = {	# add_character_modifier_diplomacy_magic_modifier_seduction_negative
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = diplomacy_magic_modifier_seduction_negative TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = diplomacy_magic_modifier_seduction_negative_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = diplomacy_magic_modifier_seduction_negative   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = diplomacy_magic_modifier_seduction_negative_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = diplomacy_magic_modifier_seduction_negative   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = diplomacy_magic_modifier_seduction_negative_duration_value }
	}
 }
 spell_effect_51 = {	# add_character_modifier_diplomacy_magic_modifier_vassal_opinion_positive
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = diplomacy_magic_modifier_vassal_opinion_positive TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = diplomacy_magic_modifier_vassal_opinion_positive_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = diplomacy_magic_modifier_vassal_opinion_positive   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = diplomacy_magic_modifier_vassal_opinion_positive_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = diplomacy_magic_modifier_vassal_opinion_positive   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = diplomacy_magic_modifier_vassal_opinion_positive_duration_value }
	}
 }
 spell_effect_52 = {	# add_character_modifier_religious_fanaticism
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = religious_fanaticism TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = religious_fanaticism_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = religious_fanaticism   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = religious_fanaticism_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = religious_fanaticism   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = religious_fanaticism_duration_value }
	}
 }
 spell_effect_53 = {	# add_character_modifier_melodious_voice_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = melodious_voice_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = melodious_voice_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = melodious_voice_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = melodious_voice_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = melodious_voice_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = melodious_voice_modifier_duration_value }
	}
 }
 spell_effect_54 = {	# add_character_modifier_glassinger_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = glassinger_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = glassinger_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = glassinger_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = glassinger_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = glassinger_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = glassinger_modifier_duration_value }
	}
 }
 spell_effect_55 = {	# add_character_modifier_character_county_opinion_negative_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = character_county_opinion_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = character_county_opinion_negative_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = character_county_opinion_negative_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = character_county_opinion_negative_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = character_county_opinion_negative_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = character_county_opinion_negative_modifier_duration_value }
	}
 }
 spell_effect_56 = {	# add_character_modifier_short_reign_duration_mult_positive_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = short_reign_duration_mult_positive_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = short_reign_duration_mult_positive_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = short_reign_duration_mult_positive_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = short_reign_duration_mult_positive_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = short_reign_duration_mult_positive_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = short_reign_duration_mult_positive_modifier_duration_value }
	}
 }
 spell_effect_57 = {	# add_character_modifier_court_grandeur_baseline_add_positive_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = court_grandeur_baseline_add_positive_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = court_grandeur_baseline_add_positive_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = court_grandeur_baseline_add_positive_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = court_grandeur_baseline_add_positive_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = court_grandeur_baseline_add_positive_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = court_grandeur_baseline_add_positive_modifier_duration_value }
	}
 }
 spell_effect_58 = {	# add_character_modifier_magic_character_travel_safety_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_character_travel_safety_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_travel_safety_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_travel_safety_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_character_travel_safety_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_travel_safety_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_travel_safety_modifier_duration_value }
	}
 }
 spell_effect_59 = {	# add_character_modifier_magic_character_travel_safety_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_character_travel_safety_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_travel_safety_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_travel_safety_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_character_travel_safety_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_travel_safety_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_travel_safety_mult_modifier_duration_value }
	}
 }
 spell_effect_60 = {	# add_character_modifier_magic_character_travel_speed_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_character_travel_speed_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_travel_speed_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_travel_speed_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_character_travel_speed_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_travel_speed_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_travel_speed_mult_modifier_duration_value }
	}
 }
 spell_effect_61 = {	# add_character_modifier_travel_advantage_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = travel_advantage_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = travel_advantage_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = travel_advantage_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = travel_advantage_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = travel_advantage_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = travel_advantage_magic_modifier_duration_value }
	}
 }
 spell_effect_62 = {	# add_character_modifier_travel_disadvantage_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = travel_disadvantage_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = travel_disadvantage_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = travel_disadvantage_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = travel_disadvantage_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = travel_disadvantage_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = travel_disadvantage_magic_modifier_duration_value }
	}
 }
 spell_effect_63 = {	# add_character_modifier_pane_of_passage_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = pane_of_passage_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = pane_of_passage_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = pane_of_passage_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = pane_of_passage_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = pane_of_passage_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = pane_of_passage_modifier_duration_value }
	}
 }
 spell_effect_64 = {	# add_county_modifier_magic_county_travel_danger_advantage_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_county_travel_danger_advantage_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_county_travel_danger_advantage_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_county_travel_danger_advantage_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = magic_county_travel_danger_advantage_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_county_travel_danger_advantage_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_county_travel_danger_advantage_modifier_duration_value }
	}
 }
 spell_effect_65 = {	# add_county_modifier_magic_county_travel_danger_disadvantage_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_county_travel_danger_disadvantage_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_county_travel_danger_disadvantage_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_county_travel_danger_disadvantage_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = magic_county_travel_danger_disadvantage_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_county_travel_danger_disadvantage_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_county_travel_danger_disadvantage_modifier_duration_value }
	}
 }
 spell_effect_66 = {	# add_character_modifier_magic_murder_scheme_power_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_murder_scheme_power_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_murder_scheme_power_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_murder_scheme_power_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_murder_scheme_power_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_murder_scheme_power_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_murder_scheme_power_add_modifier_duration_value }
	}
 }
 spell_effect_67 = {	# add_character_modifier_magic_seduce_scheme_power_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_seduce_scheme_power_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_seduce_scheme_power_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_seduce_scheme_power_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_seduce_scheme_power_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_seduce_scheme_power_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_seduce_scheme_power_add_modifier_duration_value }
	}
 }
 spell_effect_68 = {	# add_character_modifier_magic_hostile_scheme_discovery_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_hostile_scheme_discovery_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_hostile_scheme_discovery_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_hostile_scheme_discovery_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_hostile_scheme_discovery_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_hostile_scheme_discovery_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_hostile_scheme_discovery_gain_modifier_duration_value }
	}
 }
 spell_effect_69 = {	# add_character_modifier_magic_vengeance_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_vengeance_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_vengeance_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_vengeance_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_vengeance_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_vengeance_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_vengeance_modifier_duration_value }
	}
 }
 spell_effect_70 = {	# add_character_modifier_haunting_power_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = haunting_power_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = haunting_power_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = haunting_power_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = haunting_power_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = haunting_power_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = haunting_power_modifier_duration_value }
	}
 }
 spell_effect_71 = {	# add_character_modifier_magic_trait_synergy_brave
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_brave TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_brave_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_brave   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_brave_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_brave   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_brave_duration_value }
	}
 }
 spell_effect_72 = {	# add_character_modifier_magic_trait_synergy_craven
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_craven TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_craven_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_craven   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_craven_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_craven   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_craven_duration_value }
	}
 }
 spell_effect_73 = {	# add_character_modifier_magic_trait_synergy_calm
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_calm TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_calm_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_calm   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_calm_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_calm   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_calm_duration_value }
	}
 }
 spell_effect_74 = {	# add_character_modifier_magic_trait_synergy_wrathful
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_wrathful TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_wrathful_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_wrathful   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_wrathful_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_wrathful   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_wrathful_duration_value }
	}
 }
 spell_effect_75 = {	# add_character_modifier_magic_trait_synergy_chaste
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_chaste TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_chaste_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_chaste   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_chaste_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_chaste   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_chaste_duration_value }
	}
 }
 spell_effect_76 = {	# add_character_modifier_magic_trait_synergy_lustful
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_lustful TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_lustful_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_lustful   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_lustful_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_lustful   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_lustful_duration_value }
	}
 }
 spell_effect_77 = {	# add_character_modifier_magic_trait_synergy_content
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_content TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_content_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_content   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_content_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_content   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_content_duration_value }
	}
 }
 spell_effect_78 = {	# add_character_modifier_magic_trait_synergy_ambitious
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_ambitious TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_ambitious_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_ambitious   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_ambitious_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_ambitious   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_ambitious_duration_value }
	}
 }
 spell_effect_79 = {	# add_character_modifier_magic_trait_synergy_diligent
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_diligent TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_diligent_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_diligent   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_diligent_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_diligent   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_diligent_duration_value }
	}
 }
 spell_effect_80 = {	# add_character_modifier_magic_trait_synergy_lazy
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_lazy TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_lazy_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_lazy   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_lazy_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_lazy   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_lazy_duration_value }
	}
 }
 spell_effect_81 = {	# add_character_modifier_magic_trait_synergy_fickle
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_fickle TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_fickle_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_fickle   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_fickle_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_fickle   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_fickle_duration_value }
	}
 }
 spell_effect_82 = {	# add_character_modifier_magic_trait_synergy_stubborn
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_stubborn TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_stubborn_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_stubborn   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_stubborn_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_stubborn   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_stubborn_duration_value }
	}
 }
 spell_effect_83 = {	# add_character_modifier_magic_trait_synergy_forgiving
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_forgiving TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_forgiving_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_forgiving   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_forgiving_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_forgiving   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_forgiving_duration_value }
	}
 }
 spell_effect_84 = {	# add_character_modifier_magic_trait_synergy_vengeful
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_vengeful TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_vengeful_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_vengeful   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_vengeful_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_vengeful   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_vengeful_duration_value }
	}
 }
 spell_effect_85 = {	# add_character_modifier_magic_trait_synergy_generous
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_generous TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_generous_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_generous   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_generous_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_generous   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_generous_duration_value }
	}
 }
 spell_effect_86 = {	# add_character_modifier_magic_trait_synergy_greedy
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_greedy TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_greedy_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_greedy   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_greedy_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_greedy   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_greedy_duration_value }
	}
 }
 spell_effect_87 = {	# add_character_modifier_magic_trait_synergy_gregarious
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_gregarious TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_gregarious_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_gregarious   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_gregarious_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_gregarious   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_gregarious_duration_value }
	}
 }
 spell_effect_88 = {	# add_character_modifier_magic_trait_synergy_shy
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_shy TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_shy_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_shy   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_shy_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_shy   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_shy_duration_value }
	}
 }
 spell_effect_89 = {	# add_character_modifier_magic_trait_synergy_honest
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_honest TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_honest_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_honest   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_honest_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_honest   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_honest_duration_value }
	}
 }
 spell_effect_90 = {	# add_character_modifier_magic_trait_synergy_deceitful
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_deceitful TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_deceitful_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_deceitful   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_deceitful_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_deceitful   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_deceitful_duration_value }
	}
 }
 spell_effect_91 = {	# add_character_modifier_magic_trait_synergy_humble
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_humble TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_humble_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_humble   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_humble_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_humble   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_humble_duration_value }
	}
 }
 spell_effect_92 = {	# add_character_modifier_magic_trait_synergy_arrogant
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_arrogant TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_arrogant_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_arrogant   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_arrogant_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_arrogant   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_arrogant_duration_value }
	}
 }
 spell_effect_93 = {	# add_character_modifier_magic_trait_synergy_just
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_just TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_just_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_just   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_just_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_just   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_just_duration_value }
	}
 }
 spell_effect_94 = {	# add_character_modifier_magic_trait_synergy_arbitrary
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_arbitrary TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_arbitrary_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_arbitrary   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_arbitrary_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_arbitrary   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_arbitrary_duration_value }
	}
 }
 spell_effect_95 = {	# add_character_modifier_magic_trait_synergy_patient
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_patient TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_patient_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_patient   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_patient_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_patient   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_patient_duration_value }
	}
 }
 spell_effect_96 = {	# add_character_modifier_magic_trait_synergy_impatient
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_impatient TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_impatient_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_impatient   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_impatient_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_impatient   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_impatient_duration_value }
	}
 }
 spell_effect_97 = {	# add_character_modifier_magic_trait_synergy_temperate
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_temperate TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_temperate_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_temperate   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_temperate_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_temperate   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_temperate_duration_value }
	}
 }
 spell_effect_98 = {	# add_character_modifier_magic_trait_synergy_gluttonous
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_gluttonous TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_gluttonous_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_gluttonous   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_gluttonous_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_gluttonous   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_gluttonous_duration_value }
	}
 }
 spell_effect_99 = {	# add_character_modifier_magic_trait_synergy_trusting
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_trusting TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_trusting_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_trusting   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_trusting_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_trusting   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_trusting_duration_value }
	}
 }
 spell_effect_100 = {	# add_character_modifier_magic_trait_synergy_paranoid
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_paranoid TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_paranoid_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_paranoid   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_paranoid_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_paranoid   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_paranoid_duration_value }
	}
 }
 spell_effect_101 = {	# add_character_modifier_magic_trait_synergy_zealous
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_zealous TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_zealous_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_zealous   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_zealous_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_zealous   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_zealous_duration_value }
	}
 }
 spell_effect_102 = {	# add_character_modifier_magic_trait_synergy_cynical
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_cynical TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_cynical_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_cynical   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_cynical_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_cynical   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_cynical_duration_value }
	}
 }
 spell_effect_103 = {	# add_character_modifier_magic_trait_synergy_compassionate
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_compassionate TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_compassionate_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_compassionate   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_compassionate_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_compassionate   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_compassionate_duration_value }
	}
 }
 spell_effect_104 = {	# add_character_modifier_magic_trait_synergy_callous
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_callous TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_callous_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_callous   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_callous_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_callous   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_callous_duration_value }
	}
 }
 spell_effect_105 = {	# add_character_modifier_magic_trait_synergy_sadistic
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_sadistic TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_sadistic_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_sadistic   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_sadistic_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_sadistic   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_sadistic_duration_value }
	}
 }
 spell_effect_106 = {	# add_character_modifier_magic_trait_synergy_eccentric
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_trait_synergy_eccentric TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_eccentric_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_eccentric   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_trait_synergy_eccentric_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_trait_synergy_eccentric   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_trait_synergy_eccentric_duration_value }
	}
 }
 spell_effect_107 = {	# add_character_modifier_magic_battle_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_battle_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_battle_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_battle_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_battle_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_battle_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_battle_magic_modifier_duration_value }
	}
 }
 spell_effect_108 = {	# add_character_modifier_magic_enhanced_fatality_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_enhanced_fatality_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_enhanced_fatality_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_enhanced_fatality_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_enhanced_fatality_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_enhanced_fatality_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_enhanced_fatality_modifier_duration_value }
	}
 }
 spell_effect_109 = {	# add_character_modifier_magic_hard_casualty_modifier_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_hard_casualty_modifier_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_hard_casualty_modifier_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_hard_casualty_modifier_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_hard_casualty_modifier_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_hard_casualty_modifier_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_hard_casualty_modifier_gain_modifier_duration_value }
	}
 }
 spell_effect_110 = {	# add_character_modifier_magic_hard_casualty_modifier_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_hard_casualty_modifier_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_hard_casualty_modifier_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_hard_casualty_modifier_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_hard_casualty_modifier_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_hard_casualty_modifier_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_hard_casualty_modifier_loss_modifier_duration_value }
	}
 }
 spell_effect_111 = {	# add_character_modifier_dry_terrain_advantage_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = dry_terrain_advantage_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = dry_terrain_advantage_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = dry_terrain_advantage_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = dry_terrain_advantage_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = dry_terrain_advantage_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = dry_terrain_advantage_magic_modifier_duration_value }
	}
 }
 spell_effect_112 = {	# add_character_modifier_forest_terrain_advantage_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = forest_terrain_advantage_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = forest_terrain_advantage_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = forest_terrain_advantage_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = forest_terrain_advantage_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = forest_terrain_advantage_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = forest_terrain_advantage_magic_modifier_duration_value }
	}
 }
 spell_effect_113 = {	# add_character_modifier_water_magic_advantage_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = water_magic_advantage_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = water_magic_advantage_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = water_magic_advantage_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = water_magic_advantage_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = water_magic_advantage_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = water_magic_advantage_magic_modifier_duration_value }
	}
 }
 spell_effect_114 = {	# add_character_modifier_water_magic_disadvantage_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = water_magic_disadvantage_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = water_magic_disadvantage_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = water_magic_disadvantage_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = water_magic_disadvantage_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = water_magic_disadvantage_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = water_magic_disadvantage_magic_modifier_duration_value }
	}
 }
 spell_effect_115 = {	# add_character_modifier_sailing_magic_advantage_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = sailing_magic_advantage_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = sailing_magic_advantage_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = sailing_magic_advantage_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = sailing_magic_advantage_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = sailing_magic_advantage_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = sailing_magic_advantage_magic_modifier_duration_value }
	}
 }
 spell_effect_116 = {	# add_character_modifier_sailing_magic_disadvantage_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = sailing_magic_disadvantage_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = sailing_magic_disadvantage_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = sailing_magic_disadvantage_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = sailing_magic_disadvantage_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = sailing_magic_disadvantage_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = sailing_magic_disadvantage_magic_modifier_duration_value }
	}
 }
 spell_effect_117 = {	# add_character_modifier_slow_army_movement_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = slow_army_movement_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = slow_army_movement_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = slow_army_movement_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = slow_army_movement_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = slow_army_movement_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = slow_army_movement_modifier_duration_value }
	}
 }
 spell_effect_118 = {	# add_character_modifier_movement_speed_positive_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = movement_speed_positive_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = movement_speed_positive_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = movement_speed_positive_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = movement_speed_positive_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = movement_speed_positive_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = movement_speed_positive_modifier_duration_value }
	}
 }
 spell_effect_119 = {	# add_character_modifier_hasten_raid_speed_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = hasten_raid_speed_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = hasten_raid_speed_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = hasten_raid_speed_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = hasten_raid_speed_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = hasten_raid_speed_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = hasten_raid_speed_modifier_duration_value }
	}
 }
 spell_effect_120 = {	# add_character_modifier_rocky_terrain_advantage_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = rocky_terrain_advantage_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = rocky_terrain_advantage_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = rocky_terrain_advantage_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = rocky_terrain_advantage_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = rocky_terrain_advantage_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = rocky_terrain_advantage_magic_modifier_duration_value }
	}
 }
 spell_effect_121 = {	# add_character_modifier_negate_enemy_advantage_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = negate_enemy_advantage_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = negate_enemy_advantage_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = negate_enemy_advantage_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = negate_enemy_advantage_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = negate_enemy_advantage_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = negate_enemy_advantage_magic_modifier_duration_value }
	}
 }
 spell_effect_122 = {	# add_character_modifier_knight_effectiveness_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = knight_effectiveness_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = knight_effectiveness_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = knight_effectiveness_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = knight_effectiveness_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = knight_effectiveness_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = knight_effectiveness_magic_modifier_duration_value }
	}
 }
 spell_effect_123 = {	# add_character_modifier_army_damage_magic_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = army_damage_magic_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = army_damage_magic_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = army_damage_magic_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = army_damage_magic_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = army_damage_magic_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = army_damage_magic_mult_modifier_duration_value }
	}
 }
 spell_effect_124 = {	# add_character_modifier_army_damage_negative_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = army_damage_negative_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = army_damage_negative_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = army_damage_negative_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = army_damage_negative_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = army_damage_negative_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = army_damage_negative_magic_modifier_duration_value }
	}
 }
 spell_effect_125 = {	# add_character_modifier_army_toughness_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = army_toughness_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = army_toughness_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = army_toughness_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = army_toughness_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = army_toughness_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = army_toughness_magic_modifier_duration_value }
	}
 }
 spell_effect_126 = {	# add_character_modifier_magi_siege_value_add_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magi_siege_value_add_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magi_siege_value_add_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magi_siege_value_add_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magi_siege_value_add_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magi_siege_value_add_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magi_siege_value_add_magic_modifier_duration_value }
	}
 }
 spell_effect_127 = {	# add_character_modifier_siege_weapon_siege_value_add_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = siege_weapon_siege_value_add_magic_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = siege_weapon_siege_value_add_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = siege_weapon_siege_value_add_magic_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = siege_weapon_siege_value_add_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = siege_weapon_siege_value_add_magic_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = siege_weapon_siege_value_add_magic_modifier_duration_value }
	}
 }
 spell_effect_128 = {	# add_character_modifier_abstruse_survivability_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = abstruse_survivability_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = abstruse_survivability_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = abstruse_survivability_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = abstruse_survivability_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = abstruse_survivability_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = abstruse_survivability_modifier_duration_value }
	}
 }
 spell_effect_129 = {	# add_character_modifier_men_at_arms_recruitment_cost_positive_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = men_at_arms_recruitment_cost_positive_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = men_at_arms_recruitment_cost_positive_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = men_at_arms_recruitment_cost_positive_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = men_at_arms_recruitment_cost_positive_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = men_at_arms_recruitment_cost_positive_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = men_at_arms_recruitment_cost_positive_modifier_duration_value }
	}
 }
 spell_effect_130 = {	# add_character_modifier_siege_phase_time_positive_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = siege_phase_time_positive_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = siege_phase_time_positive_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = siege_phase_time_positive_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = siege_phase_time_positive_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = siege_phase_time_positive_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = siege_phase_time_positive_modifier_duration_value }
	}
 }
 spell_effect_131 = {	# add_character_modifier_attacker_advantage_positive_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = attacker_advantage_positive_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = attacker_advantage_positive_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = attacker_advantage_positive_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = attacker_advantage_positive_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = attacker_advantage_positive_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = attacker_advantage_positive_modifier_duration_value }
	}
 }
 spell_effect_132 = {	# add_character_modifier_magic_monthly_dynasty_prestige_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_dynasty_prestige_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_dynasty_prestige_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_dynasty_prestige_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_dynasty_prestige_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_dynasty_prestige_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_dynasty_prestige_modifier_duration_value }
	}
 }
 spell_effect_133 = {	# add_character_modifier_magic_monthly_dynasty_prestige_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_dynasty_prestige_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_dynasty_prestige_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_dynasty_prestige_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_dynasty_prestige_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_dynasty_prestige_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_dynasty_prestige_mult_modifier_duration_value }
	}
 }
 spell_effect_134 = {	# add_character_modifier_magic_monthly_income_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_income_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_income_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_income_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_income_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_income_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_income_modifier_duration_value }
	}
 }
 spell_effect_135 = {	# add_character_modifier_magic_monthly_income_gain_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_income_gain_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_income_gain_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_income_gain_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_income_gain_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_income_gain_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_income_gain_mult_modifier_duration_value }
	}
 }
 spell_effect_136 = {	# add_character_modifier_magic_monthly_income_loss_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_income_loss_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_income_loss_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_income_loss_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_income_loss_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_income_loss_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_income_loss_mult_modifier_duration_value }
	}
 }
 spell_effect_137 = {	# add_character_modifier_magic_monthly_piety_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_piety_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_piety_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_piety_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_piety_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_piety_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_piety_modifier_duration_value }
	}
 }
 spell_effect_138 = {	# add_character_modifier_magic_monthly_piety_gain_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_piety_gain_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_piety_gain_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_piety_gain_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_piety_gain_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_piety_gain_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_piety_gain_mult_modifier_duration_value }
	}
 }
 spell_effect_139 = {	# add_character_modifier_magic_monthly_piety_loss_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_piety_loss_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_piety_loss_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_piety_loss_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_piety_loss_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_piety_loss_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_piety_loss_mult_modifier_duration_value }
	}
 }
 spell_effect_140 = {	# add_character_modifier_magic_monthly_prestige_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_prestige_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_prestige_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_prestige_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_prestige_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_prestige_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_prestige_modifier_duration_value }
	}
 }
 spell_effect_141 = {	# add_character_modifier_magic_monthly_prestige_gain_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_prestige_gain_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_prestige_gain_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_prestige_gain_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_prestige_gain_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_prestige_gain_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_prestige_gain_mult_modifier_duration_value }
	}
 }
 spell_effect_142 = {	# add_character_modifier_magic_monthly_prestige_loss_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_prestige_loss_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_prestige_loss_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_prestige_loss_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_prestige_loss_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_prestige_loss_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_prestige_loss_mult_modifier_duration_value }
	}
 }
 spell_effect_143 = {	# add_character_modifier_magic_omen_diplomacy_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_omen_diplomacy_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_omen_diplomacy_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_omen_diplomacy_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_omen_diplomacy_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_omen_diplomacy_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_omen_diplomacy_modifier_duration_value }
	}
 }
 spell_effect_144 = {	# add_character_modifier_magic_omen_intrigue_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_omen_intrigue_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_omen_intrigue_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_omen_intrigue_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_omen_intrigue_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_omen_intrigue_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_omen_intrigue_modifier_duration_value }
	}
 }
 spell_effect_145 = {	# add_character_modifier_magic_omen_martial_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_omen_martial_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_omen_martial_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_omen_martial_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_omen_martial_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_omen_martial_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_omen_martial_modifier_duration_value }
	}
 }
 spell_effect_146 = {	# add_character_modifier_magic_omen_stewardship_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_omen_stewardship_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_omen_stewardship_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_omen_stewardship_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_omen_stewardship_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_omen_stewardship_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_omen_stewardship_modifier_duration_value }
	}
 }
 spell_effect_147 = {	# add_character_modifier_magic_omen_learning_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_omen_learning_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_omen_learning_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_omen_learning_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_omen_learning_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_omen_learning_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_omen_learning_modifier_duration_value }
	}
 }
 spell_effect_148 = {	# add_character_modifier_magic_genetics_positive_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_genetics_positive_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_genetics_positive_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_genetics_positive_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_genetics_positive_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_genetics_positive_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_genetics_positive_modifier_duration_value }
	}
 }
 spell_effect_149 = {	# add_character_modifier_magic_magi_siege_value_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magi_siege_value_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magi_siege_value_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magi_siege_value_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magi_siege_value_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magi_siege_value_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magi_siege_value_add_modifier_duration_value }
	}
 }
 spell_effect_150 = {	# add_county_modifier_magic_epidemic_resistance_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_epidemic_resistance_gain_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_epidemic_resistance_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_epidemic_resistance_gain_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = magic_epidemic_resistance_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_epidemic_resistance_gain_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_epidemic_resistance_gain_modifier_duration_value }
	}
 }
 spell_effect_151 = {	# add_county_modifier_magic_county_opinion_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_county_opinion_add_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_county_opinion_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_county_opinion_add_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = magic_county_opinion_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_county_opinion_add_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_county_opinion_add_modifier_duration_value }
	}
 }
 spell_effect_152 = {	# add_county_modifier_magic_county_opinion_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_county_opinion_loss_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_county_opinion_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_county_opinion_loss_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = magic_county_opinion_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_county_opinion_loss_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_county_opinion_loss_modifier_duration_value }
	}
 }
 spell_effect_153 = {	# add_county_modifier_magic_monthly_county_control_decline_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_county_control_decline_add_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_county_control_decline_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_county_control_decline_add_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_county_control_decline_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_county_control_decline_add_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_county_control_decline_add_modifier_duration_value }
	}
 }
 spell_effect_154 = {	# add_county_modifier_improve_agriculture_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = improve_agriculture_magic_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = improve_agriculture_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = improve_agriculture_magic_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = improve_agriculture_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = improve_agriculture_magic_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = improve_agriculture_magic_modifier_duration_value }
	}
 }
 spell_effect_155 = {	# add_county_modifier_reduce_agriculture_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = reduce_agriculture_magic_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = reduce_agriculture_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = reduce_agriculture_magic_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = reduce_agriculture_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = reduce_agriculture_magic_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = reduce_agriculture_magic_modifier_duration_value }
	}
 }
 spell_effect_156 = {	# add_county_modifier_building_construction_county_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = building_construction_county_magic_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = building_construction_county_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = building_construction_county_magic_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = building_construction_county_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = building_construction_county_magic_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = building_construction_county_magic_modifier_duration_value }
	}
 }
 spell_effect_157 = {	# add_county_modifier_defensive_county_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = defensive_county_magic_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = defensive_county_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = defensive_county_magic_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = defensive_county_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = defensive_county_magic_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = defensive_county_magic_modifier_duration_value }
	}
 }
 spell_effect_158 = {	# add_county_modifier_decimate_defense_county_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = decimate_defense_county_magic_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = decimate_defense_county_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = decimate_defense_county_magic_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = decimate_defense_county_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = decimate_defense_county_magic_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = decimate_defense_county_magic_modifier_duration_value }
	}
 }
 spell_effect_159 = {	# add_county_modifier_fort_creation_county_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = fort_creation_county_magic_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = fort_creation_county_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = fort_creation_county_magic_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = fort_creation_county_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = fort_creation_county_magic_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = fort_creation_county_magic_modifier_duration_value }
	}
 }
 spell_effect_160 = {	# add_county_modifier_long_term_fort_creation_county_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = long_term_fort_creation_county_magic_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = long_term_fort_creation_county_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = long_term_fort_creation_county_magic_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = long_term_fort_creation_county_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = long_term_fort_creation_county_magic_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = long_term_fort_creation_county_magic_modifier_duration_value }
	}
 }
 spell_effect_161 = {	# add_county_modifier_backfire_county_debuff_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = backfire_county_debuff_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = backfire_county_debuff_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = backfire_county_debuff_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = backfire_county_debuff_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = backfire_county_debuff_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = backfire_county_debuff_modifier_duration_value }
	}
 }
 spell_effect_162 = {	# add_county_modifier_backfire_county_debuff_earth_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = backfire_county_debuff_earth_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = backfire_county_debuff_earth_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = backfire_county_debuff_earth_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = backfire_county_debuff_earth_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = backfire_county_debuff_earth_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = backfire_county_debuff_earth_modifier_duration_value }
	}
 }
 spell_effect_163 = {	# add_county_modifier_county_ground_positive_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = county_ground_positive_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_ground_positive_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_ground_positive_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = county_ground_positive_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_ground_positive_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_ground_positive_modifier_duration_value }
	}
 }
 spell_effect_164 = {	# add_county_modifier_county_ground_positive_earth_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = county_ground_positive_earth_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_ground_positive_earth_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_ground_positive_earth_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = county_ground_positive_earth_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_ground_positive_earth_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_ground_positive_earth_modifier_duration_value }
	}
 }
 spell_effect_165 = {	# add_county_modifier_county_ground_positive_earth_long_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = county_ground_positive_earth_long_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_ground_positive_earth_long_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_ground_positive_earth_long_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = county_ground_positive_earth_long_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_ground_positive_earth_long_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_ground_positive_earth_long_modifier_duration_value }
	}
 }
 spell_effect_166 = {	# add_county_modifier_county_positive_build_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = county_positive_build_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_positive_build_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_positive_build_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = county_positive_build_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_positive_build_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_positive_build_modifier_duration_value }
	}
 }
 spell_effect_167 = {	# add_county_modifier_weather_negative_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = weather_negative_magic_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = weather_negative_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = weather_negative_magic_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = weather_negative_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = weather_negative_magic_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = weather_negative_magic_modifier_duration_value }
	}
 }
 spell_effect_168 = {	# add_county_modifier_weather_negative_fire_magic_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = weather_negative_fire_magic_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = weather_negative_fire_magic_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = weather_negative_fire_magic_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = weather_negative_fire_magic_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = weather_negative_fire_magic_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = weather_negative_fire_magic_modifier_duration_value }
	}
 }
 spell_effect_169 = {	# add_county_modifier_county_defender_advantage_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = county_defender_advantage_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_defender_advantage_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_defender_advantage_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = county_defender_advantage_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_defender_advantage_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_defender_advantage_modifier_duration_value }
	}
 }
 spell_effect_170 = {	# add_county_modifier_county_lower_control_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = county_lower_control_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_lower_control_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_lower_control_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = county_lower_control_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_lower_control_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_lower_control_modifier_duration_value }
	}
 }
 spell_effect_171 = {	# add_county_modifier_county_lower_control_modifier_livestock
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = county_lower_control_modifier_livestock TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_lower_control_modifier_livestock_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_lower_control_modifier_livestock   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = county_lower_control_modifier_livestock_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_lower_control_modifier_livestock   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_lower_control_modifier_livestock_duration_value }
	}
 }
 spell_effect_172 = {	# add_county_modifier_county_illuminated_night_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = county_illuminated_night_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_illuminated_night_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_illuminated_night_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = county_illuminated_night_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_illuminated_night_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_illuminated_night_modifier_duration_value }
	}
 }
 spell_effect_173 = {	# add_county_modifier_county_light_pollution_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = county_light_pollution_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_light_pollution_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_light_pollution_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = county_light_pollution_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = county_light_pollution_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = county_light_pollution_modifier_duration_value }
	}
 }
 spell_effect_174 = {	# add_county_modifier_lead_to_gold_inflation_min
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = lead_to_gold_inflation_min TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = lead_to_gold_inflation_min_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = lead_to_gold_inflation_min   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = lead_to_gold_inflation_min_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = lead_to_gold_inflation_min   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = lead_to_gold_inflation_min_duration_value }
	}
 }
 spell_effect_175 = {	# add_county_modifier_lead_to_gold_inflation
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = lead_to_gold_inflation TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = lead_to_gold_inflation_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = lead_to_gold_inflation   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = lead_to_gold_inflation_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = lead_to_gold_inflation   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = lead_to_gold_inflation_duration_value }
	}
 }
 spell_effect_176 = {	# add_county_modifier_magic_ruined_agriculture_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_ruined_agriculture_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_ruined_agriculture_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_ruined_agriculture_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = magic_ruined_agriculture_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_ruined_agriculture_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_ruined_agriculture_modifier_duration_value }
	}
 }
 spell_effect_177 = {	# add_county_modifier_magic_destroyed_buildings_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_destroyed_buildings_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_destroyed_buildings_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_destroyed_buildings_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = magic_destroyed_buildings_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_destroyed_buildings_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_destroyed_buildings_modifier_duration_value }
	}
 }
 spell_effect_178 = {	# add_county_modifier_magic_fogswept_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_fogswept_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_fogswept_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_fogswept_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = magic_fogswept_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_fogswept_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_fogswept_modifier_duration_value }
	}
 }
 spell_effect_179 = {	# add_province_modifier_magic_shattered_defenses_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_shattered_defenses_modifier TYPE = province LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_shattered_defenses_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_shattered_defenses_modifier   TYPE = province LEVEL = scope:modifier_stack_amount_value YEARS = magic_shattered_defenses_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_shattered_defenses_modifier   TYPE = province LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_shattered_defenses_modifier_duration_value }
	}
 }
 spell_effect_180 = {	# add_county_modifier_magic_corroded_defenses_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_corroded_defenses_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_corroded_defenses_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_corroded_defenses_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = magic_corroded_defenses_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_corroded_defenses_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_corroded_defenses_modifier_duration_value }
	}
 }
 spell_effect_181 = {	# add_county_modifier_glasswinds_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = glasswinds_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = glasswinds_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = glasswinds_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = glasswinds_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = glasswinds_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = glasswinds_modifier_duration_value }
	}
 }
 spell_effect_182 = {	# add_county_modifier_resource_exotic_metals_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = resource_exotic_metals_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = resource_exotic_metals_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = resource_exotic_metals_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = resource_exotic_metals_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = resource_exotic_metals_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = resource_exotic_metals_modifier_duration_value }
	}
 }
 spell_effect_183 = {	# add_county_modifier_resource_abundant_stone_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = resource_abundant_stone_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = resource_abundant_stone_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = resource_abundant_stone_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = resource_abundant_stone_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = resource_abundant_stone_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = resource_abundant_stone_modifier_duration_value }
	}
 }
 spell_effect_184 = {	# add_county_modifier_resource_excellent_soil_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = resource_excellent_soil_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = resource_excellent_soil_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = resource_excellent_soil_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = resource_excellent_soil_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = resource_excellent_soil_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = resource_excellent_soil_modifier_duration_value }
	}
 }
 spell_effect_185 = {	# add_county_modifier_resource_verdant_plant_growth_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = resource_verdant_plant_growth_modifier TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = resource_verdant_plant_growth_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = resource_verdant_plant_growth_modifier   TYPE = county LEVEL = scope:modifier_stack_amount_value YEARS = resource_verdant_plant_growth_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = resource_verdant_plant_growth_modifier   TYPE = county LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = resource_verdant_plant_growth_modifier_duration_value }
	}
 }
 spell_effect_186 = {	# add_character_modifier_magic_character_monthly_county_control_growth_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_character_monthly_county_control_growth_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_monthly_county_control_growth_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_monthly_county_control_growth_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_character_monthly_county_control_growth_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_monthly_county_control_growth_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_monthly_county_control_growth_add_modifier_duration_value }
	}
 }
 spell_effect_187 = {	# add_character_modifier_magic_character_capital_county_monthly_development_growth_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_character_capital_county_monthly_development_growth_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_capital_county_monthly_development_growth_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_capital_county_monthly_development_growth_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_character_capital_county_monthly_development_growth_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_capital_county_monthly_development_growth_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_capital_county_monthly_development_growth_add_modifier_duration_value }
	}
 }
 spell_effect_188 = {	# add_character_modifier_magic_character_build_speed_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_character_build_speed_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_build_speed_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_build_speed_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_character_build_speed_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_character_build_speed_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_character_build_speed_modifier_duration_value }
	}
 }
 spell_effect_189 = {	# add_province_modifier_backfire_province_debuff_fire_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = backfire_province_debuff_fire_modifier TYPE = province LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = backfire_province_debuff_fire_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = backfire_province_debuff_fire_modifier   TYPE = province LEVEL = scope:modifier_stack_amount_value YEARS = backfire_province_debuff_fire_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = backfire_province_debuff_fire_modifier   TYPE = province LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = backfire_province_debuff_fire_modifier_duration_value }
	}
 }
 spell_effect_190 = {	# add_province_modifier_enhanced_farmland_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = enhanced_farmland_modifier TYPE = province LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = enhanced_farmland_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = enhanced_farmland_modifier   TYPE = province LEVEL = scope:modifier_stack_amount_value YEARS = enhanced_farmland_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = enhanced_farmland_modifier   TYPE = province LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = enhanced_farmland_modifier_duration_value }
	}
 }
 spell_effect_191 = {	# add_character_modifier_magic_tyranny_gain_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_tyranny_gain_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_tyranny_gain_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_tyranny_gain_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_tyranny_gain_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_tyranny_gain_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_tyranny_gain_mult_modifier_duration_value }
	}
 }
 spell_effect_192 = {	# add_character_modifier_magic_tyranny_loss_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_tyranny_loss_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_tyranny_loss_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_tyranny_loss_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_tyranny_loss_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_tyranny_loss_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_tyranny_loss_mult_modifier_duration_value }
	}
 }
 spell_effect_193 = {	# add_character_modifier_magic_monthly_tyranny_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_tyranny_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_tyranny_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_tyranny_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_tyranny_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_tyranny_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_tyranny_modifier_duration_value }
	}
 }
 spell_effect_194 = {	# add_character_modifier_magic_monthly_tyranny_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_tyranny_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_tyranny_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_tyranny_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_tyranny_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_tyranny_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_tyranny_loss_modifier_duration_value }
	}
 }
 spell_effect_195 = {	# add_character_modifier_magic_cultural_head_fascination_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_cultural_head_fascination_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_cultural_head_fascination_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_cultural_head_fascination_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_cultural_head_fascination_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_cultural_head_fascination_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_cultural_head_fascination_add_modifier_duration_value }
	}
 }
 spell_effect_196 = {	# add_character_modifier_magic_cultural_head_fascination_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_cultural_head_fascination_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_cultural_head_fascination_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_cultural_head_fascination_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_cultural_head_fascination_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_cultural_head_fascination_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_cultural_head_fascination_mult_modifier_duration_value }
	}
 }
 spell_effect_197 = {	# add_character_modifier_magic_unnatural_shaping_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_unnatural_shaping_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_unnatural_shaping_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_unnatural_shaping_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_unnatural_shaping_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_unnatural_shaping_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_unnatural_shaping_modifier_duration_value }
	}
 }
 spell_effect_198 = {	# add_character_modifier_magic_boneshaping_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_boneshaping_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_boneshaping_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_boneshaping_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_boneshaping_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_boneshaping_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_boneshaping_modifier_duration_value }
	}
 }
 spell_effect_199 = {	# add_character_modifier_magic_defiled_nadir_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_defiled_nadir_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_defiled_nadir_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_defiled_nadir_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_defiled_nadir_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_defiled_nadir_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_defiled_nadir_modifier_duration_value }
	}
 }
 spell_effect_200 = {	# add_character_modifier_magic_frozen_experience_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_frozen_experience_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_frozen_experience_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_frozen_experience_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_frozen_experience_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_frozen_experience_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_frozen_experience_modifier_duration_value }
	}
 }
 spell_effect_201 = {	# add_character_modifier_magic_arcane_incapacitation_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_arcane_incapacitation_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_arcane_incapacitation_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_arcane_incapacitation_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_arcane_incapacitation_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_arcane_incapacitation_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_arcane_incapacitation_modifier_duration_value }
	}
 }
 spell_effect_202 = {	# add_character_modifier_magic_mind_fog_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_mind_fog_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_mind_fog_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_mind_fog_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_mind_fog_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_mind_fog_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_mind_fog_modifier_duration_value }
	}
 }
 spell_effect_203 = {	# add_character_modifier_magic_life_extension_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_life_extension_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_life_extension_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_life_extension_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_life_extension_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_life_extension_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_life_extension_modifier_duration_value }
	}
 }
 spell_effect_204 = {	# add_character_modifier_magic_arcane_degeneration_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_arcane_degeneration_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_arcane_degeneration_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_arcane_degeneration_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_arcane_degeneration_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_arcane_degeneration_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_arcane_degeneration_modifier_duration_value }
	}
 }
 spell_effect_205 = {	# add_character_modifier_magic_bodily_modification_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_bodily_modification_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_bodily_modification_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_bodily_modification_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_bodily_modification_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_bodily_modification_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_bodily_modification_modifier_duration_value }
	}
 }
 spell_effect_206 = {	# add_character_modifier_magic_levy_reinforcement_rate_gain_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_levy_reinforcement_rate_gain_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_levy_reinforcement_rate_gain_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_levy_reinforcement_rate_gain_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_levy_reinforcement_rate_gain_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_levy_reinforcement_rate_gain_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_levy_reinforcement_rate_gain_modifier_duration_value }
	}
 }
 spell_effect_207 = {	# add_character_modifier_magic_enemy_hostile_scheme_phase_duration_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_enemy_hostile_scheme_phase_duration_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_enemy_hostile_scheme_phase_duration_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_enemy_hostile_scheme_phase_duration_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_enemy_hostile_scheme_phase_duration_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_enemy_hostile_scheme_phase_duration_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_enemy_hostile_scheme_phase_duration_add_modifier_duration_value }
	}
 }
 spell_effect_208 = {	# add_character_modifier_magic_enemy_hostile_scheme_phase_duration_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_enemy_hostile_scheme_phase_duration_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_enemy_hostile_scheme_phase_duration_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_enemy_hostile_scheme_phase_duration_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_enemy_hostile_scheme_phase_duration_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_enemy_hostile_scheme_phase_duration_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_enemy_hostile_scheme_phase_duration_loss_modifier_duration_value }
	}
 }
 spell_effect_209 = {	# add_character_modifier_magic_scheme_discovery_chance_mult_loss_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_scheme_discovery_chance_mult_loss_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_scheme_discovery_chance_mult_loss_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_scheme_discovery_chance_mult_loss_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_scheme_discovery_chance_mult_loss_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_scheme_discovery_chance_mult_loss_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_scheme_discovery_chance_mult_loss_modifier_duration_value }
	}
 }
 spell_effect_210 = {	# add_character_modifier_magic_monthly_prestige_gain_per_dread_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_prestige_gain_per_dread_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_prestige_gain_per_dread_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_prestige_gain_per_dread_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_prestige_gain_per_dread_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_prestige_gain_per_dread_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_prestige_gain_per_dread_mult_modifier_duration_value }
	}
 }
 spell_effect_211 = {	# add_character_modifier_magic_monthly_dread_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_dread_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_dread_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_dread_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_dread_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_dread_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_dread_modifier_duration_value }
	}
 }
 spell_effect_212 = {	# add_character_modifier_magic_monthly_lifestyle_xp_gain_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monthly_lifestyle_xp_gain_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_lifestyle_xp_gain_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_lifestyle_xp_gain_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monthly_lifestyle_xp_gain_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monthly_lifestyle_xp_gain_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monthly_lifestyle_xp_gain_mult_modifier_duration_value }
	}
 }
 spell_effect_213 = {	# add_character_modifier_magic_intrigue_lifestyle_xp_gain_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_intrigue_lifestyle_xp_gain_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_lifestyle_xp_gain_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_lifestyle_xp_gain_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_intrigue_lifestyle_xp_gain_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_lifestyle_xp_gain_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_lifestyle_xp_gain_mult_modifier_duration_value }
	}
 }
 spell_effect_214 = {	# add_character_modifier_magic_stewardship_lifestyle_xp_gain_mult_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_stewardship_lifestyle_xp_gain_mult_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_lifestyle_xp_gain_mult_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_lifestyle_xp_gain_mult_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_stewardship_lifestyle_xp_gain_mult_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_lifestyle_xp_gain_mult_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_lifestyle_xp_gain_mult_modifier_duration_value }
	}
 }
 spell_effect_215 = {	# add_character_modifier_magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
 }
 spell_effect_216 = {	# add_character_modifier_magic_martial_lifestyle_xp_gain_mult_negative_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_martial_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_lifestyle_xp_gain_mult_negative_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_martial_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_martial_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
 }
 spell_effect_217 = {	# add_character_modifier_magic_stewardship_lifestyle_xp_gain_mult_negative_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_stewardship_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_lifestyle_xp_gain_mult_negative_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_stewardship_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_stewardship_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
 }
 spell_effect_218 = {	# add_character_modifier_magic_intrigue_lifestyle_xp_gain_mult_negative_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_intrigue_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_lifestyle_xp_gain_mult_negative_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_intrigue_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_intrigue_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
 }
 spell_effect_219 = {	# add_character_modifier_magic_learning_lifestyle_xp_gain_mult_negative_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_learning_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_learning_lifestyle_xp_gain_mult_negative_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_learning_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_learning_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
 }
 spell_effect_220 = {	# add_character_modifier_magic_arcana_lifestyle_xp_gain_mult_negative_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_arcana_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_arcana_lifestyle_xp_gain_mult_negative_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_arcana_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_arcana_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_arcana_lifestyle_xp_gain_mult_negative_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_arcana_lifestyle_xp_gain_mult_negative_modifier_duration_value }
	}
 }
 spell_effect_221 = {	# add_character_modifier_shard_exhaustion_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = shard_exhaustion_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = shard_exhaustion_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = shard_exhaustion_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = shard_exhaustion_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = shard_exhaustion_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = shard_exhaustion_modifier_duration_value }
	}
 }
 spell_effect_222 = {	# add_character_modifier_communication_shards_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = communication_shards_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = communication_shards_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = communication_shards_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = communication_shards_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = communication_shards_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = communication_shards_modifier_duration_value }
	}
 }
 spell_effect_223 = {	# add_character_modifier_title_creation_cost_mult_positive_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = title_creation_cost_mult_positive_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = title_creation_cost_mult_positive_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = title_creation_cost_mult_positive_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = title_creation_cost_mult_positive_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = title_creation_cost_mult_positive_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = title_creation_cost_mult_positive_modifier_duration_value }
	}
 }
 spell_effect_224 = {	# add_character_modifier_magic_resistance_magic_modifier
	if = {
		limit = { has_character_modifier = magic_resistance_magic_modifier_1 }
		remove_character_modifier = magic_resistance_magic_modifier_1
	}
	if = {
		limit = { has_character_modifier = magic_resistance_magic_modifier_2 }
		remove_character_modifier = magic_resistance_magic_modifier_2
	}
	if = {
		limit = { has_character_modifier = magic_resistance_magic_modifier_3 }
		remove_character_modifier = magic_resistance_magic_modifier_3
	}
	if = {
		limit = { has_character_modifier = magic_resistance_magic_modifier_4 }
		remove_character_modifier = magic_resistance_magic_modifier_4
	}
	if = {
		limit = { has_character_modifier = magic_resistance_magic_modifier_5 }
		remove_character_modifier = magic_resistance_magic_modifier_5
	}
	if = {
		limit = { has_character_modifier = magic_resistance_magic_modifier_6 }
		remove_character_modifier = magic_resistance_magic_modifier_6
	}
	if = {
		limit = { has_character_modifier = magic_resistance_magic_modifier_7 }
		remove_character_modifier = magic_resistance_magic_modifier_7
	}
	if = {
		limit = { has_character_modifier = magic_resistance_magic_modifier_8 }
		remove_character_modifier = magic_resistance_magic_modifier_8
	}
	if = {
		limit = { has_character_modifier = magic_resistance_magic_modifier_9 }
		remove_character_modifier = magic_resistance_magic_modifier_9
	}
	if = {
		limit = { has_character_modifier = magic_resistance_magic_modifier_10 }
		remove_character_modifier = magic_resistance_magic_modifier_10
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 1 }
		add_character_modifier = { 
			modifier = magic_resistance_magic_modifier_1
			years = magic_resistance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 2 }
		add_character_modifier = { 
			modifier = magic_resistance_magic_modifier_2
			years = magic_resistance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 3 }
		add_character_modifier = { 
			modifier = magic_resistance_magic_modifier_3
			years = magic_resistance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 4 }
		add_character_modifier = { 
			modifier = magic_resistance_magic_modifier_4
			years = magic_resistance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 5 }
		add_character_modifier = { 
			modifier = magic_resistance_magic_modifier_5
			years = magic_resistance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 6 }
		add_character_modifier = { 
			modifier = magic_resistance_magic_modifier_6
			years = magic_resistance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 7 }
		add_character_modifier = { 
			modifier = magic_resistance_magic_modifier_7
			years = magic_resistance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 8 }
		add_character_modifier = { 
			modifier = magic_resistance_magic_modifier_8
			years = magic_resistance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 9 }
		add_character_modifier = { 
			modifier = magic_resistance_magic_modifier_9
			years = magic_resistance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value >= 10 }
		add_character_modifier = { 
			modifier = magic_resistance_magic_modifier_10
			years = magic_resistance_magic_modifier_duration_value
		}
	}
 }
 spell_effect_225 = {	# add_character_modifier_magic_penetration_magic_modifier
	if = {
		limit = { has_character_modifier = magic_penetration_magic_modifier_1 }
		remove_character_modifier = magic_penetration_magic_modifier_1
	}
	if = {
		limit = { has_character_modifier = magic_penetration_magic_modifier_2 }
		remove_character_modifier = magic_penetration_magic_modifier_2
	}
	if = {
		limit = { has_character_modifier = magic_penetration_magic_modifier_3 }
		remove_character_modifier = magic_penetration_magic_modifier_3
	}
	if = {
		limit = { has_character_modifier = magic_penetration_magic_modifier_4 }
		remove_character_modifier = magic_penetration_magic_modifier_4
	}
	if = {
		limit = { has_character_modifier = magic_penetration_magic_modifier_5 }
		remove_character_modifier = magic_penetration_magic_modifier_5
	}
	if = {
		limit = { has_character_modifier = magic_penetration_magic_modifier_6 }
		remove_character_modifier = magic_penetration_magic_modifier_6
	}
	if = {
		limit = { has_character_modifier = magic_penetration_magic_modifier_7 }
		remove_character_modifier = magic_penetration_magic_modifier_7
	}
	if = {
		limit = { has_character_modifier = magic_penetration_magic_modifier_8 }
		remove_character_modifier = magic_penetration_magic_modifier_8
	}
	if = {
		limit = { has_character_modifier = magic_penetration_magic_modifier_9 }
		remove_character_modifier = magic_penetration_magic_modifier_9
	}
	if = {
		limit = { has_character_modifier = magic_penetration_magic_modifier_10 }
		remove_character_modifier = magic_penetration_magic_modifier_10
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 1 }
		add_character_modifier = { 
			modifier = magic_penetration_magic_modifier_1
			years = magic_penetration_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 2 }
		add_character_modifier = { 
			modifier = magic_penetration_magic_modifier_2
			years = magic_penetration_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 3 }
		add_character_modifier = { 
			modifier = magic_penetration_magic_modifier_3
			years = magic_penetration_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 4 }
		add_character_modifier = { 
			modifier = magic_penetration_magic_modifier_4
			years = magic_penetration_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 5 }
		add_character_modifier = { 
			modifier = magic_penetration_magic_modifier_5
			years = magic_penetration_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 6 }
		add_character_modifier = { 
			modifier = magic_penetration_magic_modifier_6
			years = magic_penetration_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 7 }
		add_character_modifier = { 
			modifier = magic_penetration_magic_modifier_7
			years = magic_penetration_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 8 }
		add_character_modifier = { 
			modifier = magic_penetration_magic_modifier_8
			years = magic_penetration_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 9 }
		add_character_modifier = { 
			modifier = magic_penetration_magic_modifier_9
			years = magic_penetration_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value >= 10 }
		add_character_modifier = { 
			modifier = magic_penetration_magic_modifier_10
			years = magic_penetration_magic_modifier_duration_value
		}
	}
 }
 spell_effect_226 = {	# add_character_modifier_magic_battle_death_chance_modifier
	if = {
		limit = { has_character_modifier = magic_battle_death_chance_modifier_1 }
		remove_character_modifier = magic_battle_death_chance_modifier_1
	}
	if = {
		limit = { has_character_modifier = magic_battle_death_chance_modifier_2 }
		remove_character_modifier = magic_battle_death_chance_modifier_2
	}
	if = {
		limit = { has_character_modifier = magic_battle_death_chance_modifier_3 }
		remove_character_modifier = magic_battle_death_chance_modifier_3
	}
	if = {
		limit = { has_character_modifier = magic_battle_death_chance_modifier_4 }
		remove_character_modifier = magic_battle_death_chance_modifier_4
	}
	if = {
		limit = { has_character_modifier = magic_battle_death_chance_modifier_5 }
		remove_character_modifier = magic_battle_death_chance_modifier_5
	}
	if = {
		limit = { has_character_modifier = magic_battle_death_chance_modifier_6 }
		remove_character_modifier = magic_battle_death_chance_modifier_6
	}
	if = {
		limit = { has_character_modifier = magic_battle_death_chance_modifier_7 }
		remove_character_modifier = magic_battle_death_chance_modifier_7
	}
	if = {
		limit = { has_character_modifier = magic_battle_death_chance_modifier_8 }
		remove_character_modifier = magic_battle_death_chance_modifier_8
	}
	if = {
		limit = { has_character_modifier = magic_battle_death_chance_modifier_9 }
		remove_character_modifier = magic_battle_death_chance_modifier_9
	}
	if = {
		limit = { has_character_modifier = magic_battle_death_chance_modifier_10 }
		remove_character_modifier = magic_battle_death_chance_modifier_10
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 1 }
		add_character_modifier = { 
			modifier = magic_battle_death_chance_modifier_1
			years = magic_battle_death_chance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 2 }
		add_character_modifier = { 
			modifier = magic_battle_death_chance_modifier_2
			years = magic_battle_death_chance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 3 }
		add_character_modifier = { 
			modifier = magic_battle_death_chance_modifier_3
			years = magic_battle_death_chance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 4 }
		add_character_modifier = { 
			modifier = magic_battle_death_chance_modifier_4
			years = magic_battle_death_chance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 5 }
		add_character_modifier = { 
			modifier = magic_battle_death_chance_modifier_5
			years = magic_battle_death_chance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 6 }
		add_character_modifier = { 
			modifier = magic_battle_death_chance_modifier_6
			years = magic_battle_death_chance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 7 }
		add_character_modifier = { 
			modifier = magic_battle_death_chance_modifier_7
			years = magic_battle_death_chance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 8 }
		add_character_modifier = { 
			modifier = magic_battle_death_chance_modifier_8
			years = magic_battle_death_chance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 9 }
		add_character_modifier = { 
			modifier = magic_battle_death_chance_modifier_9
			years = magic_battle_death_chance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value >= 10 }
		add_character_modifier = { 
			modifier = magic_battle_death_chance_modifier_10
			years = magic_battle_death_chance_modifier_duration_value
		}
	}
 }
 spell_effect_227 = {	# add_character_modifier_enemy_knight_kill_chance_magic_modifier
	if = {
		limit = { has_character_modifier = enemy_knight_kill_chance_magic_modifier_1 }
		remove_character_modifier = enemy_knight_kill_chance_magic_modifier_1
	}
	if = {
		limit = { has_character_modifier = enemy_knight_kill_chance_magic_modifier_2 }
		remove_character_modifier = enemy_knight_kill_chance_magic_modifier_2
	}
	if = {
		limit = { has_character_modifier = enemy_knight_kill_chance_magic_modifier_3 }
		remove_character_modifier = enemy_knight_kill_chance_magic_modifier_3
	}
	if = {
		limit = { has_character_modifier = enemy_knight_kill_chance_magic_modifier_4 }
		remove_character_modifier = enemy_knight_kill_chance_magic_modifier_4
	}
	if = {
		limit = { has_character_modifier = enemy_knight_kill_chance_magic_modifier_5 }
		remove_character_modifier = enemy_knight_kill_chance_magic_modifier_5
	}
	if = {
		limit = { has_character_modifier = enemy_knight_kill_chance_magic_modifier_6 }
		remove_character_modifier = enemy_knight_kill_chance_magic_modifier_6
	}
	if = {
		limit = { has_character_modifier = enemy_knight_kill_chance_magic_modifier_7 }
		remove_character_modifier = enemy_knight_kill_chance_magic_modifier_7
	}
	if = {
		limit = { has_character_modifier = enemy_knight_kill_chance_magic_modifier_8 }
		remove_character_modifier = enemy_knight_kill_chance_magic_modifier_8
	}
	if = {
		limit = { has_character_modifier = enemy_knight_kill_chance_magic_modifier_9 }
		remove_character_modifier = enemy_knight_kill_chance_magic_modifier_9
	}
	if = {
		limit = { has_character_modifier = enemy_knight_kill_chance_magic_modifier_10 }
		remove_character_modifier = enemy_knight_kill_chance_magic_modifier_10
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 1 }
		add_character_modifier = { 
			modifier = enemy_knight_kill_chance_magic_modifier_1
			years = enemy_knight_kill_chance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 2 }
		add_character_modifier = { 
			modifier = enemy_knight_kill_chance_magic_modifier_2
			years = enemy_knight_kill_chance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 3 }
		add_character_modifier = { 
			modifier = enemy_knight_kill_chance_magic_modifier_3
			years = enemy_knight_kill_chance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 4 }
		add_character_modifier = { 
			modifier = enemy_knight_kill_chance_magic_modifier_4
			years = enemy_knight_kill_chance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 5 }
		add_character_modifier = { 
			modifier = enemy_knight_kill_chance_magic_modifier_5
			years = enemy_knight_kill_chance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 6 }
		add_character_modifier = { 
			modifier = enemy_knight_kill_chance_magic_modifier_6
			years = enemy_knight_kill_chance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 7 }
		add_character_modifier = { 
			modifier = enemy_knight_kill_chance_magic_modifier_7
			years = enemy_knight_kill_chance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 8 }
		add_character_modifier = { 
			modifier = enemy_knight_kill_chance_magic_modifier_8
			years = enemy_knight_kill_chance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 9 }
		add_character_modifier = { 
			modifier = enemy_knight_kill_chance_magic_modifier_9
			years = enemy_knight_kill_chance_magic_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value >= 10 }
		add_character_modifier = { 
			modifier = enemy_knight_kill_chance_magic_modifier_10
			years = enemy_knight_kill_chance_magic_modifier_duration_value
		}
	}
 }
 spell_effect_228 = {	# add_character_modifier_magic_vassalization_acceptance_modifier
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_1 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_1
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_2 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_2
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_3 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_3
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_4 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_4
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_5 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_5
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_6 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_6
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_7 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_7
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_8 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_8
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_9 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_9
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_10 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_10
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_11 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_11
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_12 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_12
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_13 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_13
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_14 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_14
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_15 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_15
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_16 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_16
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_17 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_17
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_18 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_18
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_19 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_19
	}
	if = {
		limit = { has_character_modifier = magic_vassalization_acceptance_modifier_20 }
		remove_character_modifier = magic_vassalization_acceptance_modifier_20
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 1 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_1
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 2 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_2
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 3 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_3
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 4 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_4
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 5 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_5
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 6 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_6
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 7 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_7
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 8 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_8
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 9 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_9
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 10 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_10
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 11 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_11
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 12 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_12
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 13 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_13
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 14 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_14
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 15 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_15
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 16 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_16
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 17 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_17
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 18 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_18
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 19 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_19
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value >= 20 }
		add_character_modifier = { 
			modifier = magic_vassalization_acceptance_modifier_20
			years = magic_vassalization_acceptance_modifier_duration_value
		}
	}
 }
 spell_effect_229 = {	# add_county_modifier_magic_arcane_fallout_reduction_modifier
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_1 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_1
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_2 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_2
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_3 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_3
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_4 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_4
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_5 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_5
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_6 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_6
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_7 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_7
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_8 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_8
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_9 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_9
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_10 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_10
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_11 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_11
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_12 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_12
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_13 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_13
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_14 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_14
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_15 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_15
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_16 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_16
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_17 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_17
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_18 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_18
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_19 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_19
	}
	if = {
		limit = { has_county_modifier = magic_arcane_fallout_reduction_modifier_20 }
		remove_county_modifier = magic_arcane_fallout_reduction_modifier_20
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 1 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_1
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 2 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_2
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 3 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_3
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 4 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_4
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 5 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_5
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 6 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_6
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 7 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_7
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 8 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_8
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 9 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_9
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 10 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_10
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 11 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_11
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 12 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_12
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 13 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_13
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 14 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_14
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 15 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_15
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 16 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_16
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 17 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_17
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 18 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_18
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 19 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_19
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value >= 20 }
		add_county_modifier = { 
			modifier = magic_arcane_fallout_reduction_modifier_20
			years = magic_arcane_fallout_reduction_modifier_duration_value
		}
	}
 }
 spell_effect_230 = {	# add_county_modifier_magic_habitability_add_modifier
	if = {
		limit = { has_county_modifier = magic_habitability_add_modifier_1 }
		remove_county_modifier = magic_habitability_add_modifier_1
	}
	if = {
		limit = { has_county_modifier = magic_habitability_add_modifier_2 }
		remove_county_modifier = magic_habitability_add_modifier_2
	}
	if = {
		limit = { has_county_modifier = magic_habitability_add_modifier_3 }
		remove_county_modifier = magic_habitability_add_modifier_3
	}
	if = {
		limit = { has_county_modifier = magic_habitability_add_modifier_4 }
		remove_county_modifier = magic_habitability_add_modifier_4
	}
	if = {
		limit = { has_county_modifier = magic_habitability_add_modifier_5 }
		remove_county_modifier = magic_habitability_add_modifier_5
	}
	if = {
		limit = { has_county_modifier = magic_habitability_add_modifier_6 }
		remove_county_modifier = magic_habitability_add_modifier_6
	}
	if = {
		limit = { has_county_modifier = magic_habitability_add_modifier_7 }
		remove_county_modifier = magic_habitability_add_modifier_7
	}
	if = {
		limit = { has_county_modifier = magic_habitability_add_modifier_8 }
		remove_county_modifier = magic_habitability_add_modifier_8
	}
	if = {
		limit = { has_county_modifier = magic_habitability_add_modifier_9 }
		remove_county_modifier = magic_habitability_add_modifier_9
	}
	if = {
		limit = { has_county_modifier = magic_habitability_add_modifier_10 }
		remove_county_modifier = magic_habitability_add_modifier_10
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 1 }
		add_county_modifier = { 
			modifier = magic_habitability_add_modifier_1
			years = magic_habitability_add_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 2 }
		add_county_modifier = { 
			modifier = magic_habitability_add_modifier_2
			years = magic_habitability_add_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 3 }
		add_county_modifier = { 
			modifier = magic_habitability_add_modifier_3
			years = magic_habitability_add_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 4 }
		add_county_modifier = { 
			modifier = magic_habitability_add_modifier_4
			years = magic_habitability_add_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 5 }
		add_county_modifier = { 
			modifier = magic_habitability_add_modifier_5
			years = magic_habitability_add_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 6 }
		add_county_modifier = { 
			modifier = magic_habitability_add_modifier_6
			years = magic_habitability_add_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 7 }
		add_county_modifier = { 
			modifier = magic_habitability_add_modifier_7
			years = magic_habitability_add_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 8 }
		add_county_modifier = { 
			modifier = magic_habitability_add_modifier_8
			years = magic_habitability_add_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 9 }
		add_county_modifier = { 
			modifier = magic_habitability_add_modifier_9
			years = magic_habitability_add_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value >= 10 }
		add_county_modifier = { 
			modifier = magic_habitability_add_modifier_10
			years = magic_habitability_add_modifier_duration_value
		}
	}
 }
 spell_effect_231 = {	# add_character_modifier_raid_capture_improvement_modifier
	if = {
		limit = { has_character_modifier = raid_capture_improvement_modifier_1 }
		remove_character_modifier = raid_capture_improvement_modifier_1
	}
	if = {
		limit = { has_character_modifier = raid_capture_improvement_modifier_2 }
		remove_character_modifier = raid_capture_improvement_modifier_2
	}
	if = {
		limit = { has_character_modifier = raid_capture_improvement_modifier_3 }
		remove_character_modifier = raid_capture_improvement_modifier_3
	}
	if = {
		limit = { has_character_modifier = raid_capture_improvement_modifier_4 }
		remove_character_modifier = raid_capture_improvement_modifier_4
	}
	if = {
		limit = { has_character_modifier = raid_capture_improvement_modifier_5 }
		remove_character_modifier = raid_capture_improvement_modifier_5
	}
	if = {
		limit = { has_character_modifier = raid_capture_improvement_modifier_6 }
		remove_character_modifier = raid_capture_improvement_modifier_6
	}
	if = {
		limit = { has_character_modifier = raid_capture_improvement_modifier_7 }
		remove_character_modifier = raid_capture_improvement_modifier_7
	}
	if = {
		limit = { has_character_modifier = raid_capture_improvement_modifier_8 }
		remove_character_modifier = raid_capture_improvement_modifier_8
	}
	if = {
		limit = { has_character_modifier = raid_capture_improvement_modifier_9 }
		remove_character_modifier = raid_capture_improvement_modifier_9
	}
	if = {
		limit = { has_character_modifier = raid_capture_improvement_modifier_10 }
		remove_character_modifier = raid_capture_improvement_modifier_10
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 1 }
		add_character_modifier = { 
			modifier = raid_capture_improvement_modifier_1
			years = raid_capture_improvement_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 2 }
		add_character_modifier = { 
			modifier = raid_capture_improvement_modifier_2
			years = raid_capture_improvement_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 3 }
		add_character_modifier = { 
			modifier = raid_capture_improvement_modifier_3
			years = raid_capture_improvement_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 4 }
		add_character_modifier = { 
			modifier = raid_capture_improvement_modifier_4
			years = raid_capture_improvement_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 5 }
		add_character_modifier = { 
			modifier = raid_capture_improvement_modifier_5
			years = raid_capture_improvement_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 6 }
		add_character_modifier = { 
			modifier = raid_capture_improvement_modifier_6
			years = raid_capture_improvement_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 7 }
		add_character_modifier = { 
			modifier = raid_capture_improvement_modifier_7
			years = raid_capture_improvement_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 8 }
		add_character_modifier = { 
			modifier = raid_capture_improvement_modifier_8
			years = raid_capture_improvement_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value = 9 }
		add_character_modifier = { 
			modifier = raid_capture_improvement_modifier_9
			years = raid_capture_improvement_modifier_duration_value
		}
	}
	if = {
		limit = { scope:spell_effect.spell_tag_scalar_value >= 10 }
		add_character_modifier = { 
			modifier = raid_capture_improvement_modifier_10
			years = raid_capture_improvement_modifier_duration_value
		}
	}
 }
 spell_effect_232 = {	# add_artifact_modifier_magic_health_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_health_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_233 = {	# add_artifact_modifier_magic_health_resistance_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_health_resistance_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_234 = {	# add_artifact_modifier_magic_health_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_health_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_235 = {	# add_artifact_modifier_magic_health_loss_minor_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_health_loss_minor_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_236 = {	# add_artifact_modifier_magic_stress_negative_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_stress_negative_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_237 = {	# add_artifact_modifier_magic_stress_positive_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_stress_positive_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_238 = {	# add_artifact_modifier_magic_stress_gain_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_stress_gain_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_239 = {	# add_artifact_modifier_magic_stress_loss_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_stress_loss_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_240 = {	# add_artifact_modifier_magic_virility_opinion_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_virility_opinion_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_241 = {	# add_artifact_modifier_magic_viagra_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_viagra_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_242 = {	# add_artifact_modifier_magic_general_boost_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_general_boost_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_243 = {	# add_artifact_modifier_magic_diplomacy_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_diplomacy_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_244 = {	# add_artifact_modifier_magic_diplomacy_resistance_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_diplomacy_resistance_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_245 = {	# add_artifact_modifier_magic_diplomacy_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_diplomacy_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_246 = {	# add_artifact_modifier_magic_diplomacy_gain_per_piety_level_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_diplomacy_gain_per_piety_level_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_247 = {	# add_artifact_modifier_magic_martial_animal_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_martial_animal_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_248 = {	# add_artifact_modifier_magic_martial_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_martial_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_249 = {	# add_artifact_modifier_magic_martial_resistance_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_martial_resistance_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_250 = {	# add_artifact_modifier_magic_martial_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_martial_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_251 = {	# add_artifact_modifier_magic_martial_gain_per_piety_level_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_martial_gain_per_piety_level_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_252 = {	# add_artifact_modifier_magic_stewardship_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_stewardship_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_253 = {	# add_artifact_modifier_magic_stewardship_resistance_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_stewardship_resistance_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_254 = {	# add_artifact_modifier_magic_stewardship_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_stewardship_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_255 = {	# add_artifact_modifier_magic_stewardship_gain_per_piety_level_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_stewardship_gain_per_piety_level_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_256 = {	# add_artifact_modifier_magic_intrigue_animal_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_intrigue_animal_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_257 = {	# add_artifact_modifier_magic_intrigue_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_intrigue_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_258 = {	# add_artifact_modifier_magic_intrigue_resistance_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_intrigue_resistance_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_259 = {	# add_artifact_modifier_magic_intrigue_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_intrigue_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_260 = {	# add_artifact_modifier_magic_intrigue_gain_per_piety_level_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_intrigue_gain_per_piety_level_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_261 = {	# add_artifact_modifier_magic_learning_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_learning_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_262 = {	# add_artifact_modifier_magic_learning_resistance_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_learning_resistance_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_263 = {	# add_artifact_modifier_magic_learning_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_learning_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_264 = {	# add_artifact_modifier_magic_learning_gain_per_piety_level_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_learning_gain_per_piety_level_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_265 = {	# add_artifact_modifier_magic_prowess_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_prowess_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_266 = {	# add_artifact_modifier_magic_prowess_resistance_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_prowess_resistance_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_267 = {	# add_artifact_modifier_magic_prowess_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_prowess_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_268 = {	# add_artifact_modifier_magic_prowess_gain_per_piety_level_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_prowess_gain_per_piety_level_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_269 = {	# add_artifact_modifier_magic_attraction_opinion_physical_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_attraction_opinion_physical_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_270 = {	# add_artifact_modifier_magic_attraction_opinion_social_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_attraction_opinion_social_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_271 = {	# add_artifact_modifier_magic_close_relative_opinion_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_close_relative_opinion_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_272 = {	# add_artifact_modifier_magic_child_opinion_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_child_opinion_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_273 = {	# add_artifact_modifier_magic_spouse_opinion_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_spouse_opinion_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_274 = {	# add_artifact_modifier_magic_house_opinion_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_house_opinion_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_275 = {	# add_artifact_modifier_magic_dynasty_opinion_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_dynasty_opinion_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_276 = {	# add_artifact_modifier_magic_general_opinion_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_general_opinion_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_277 = {	# add_artifact_modifier_magic_realm_opinion_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_realm_opinion_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_278 = {	# add_artifact_modifier_magic_internal_strife_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_internal_strife_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_279 = {	# add_artifact_modifier_magic_external_condemnation_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_external_condemnation_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_280 = {	# add_artifact_modifier_diplomacy_magic_modifier_seduction_positive_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = diplomacy_magic_modifier_seduction_positive_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_281 = {	# add_artifact_modifier_diplomacy_magic_modifier_seduction_negative_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = diplomacy_magic_modifier_seduction_negative_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_282 = {	# add_artifact_modifier_diplomacy_magic_modifier_vassal_opinion_positive_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = diplomacy_magic_modifier_vassal_opinion_positive_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_283 = {	# add_artifact_modifier_religious_fanaticism_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = religious_fanaticism_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_284 = {	# add_artifact_modifier_melodious_voice_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = melodious_voice_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_285 = {	# add_artifact_modifier_glassinger_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = glassinger_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_286 = {	# add_artifact_modifier_character_county_opinion_negative_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = character_county_opinion_negative_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_287 = {	# add_artifact_modifier_short_reign_duration_mult_positive_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = short_reign_duration_mult_positive_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_288 = {	# add_artifact_modifier_court_grandeur_baseline_add_positive_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = court_grandeur_baseline_add_positive_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_289 = {	# add_artifact_modifier_magic_character_travel_safety_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_character_travel_safety_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_290 = {	# add_artifact_modifier_magic_character_travel_safety_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_character_travel_safety_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_291 = {	# add_artifact_modifier_magic_character_travel_speed_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_character_travel_speed_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_292 = {	# add_artifact_modifier_travel_advantage_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = travel_advantage_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_293 = {	# add_artifact_modifier_travel_disadvantage_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = travel_disadvantage_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_294 = {	# add_artifact_modifier_pane_of_passage_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = pane_of_passage_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_295 = {	# add_artifact_modifier_magic_murder_scheme_power_add_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_murder_scheme_power_add_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_296 = {	# add_artifact_modifier_magic_seduce_scheme_power_add_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_seduce_scheme_power_add_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_297 = {	# add_artifact_modifier_magic_hostile_scheme_discovery_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_hostile_scheme_discovery_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_298 = {	# add_artifact_modifier_magic_vengeance_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_vengeance_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_299 = {	# add_artifact_modifier_haunting_power_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = haunting_power_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_300 = {	# add_artifact_modifier_magic_trait_synergy_brave_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_brave_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_301 = {	# add_artifact_modifier_magic_trait_synergy_craven_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_craven_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_302 = {	# add_artifact_modifier_magic_trait_synergy_calm_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_calm_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_303 = {	# add_artifact_modifier_magic_trait_synergy_wrathful_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_wrathful_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_304 = {	# add_artifact_modifier_magic_trait_synergy_chaste_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_chaste_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_305 = {	# add_artifact_modifier_magic_trait_synergy_lustful_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_lustful_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_306 = {	# add_artifact_modifier_magic_trait_synergy_content_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_content_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_307 = {	# add_artifact_modifier_magic_trait_synergy_ambitious_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_ambitious_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_308 = {	# add_artifact_modifier_magic_trait_synergy_diligent_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_diligent_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_309 = {	# add_artifact_modifier_magic_trait_synergy_lazy_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_lazy_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_310 = {	# add_artifact_modifier_magic_trait_synergy_fickle_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_fickle_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_311 = {	# add_artifact_modifier_magic_trait_synergy_stubborn_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_stubborn_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_312 = {	# add_artifact_modifier_magic_trait_synergy_forgiving_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_forgiving_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_313 = {	# add_artifact_modifier_magic_trait_synergy_vengeful_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_vengeful_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_314 = {	# add_artifact_modifier_magic_trait_synergy_generous_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_generous_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_315 = {	# add_artifact_modifier_magic_trait_synergy_greedy_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_greedy_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_316 = {	# add_artifact_modifier_magic_trait_synergy_gregarious_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_gregarious_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_317 = {	# add_artifact_modifier_magic_trait_synergy_shy_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_shy_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_318 = {	# add_artifact_modifier_magic_trait_synergy_honest_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_honest_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_319 = {	# add_artifact_modifier_magic_trait_synergy_deceitful_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_deceitful_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_320 = {	# add_artifact_modifier_magic_trait_synergy_humble_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_humble_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_321 = {	# add_artifact_modifier_magic_trait_synergy_arrogant_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_arrogant_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_322 = {	# add_artifact_modifier_magic_trait_synergy_just_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_just_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_323 = {	# add_artifact_modifier_magic_trait_synergy_arbitrary_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_arbitrary_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_324 = {	# add_artifact_modifier_magic_trait_synergy_patient_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_patient_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_325 = {	# add_artifact_modifier_magic_trait_synergy_impatient_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_impatient_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_326 = {	# add_artifact_modifier_magic_trait_synergy_temperate_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_temperate_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_327 = {	# add_artifact_modifier_magic_trait_synergy_gluttonous_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_gluttonous_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_328 = {	# add_artifact_modifier_magic_trait_synergy_trusting_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_trusting_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_329 = {	# add_artifact_modifier_magic_trait_synergy_paranoid_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_paranoid_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_330 = {	# add_artifact_modifier_magic_trait_synergy_zealous_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_zealous_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_331 = {	# add_artifact_modifier_magic_trait_synergy_cynical_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_cynical_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_332 = {	# add_artifact_modifier_magic_trait_synergy_compassionate_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_compassionate_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_333 = {	# add_artifact_modifier_magic_trait_synergy_callous_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_callous_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_334 = {	# add_artifact_modifier_magic_trait_synergy_sadistic_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_sadistic_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_335 = {	# add_artifact_modifier_magic_trait_synergy_eccentric_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_trait_synergy_eccentric_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_336 = {	# add_artifact_modifier_magic_battle_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_battle_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_337 = {	# add_artifact_modifier_magic_enhanced_fatality_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_enhanced_fatality_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_338 = {	# add_artifact_modifier_magic_hard_casualty_modifier_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_hard_casualty_modifier_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_339 = {	# add_artifact_modifier_magic_hard_casualty_modifier_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_hard_casualty_modifier_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_340 = {	# add_artifact_modifier_dry_terrain_advantage_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = dry_terrain_advantage_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_341 = {	# add_artifact_modifier_forest_terrain_advantage_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = forest_terrain_advantage_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_342 = {	# add_artifact_modifier_water_magic_advantage_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = water_magic_advantage_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_343 = {	# add_artifact_modifier_water_magic_disadvantage_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = water_magic_disadvantage_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_344 = {	# add_artifact_modifier_sailing_magic_advantage_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = sailing_magic_advantage_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_345 = {	# add_artifact_modifier_sailing_magic_disadvantage_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = sailing_magic_disadvantage_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_346 = {	# add_artifact_modifier_slow_army_movement_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = slow_army_movement_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_347 = {	# add_artifact_modifier_movement_speed_positive_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = movement_speed_positive_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_348 = {	# add_artifact_modifier_hasten_raid_speed_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = hasten_raid_speed_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_349 = {	# add_artifact_modifier_rocky_terrain_advantage_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = rocky_terrain_advantage_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_350 = {	# add_artifact_modifier_negate_enemy_advantage_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = negate_enemy_advantage_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_351 = {	# add_artifact_modifier_knight_effectiveness_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = knight_effectiveness_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_352 = {	# add_artifact_modifier_army_damage_magic_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = army_damage_magic_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_353 = {	# add_artifact_modifier_army_damage_negative_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = army_damage_negative_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_354 = {	# add_artifact_modifier_army_toughness_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = army_toughness_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_355 = {	# add_artifact_modifier_magi_siege_value_add_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magi_siege_value_add_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_356 = {	# add_artifact_modifier_siege_weapon_siege_value_add_magic_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = siege_weapon_siege_value_add_magic_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_357 = {	# add_artifact_modifier_abstruse_survivability_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = abstruse_survivability_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_358 = {	# add_artifact_modifier_men_at_arms_recruitment_cost_positive_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = men_at_arms_recruitment_cost_positive_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_359 = {	# add_artifact_modifier_siege_phase_time_positive_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = siege_phase_time_positive_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_360 = {	# add_artifact_modifier_attacker_advantage_positive_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = attacker_advantage_positive_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_361 = {	# add_artifact_modifier_magic_monthly_dynasty_prestige_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_dynasty_prestige_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_362 = {	# add_artifact_modifier_magic_monthly_dynasty_prestige_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_dynasty_prestige_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_363 = {	# add_artifact_modifier_magic_monthly_income_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_income_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_364 = {	# add_artifact_modifier_magic_monthly_income_gain_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_income_gain_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_365 = {	# add_artifact_modifier_magic_monthly_income_loss_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_income_loss_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_366 = {	# add_artifact_modifier_magic_monthly_piety_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_piety_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_367 = {	# add_artifact_modifier_magic_monthly_piety_gain_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_piety_gain_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_368 = {	# add_artifact_modifier_magic_monthly_piety_loss_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_piety_loss_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_369 = {	# add_artifact_modifier_magic_monthly_prestige_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_prestige_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_370 = {	# add_artifact_modifier_magic_monthly_prestige_gain_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_prestige_gain_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_371 = {	# add_artifact_modifier_magic_monthly_prestige_loss_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_prestige_loss_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_372 = {	# add_artifact_modifier_magic_omen_diplomacy_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_omen_diplomacy_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_373 = {	# add_artifact_modifier_magic_omen_intrigue_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_omen_intrigue_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_374 = {	# add_artifact_modifier_magic_omen_martial_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_omen_martial_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_375 = {	# add_artifact_modifier_magic_omen_stewardship_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_omen_stewardship_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_376 = {	# add_artifact_modifier_magic_omen_learning_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_omen_learning_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_377 = {	# add_artifact_modifier_magic_genetics_positive_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_genetics_positive_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_378 = {	# add_artifact_modifier_magic_magi_siege_value_add_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_magi_siege_value_add_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_379 = {	# add_artifact_modifier_magic_character_monthly_county_control_growth_add_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_character_monthly_county_control_growth_add_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_380 = {	# add_artifact_modifier_magic_character_capital_county_monthly_development_growth_add_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_character_capital_county_monthly_development_growth_add_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_381 = {	# add_artifact_modifier_magic_character_build_speed_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_character_build_speed_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_382 = {	# add_artifact_modifier_magic_tyranny_gain_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_tyranny_gain_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_383 = {	# add_artifact_modifier_magic_tyranny_loss_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_tyranny_loss_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_384 = {	# add_artifact_modifier_magic_monthly_tyranny_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_tyranny_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_385 = {	# add_artifact_modifier_magic_monthly_tyranny_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_tyranny_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_386 = {	# add_artifact_modifier_magic_cultural_head_fascination_add_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_cultural_head_fascination_add_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_387 = {	# add_artifact_modifier_magic_cultural_head_fascination_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_cultural_head_fascination_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_388 = {	# add_artifact_modifier_magic_unnatural_shaping_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_unnatural_shaping_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_389 = {	# add_artifact_modifier_magic_boneshaping_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_boneshaping_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_390 = {	# add_artifact_modifier_magic_defiled_nadir_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_defiled_nadir_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_391 = {	# add_artifact_modifier_magic_frozen_experience_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_frozen_experience_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_392 = {	# add_artifact_modifier_magic_arcane_incapacitation_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_arcane_incapacitation_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_393 = {	# add_artifact_modifier_magic_mind_fog_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_mind_fog_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_394 = {	# add_artifact_modifier_magic_life_extension_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_life_extension_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_395 = {	# add_artifact_modifier_magic_arcane_degeneration_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_arcane_degeneration_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_396 = {	# add_artifact_modifier_magic_bodily_modification_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_bodily_modification_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_397 = {	# add_artifact_modifier_magic_levy_reinforcement_rate_gain_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_levy_reinforcement_rate_gain_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_398 = {	# add_artifact_modifier_magic_enemy_hostile_scheme_phase_duration_add_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_enemy_hostile_scheme_phase_duration_add_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_399 = {	# add_artifact_modifier_magic_enemy_hostile_scheme_phase_duration_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_enemy_hostile_scheme_phase_duration_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_400 = {	# add_artifact_modifier_magic_scheme_discovery_chance_mult_loss_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_scheme_discovery_chance_mult_loss_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_401 = {	# add_artifact_modifier_magic_monthly_prestige_gain_per_dread_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_prestige_gain_per_dread_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_402 = {	# add_artifact_modifier_magic_monthly_dread_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_dread_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_403 = {	# add_artifact_modifier_magic_monthly_lifestyle_xp_gain_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_monthly_lifestyle_xp_gain_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_404 = {	# add_artifact_modifier_magic_intrigue_lifestyle_xp_gain_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_intrigue_lifestyle_xp_gain_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_405 = {	# add_artifact_modifier_magic_stewardship_lifestyle_xp_gain_mult_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_stewardship_lifestyle_xp_gain_mult_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_406 = {	# add_artifact_modifier_magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_407 = {	# add_artifact_modifier_magic_martial_lifestyle_xp_gain_mult_negative_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_martial_lifestyle_xp_gain_mult_negative_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_408 = {	# add_artifact_modifier_magic_stewardship_lifestyle_xp_gain_mult_negative_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_stewardship_lifestyle_xp_gain_mult_negative_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_409 = {	# add_artifact_modifier_magic_intrigue_lifestyle_xp_gain_mult_negative_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_intrigue_lifestyle_xp_gain_mult_negative_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_410 = {	# add_artifact_modifier_magic_learning_lifestyle_xp_gain_mult_negative_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_learning_lifestyle_xp_gain_mult_negative_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_411 = {	# add_artifact_modifier_magic_arcana_lifestyle_xp_gain_mult_negative_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = magic_arcana_lifestyle_xp_gain_mult_negative_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_412 = {	# add_artifact_modifier_shard_exhaustion_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = shard_exhaustion_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_413 = {	# add_artifact_modifier_communication_shards_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = communication_shards_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_414 = {	# add_artifact_modifier_title_creation_cost_mult_positive_modifier_artifact
	upgrade_stacking_modifier_by_level_artifact_effect = { MODIFIER = title_creation_cost_mult_positive_modifier_artifact TYPE = artifact LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_415 = {	# add_character_modifier_magic_archer_cavalry_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_archer_cavalry_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_archer_cavalry_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_archer_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_archer_cavalry_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_archer_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_archer_cavalry_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_416 = {	# add_character_modifier_magic_archers_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_archers_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_archers_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_archers_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_archers_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_archers_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_archers_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_417 = {	# add_character_modifier_magic_camel_cavalry_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_camel_cavalry_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_camel_cavalry_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_camel_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_camel_cavalry_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_camel_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_camel_cavalry_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_418 = {	# add_character_modifier_magic_elephant_cavalry_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_elephant_cavalry_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_elephant_cavalry_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_elephant_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_elephant_cavalry_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_elephant_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_elephant_cavalry_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_419 = {	# add_character_modifier_magic_heavy_cavalry_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_heavy_cavalry_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_heavy_cavalry_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_heavy_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_heavy_cavalry_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_heavy_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_heavy_cavalry_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_420 = {	# add_character_modifier_magic_light_cavalry_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_light_cavalry_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_light_cavalry_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_light_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_light_cavalry_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_light_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_light_cavalry_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_421 = {	# add_character_modifier_magic_heavy_infantry_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_heavy_infantry_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_heavy_infantry_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_heavy_infantry_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_heavy_infantry_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_heavy_infantry_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_heavy_infantry_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_422 = {	# add_character_modifier_magic_pikemen_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_pikemen_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_pikemen_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_pikemen_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_pikemen_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_pikemen_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_pikemen_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_423 = {	# add_character_modifier_magic_skirmishers_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_skirmishers_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_skirmishers_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_skirmishers_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_skirmishers_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_skirmishers_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_skirmishers_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_424 = {	# add_character_modifier_magic_siege_weapon_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_siege_weapon_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_siege_weapon_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_siege_weapon_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_siege_weapon_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_siege_weapon_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_siege_weapon_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_425 = {	# add_character_modifier_magic_flying_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_flying_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_flying_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_flying_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_flying_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_flying_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_flying_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_426 = {	# add_character_modifier_magic_magi_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magi_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magi_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magi_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magi_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magi_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magi_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_427 = {	# add_character_modifier_magic_adventurers_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_adventurers_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_adventurers_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_adventurers_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_adventurers_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_adventurers_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_adventurers_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_428 = {	# add_character_modifier_magic_chariot_cavalry_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_chariot_cavalry_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_chariot_cavalry_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_chariot_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_chariot_cavalry_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_chariot_cavalry_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_chariot_cavalry_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_429 = {	# add_character_modifier_magic_monsters_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_monsters_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monsters_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monsters_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_monsters_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_monsters_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_monsters_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_430 = {	# add_character_modifier_magic_undead_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_undead_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_undead_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_undead_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_undead_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_undead_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_undead_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_431 = {	# add_character_modifier_magic_constructs_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_constructs_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_constructs_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_constructs_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_constructs_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_constructs_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_constructs_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_432 = {	# add_character_modifier_magic_magical_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_433 = {	# add_character_modifier_magic_magical_ethereal_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_ethereal_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_ethereal_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_ethereal_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_ethereal_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_ethereal_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_ethereal_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_434 = {	# add_character_modifier_magic_magical_nature_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_nature_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_nature_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_nature_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_nature_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_nature_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_nature_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_435 = {	# add_character_modifier_magic_magical_water_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_water_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_water_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_water_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_water_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_water_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_water_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_436 = {	# add_character_modifier_magic_magical_air_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_air_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_air_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_air_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_air_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_air_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_air_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_437 = {	# add_character_modifier_magic_magical_stone_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_stone_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_stone_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_stone_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_stone_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_stone_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_stone_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_438 = {	# add_character_modifier_magic_magical_fire_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_fire_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_fire_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_fire_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_fire_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_fire_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_fire_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_439 = {	# add_character_modifier_magic_magical_ice_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_ice_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_ice_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_ice_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_ice_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_ice_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_ice_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_440 = {	# add_character_modifier_magic_magical_metal_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_metal_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_metal_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_metal_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_metal_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_metal_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_metal_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_441 = {	# add_character_modifier_magic_magical_sand_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_sand_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_sand_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_sand_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_sand_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_sand_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_sand_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_442 = {	# add_character_modifier_magic_magical_light_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_light_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_light_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_light_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_light_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_light_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_light_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_443 = {	# add_character_modifier_magic_magical_blood_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_blood_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_blood_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_blood_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_blood_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_blood_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_blood_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_444 = {	# add_character_modifier_magic_magical_death_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_death_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_death_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_death_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_death_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_death_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_death_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_445 = {	# add_character_modifier_magic_magical_dark_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_dark_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_dark_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_dark_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_dark_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_dark_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_dark_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_446 = {	# add_character_modifier_magic_magical_celestial_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_celestial_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_celestial_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_celestial_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_celestial_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_celestial_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_celestial_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_447 = {	# add_character_modifier_magic_magical_dream_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_dream_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_dream_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_dream_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_dream_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_dream_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_dream_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_448 = {	# add_character_modifier_magic_magical_time_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_time_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_time_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_time_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_time_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_time_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_time_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_449 = {	# add_character_modifier_magic_magical_hymns_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_hymns_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_hymns_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_hymns_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_hymns_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_hymns_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_hymns_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_450 = {	# add_character_modifier_magic_magical_dawn_improvement_add_modifier
	if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:upgrade
		}
		upgrade_stacking_modifier_by_level_effect = { MODIFIER = magic_magical_dawn_improvement_add_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_dawn_improvement_add_modifier_duration_value  }
	}
	else_if = {
		limit = {
			scope:spell_effect.var:stacking_mode ?= flag:random
		}
		# GH URGENT: Encapsulate this behavior into a proper SE
		save_scope_value_as = {
			name = modifier_stack_amount_value
			value = {
				integer_range = {
					min = 1
					max = scope:spell_effect.spell_tag_scalar_threshold_diff_value
				}
			}
		}
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_dawn_improvement_add_modifier   TYPE = character LEVEL = scope:modifier_stack_amount_value YEARS = magic_magical_dawn_improvement_add_modifier_duration_value }
	}
	else = {
		set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_magical_dawn_improvement_add_modifier   TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = magic_magical_dawn_improvement_add_modifier_duration_value }
	}
 }
 spell_effect_451 = {	# add_trait_magic_good
	change_trait_rank = { 
		trait = magic_good
		rank = 1
	}

 }
 spell_effect_452 = {	# remove_trait_magic_good
	change_trait_rank = { 
		trait = magic_good
		rank = -1
	}

 }
 spell_effect_453 = {	# add_trait_wounded
	increase_wounds_no_death_effect = { REASON = wounds }
 }
 spell_effect_454 = {	# remove_trait_wounded
	change_trait_rank = { 
		trait = wounded
		rank = -1
	}

 }
 spell_effect_455 = {	# add_trait_disfigured
	add_trait_force_tooltip = disfigured
 }
 spell_effect_456 = {	# remove_trait_disfigured
	remove_trait = disfigured
 }
 spell_effect_457 = {	# add_trait_ill
	add_trait_force_tooltip = ill
 }
 spell_effect_458 = {	# remove_trait_ill
	remove_trait = ill
 }
 spell_effect_459 = {	# add_trait_pneumonic
	add_trait_force_tooltip = pneumonic
 }
 spell_effect_460 = {	# remove_trait_pneumonic
	remove_trait = pneumonic
 }
 spell_effect_461 = {	# add_trait_great_pox
	contract_disease_effect = { DISEASE = great_pox TREATMENT_EVENT = yes }
 }
 spell_effect_462 = {	# remove_trait_great_pox
	recover_from_disease_effect = { DISEASE = great_pox }
	remove_disease_treatment_effect = yes

 }
 spell_effect_463 = {	# add_trait_early_great_pox
	contract_disease_effect = { DISEASE = great_pox TREATMENT_EVENT = yes }
 }
 spell_effect_464 = {	# remove_trait_early_great_pox
	recover_from_disease_effect = { DISEASE = great_pox }
	remove_disease_treatment_effect = yes

 }
 spell_effect_465 = {	# add_trait_lovers_pox
	contract_disease_effect = { DISEASE = lovers_pox TREATMENT_EVENT = yes }
 }
 spell_effect_466 = {	# remove_trait_lovers_pox
	recover_from_disease_effect = { DISEASE = lovers_pox }
	remove_disease_treatment_effect = yes

 }
 spell_effect_467 = {	# add_trait_leper
	contract_disease_effect = { DISEASE = leper TREATMENT_EVENT = yes }
 }
 spell_effect_468 = {	# remove_trait_leper
	recover_from_disease_effect = { DISEASE = leper }
	remove_disease_treatment_effect = yes

 }
 spell_effect_469 = {	# add_trait_cancer
	contract_disease_effect = { DISEASE = cancer TREATMENT_EVENT = yes }
 }
 spell_effect_470 = {	# remove_trait_cancer
	recover_from_disease_effect = { DISEASE = cancer }
	remove_disease_treatment_effect = yes

 }
 spell_effect_471 = {	# add_trait_typhus
	contract_disease_effect = { DISEASE = typhus TREATMENT_EVENT = yes }
 }
 spell_effect_472 = {	# remove_trait_typhus
	recover_from_disease_effect = { DISEASE = typhus }
	remove_disease_treatment_effect = yes

 }
 spell_effect_473 = {	# add_trait_smallpox
	contract_disease_effect = { DISEASE = smallpox TREATMENT_EVENT = yes }
 }
 spell_effect_474 = {	# remove_trait_smallpox
	recover_from_disease_effect = { DISEASE = smallpox }
	remove_disease_treatment_effect = yes

 }
 spell_effect_475 = {	# add_trait_measles
	contract_disease_effect = { DISEASE = measles TREATMENT_EVENT = yes }
 }
 spell_effect_476 = {	# remove_trait_measles
	recover_from_disease_effect = { DISEASE = measles }
	remove_disease_treatment_effect = yes

 }
 spell_effect_477 = {	# add_trait_dysentery
	contract_disease_effect = { DISEASE = dysentery TREATMENT_EVENT = yes }
 }
 spell_effect_478 = {	# remove_trait_dysentery
	recover_from_disease_effect = { DISEASE = dysentery }
	remove_disease_treatment_effect = yes

 }
 spell_effect_479 = {	# add_trait_bubonic_plague
	contract_disease_effect = { DISEASE = bubonic_plague TREATMENT_EVENT = yes }
 }
 spell_effect_480 = {	# remove_trait_bubonic_plague
	recover_from_disease_effect = { DISEASE = bubonic_plague }
	remove_disease_treatment_effect = yes

 }
 spell_effect_481 = {	# add_trait_incapable
	add_trait_force_tooltip = incapable
 }
 spell_effect_482 = {	# remove_trait_incapable
	remove_trait = incapable
 }
 spell_effect_483 = {	# add_trait_infirm
	add_trait_force_tooltip = infirm
 }
 spell_effect_484 = {	# remove_trait_infirm
	remove_trait = infirm
 }
 spell_effect_485 = {	# add_trait_lunatic_1
	add_trait_force_tooltip = lunatic_1
 }
 spell_effect_486 = {	# remove_trait_lunatic_1
	remove_trait = lunatic_1
 }
 spell_effect_487 = {	# add_trait_depressed_1
	add_trait_force_tooltip = depressed_1
 }
 spell_effect_488 = {	# remove_trait_depressed_1
	remove_trait = depressed_1
 }
 spell_effect_489 = {	# add_trait_depressed_genetic
	add_trait_force_tooltip = depressed_genetic
 }
 spell_effect_490 = {	# remove_trait_depressed_genetic
	remove_trait = depressed_genetic
 }
 spell_effect_491 = {	# add_trait_blind
	add_trait_force_tooltip = blind
 }
 spell_effect_492 = {	# remove_trait_blind
	remove_trait = blind
 }
 spell_effect_493 = {	# add_trait_drunkard
	add_trait_force_tooltip = drunkard
 }
 spell_effect_494 = {	# remove_trait_drunkard
	remove_trait = drunkard
 }
 spell_effect_495 = {	# add_trait_gluttonous
	add_trait_force_tooltip = gluttonous
 }
 spell_effect_496 = {	# remove_trait_gluttonous
	remove_trait = gluttonous
 }
 spell_effect_497 = {	# add_trait_lustful
	add_trait_force_tooltip = lustful
 }
 spell_effect_498 = {	# remove_trait_lustful
	remove_trait = lustful
 }
 spell_effect_499 = {	# add_trait_gregarious
	add_trait_force_tooltip = gregarious
 }
 spell_effect_500 = {	# remove_trait_gregarious
	remove_trait = gregarious
 }
 spell_effect_501 = {	# add_trait_hashishiyah
	add_trait_force_tooltip = hashishiyah
 }
 spell_effect_502 = {	# remove_trait_hashishiyah
	remove_trait = hashishiyah
 }
 spell_effect_503 = {	# add_trait_gh_elementalist
	add_trait_force_tooltip = gh_elementalist
 }
 spell_effect_504 = {	# remove_trait_gh_elementalist
	remove_trait = gh_elementalist
 }
 spell_effect_505 = {	# add_trait_lifestyle_physician
	add_trait_force_tooltip = lifestyle_physician
 }
 spell_effect_506 = {	# remove_trait_lifestyle_physician
	remove_trait = lifestyle_physician
 }
 spell_effect_507 = {	# add_trait_possessed_1
	add_trait_force_tooltip = possessed_1
 }
 spell_effect_508 = {	# remove_trait_possessed_1
	remove_trait = possessed_1
 }
 spell_effect_509 = {	# add_trait_gh_riftmark
	change_trait_rank = { 
		trait = gh_riftmark
		rank = 1
	}

 }
 spell_effect_510 = {	# remove_trait_gh_riftmark
	change_trait_rank = { 
		trait = wounded
		rank = -1
	}

 }
 spell_effect_511 = {	# add_trait_xp_scarred
	
	if = {
		limit = { NOT = { has_trait = scarred } }
		add_trait = scarred
	}
	add_trait_xp = {
		trait = scarred
		value = {
			value = scarred_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_512 = {	# add_trait_xp_lifestyle_physician
	
	if = {
		limit = { NOT = { has_trait = lifestyle_physician } }
		add_trait = lifestyle_physician
	}
	add_trait_xp = {
		trait = lifestyle_physician
		value = {
			value = lifestyle_physician_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_513 = {	# add_trait_xp_lifestyle_reveler
	
	if = {
		limit = { NOT = { has_trait = lifestyle_reveler } }
		add_trait = lifestyle_reveler
	}
	add_trait_xp = {
		trait = lifestyle_reveler
		value = {
			value = lifestyle_reveler_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_514 = {	# add_trait_xp_gh_elementalist_magical_fire
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_fire
		value = {
			value = gh_elementalist_magical_fire_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_515 = {	# add_trait_xp_gh_elementalist_magical_water
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_water
		value = {
			value = gh_elementalist_magical_water_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_516 = {	# add_trait_xp_gh_elementalist_magical_air
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_air
		value = {
			value = gh_elementalist_magical_air_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_517 = {	# add_trait_xp_gh_elementalist_magical_stone
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_stone
		value = {
			value = gh_elementalist_magical_stone_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_518 = {	# add_trait_xp_gh_elementalist_magical_dream
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_dream
		value = {
			value = gh_elementalist_magical_dream_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_519 = {	# add_trait_xp_gh_elementalist_magical_dark
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_dark
		value = {
			value = gh_elementalist_magical_dark_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_520 = {	# add_trait_xp_gh_elementalist_magical_ice
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_ice
		value = {
			value = gh_elementalist_magical_ice_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_521 = {	# add_trait_xp_gh_elementalist_magical_death
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_death
		value = {
			value = gh_elementalist_magical_death_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_522 = {	# add_trait_xp_gh_elementalist_magical_blood
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_blood
		value = {
			value = gh_elementalist_magical_blood_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_523 = {	# add_trait_xp_gh_elementalist_magical_sand
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_sand
		value = {
			value = gh_elementalist_magical_sand_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_524 = {	# add_trait_xp_gh_elementalist_magical_metal
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_metal
		value = {
			value = gh_elementalist_magical_metal_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_525 = {	# add_trait_xp_gh_elementalist_magical_ethereal
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_ethereal
		value = {
			value = gh_elementalist_magical_ethereal_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_526 = {	# add_trait_xp_gh_elementalist_magical_celestial
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_celestial
		value = {
			value = gh_elementalist_magical_celestial_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_527 = {	# add_trait_xp_gh_elementalist_magical_nature
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_nature
		value = {
			value = gh_elementalist_magical_nature_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_528 = {	# add_trait_xp_gh_elementalist_magical_dawn
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_dawn
		value = {
			value = gh_elementalist_magical_dawn_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_529 = {	# add_trait_xp_gh_elementalist_magical_hymns
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_hymns
		value = {
			value = gh_elementalist_magical_hymns_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_530 = {	# add_trait_xp_gh_elementalist_magical_time
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_time
		value = {
			value = gh_elementalist_magical_time_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_531 = {	# add_trait_xp_gh_elementalist_magical_light
	add_trait_xp = {
		trait = gh_elementalist
		track = magical_light
		value = {
			value = gh_elementalist_magical_light_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_532 = {	# add_trait_xp_gh_ritual_tattoos
	
	if = {
		limit = { NOT = { has_trait = gh_ritual_tattoos } }
		add_trait = gh_ritual_tattoos
	}
	add_trait_xp = {
		trait = gh_ritual_tattoos
		value = {
			value = gh_ritual_tattoos_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_533 = {	# add_trait_xp_lifestyle_mystic
	
	if = {
		limit = { NOT = { has_trait = lifestyle_mystic } }
		add_trait = lifestyle_mystic
	}
	add_trait_xp = {
		trait = lifestyle_mystic
		value = {
			value = lifestyle_mystic_xp_change_value
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}
 }
 spell_effect_534 = {	# spawn_army_horse_archers
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = horse_archers_summoned_troops MAA = horse_archers SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_535 = {	# spawn_army_cloud_riders
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = cloud_riders_summoned_troops MAA = cloud_riders SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_536 = {	# spawn_army_oltenic_horse_archers
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = oltenic_horse_archers_summoned_troops MAA = oltenic_horse_archers SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_537 = {	# spawn_army_undead_horse_archers
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = undead_horse_archers_summoned_troops MAA = undead_horse_archers SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_538 = {	# spawn_army_bowmen
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = bowmen_summoned_troops MAA = bowmen SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_539 = {	# spawn_army_camel_rider
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = camel_rider_summoned_troops MAA = camel_rider SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_540 = {	# spawn_army_war_elephant
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = war_elephant_summoned_troops MAA = war_elephant SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_541 = {	# spawn_army_armored_horsemen
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = armored_horsemen_summoned_troops MAA = armored_horsemen SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_542 = {	# spawn_army_light_horsemen
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = light_horsemen_summoned_troops MAA = light_horsemen SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_543 = {	# spawn_army_armored_footmen
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = armored_footmen_summoned_troops MAA = armored_footmen SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_544 = {	# spawn_army_pikemen_unit
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = pikemen_unit_summoned_troops MAA = pikemen_unit SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_545 = {	# spawn_army_light_footmen
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = light_footmen_summoned_troops MAA = light_footmen SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_546 = {	# spawn_army_onager
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = onager_summoned_troops MAA = onager SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_547 = {	# spawn_army_griffon_riders
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = griffon_riders_summoned_troops MAA = griffon_riders SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_548 = {	# spawn_army_magi_regular
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = magi_regular_summoned_troops MAA = magi_regular SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_549 = {	# spawn_army_adventurers
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = adventurers_summoned_troops MAA = adventurers SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_550 = {	# spawn_army_war_chariots
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = war_chariots_summoned_troops MAA = war_chariots SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_551 = {	# spawn_army_fogbeasts
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = fogbeasts_summoned_troops MAA = fogbeasts SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_552 = {	# spawn_army_blade_tendrils
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = blade_tendrils_summoned_troops MAA = blade_tendrils SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_553 = {	# spawn_army_marrowdrones
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = marrowdrones_summoned_troops MAA = marrowdrones SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_554 = {	# spawn_army_hungering_mouths
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = hungering_mouths_summoned_troops MAA = hungering_mouths SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_555 = {	# spawn_army_chasm_terrors
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = chasm_terrors_summoned_troops MAA = chasm_terrors SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_556 = {	# spawn_army_enfleshed_grotesquerie
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = enfleshed_grotesquerie_summoned_troops MAA = enfleshed_grotesquerie SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_557 = {	# spawn_army_lesser_voidspawns
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = lesser_voidspawns_summoned_troops MAA = lesser_voidspawns SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_558 = {	# spawn_army_archonarachs
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = archonarachs_summoned_troops MAA = archonarachs SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_559 = {	# spawn_army_woodland_hydra
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = woodland_hydra_summoned_troops MAA = woodland_hydra SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_560 = {	# spawn_army_elite_undead
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = elite_undead_summoned_troops MAA = elite_undead SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_561 = {	# spawn_army_undead_skirmishers
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = undead_skirmishers_summoned_troops MAA = undead_skirmishers SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_562 = {	# spawn_army_undead_bowmen
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = undead_bowmen_summoned_troops MAA = undead_bowmen SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_563 = {	# spawn_army_siege_golems
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = siege_golems_summoned_troops MAA = siege_golems SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_564 = {	# spawn_army_stone_golems
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = stone_golems_summoned_troops MAA = stone_golems SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_565 = {	# spawn_army_magma_golems
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = magma_golems_summoned_troops MAA = magma_golems SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_566 = {	# spawn_army_ice_golems
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = ice_golems_summoned_troops MAA = ice_golems SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_567 = {	# spawn_army_bronze_golems
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = bronze_golems_summoned_troops MAA = bronze_golems SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_568 = {	# spawn_army_metal_golems
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = metal_golems_summoned_troops MAA = metal_golems SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_569 = {	# spawn_army_spirit_regular
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = spirit_regular_summoned_troops MAA = spirit_regular SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_570 = {	# spawn_army_ethereal_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = ethereal_elementals_summoned_troops MAA = ethereal_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_571 = {	# spawn_army_nature_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = nature_elementals_summoned_troops MAA = nature_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_572 = {	# spawn_army_vine_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = vine_elementals_summoned_troops MAA = vine_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_573 = {	# spawn_army_leshens
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = leshens_summoned_troops MAA = leshens SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_574 = {	# spawn_army_water_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = water_elementals_summoned_troops MAA = water_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_575 = {	# spawn_army_air_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = air_elementals_summoned_troops MAA = air_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_576 = {	# spawn_army_lightning_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = lightning_elementals_summoned_troops MAA = lightning_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_577 = {	# spawn_army_stone_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = stone_elementals_summoned_troops MAA = stone_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_578 = {	# spawn_army_mountain_spirit_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = mountain_spirit_elementals_summoned_troops MAA = mountain_spirit_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_579 = {	# spawn_army_fire_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = fire_elementals_summoned_troops MAA = fire_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_580 = {	# spawn_army_ice_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = ice_elementals_summoned_troops MAA = ice_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_581 = {	# spawn_army_metal_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = metal_elementals_summoned_troops MAA = metal_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_582 = {	# spawn_army_quicksilver_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = quicksilver_elementals_summoned_troops MAA = quicksilver_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_583 = {	# spawn_army_sand_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = sand_elementals_summoned_troops MAA = sand_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_584 = {	# spawn_army_desert_mirage_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = desert_mirage_elementals_summoned_troops MAA = desert_mirage_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_585 = {	# spawn_army_dune_reaper_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = dune_reaper_elementals_summoned_troops MAA = dune_reaper_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_586 = {	# spawn_army_light_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = light_elementals_summoned_troops MAA = light_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_587 = {	# spawn_army_seraph_melacham
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = seraph_melacham_summoned_troops MAA = seraph_melacham SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_588 = {	# spawn_army_blood_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = blood_elementals_summoned_troops MAA = blood_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_589 = {	# spawn_army_death_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = death_elementals_summoned_troops MAA = death_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_590 = {	# spawn_army_dark_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = dark_elementals_summoned_troops MAA = dark_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_591 = {	# spawn_army_night_gaunts
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = night_gaunts_summoned_troops MAA = night_gaunts SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_592 = {	# spawn_army_celestial_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = celestial_elementals_summoned_troops MAA = celestial_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_593 = {	# spawn_army_dream_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = dream_elementals_summoned_troops MAA = dream_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_594 = {	# spawn_army_time_elementals
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = time_elementals_summoned_troops MAA = time_elementals SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_595 = {	# spawn_army_elemental_choir
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = elemental_choir_summoned_troops MAA = elemental_choir SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_596 = {	# spawn_army_epochal_riders
	spawn_army_with_maa_tooltip_effect = { ARMY_NAME = epochal_riders_summoned_troops MAA = epochal_riders SCALED_BY = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_597 = {	# add_diplomacy_skill
	add_diplomacy_skill = scope:spell_effect.spell_tag_scalar_threshold_diff_value
 }
 spell_effect_598 = {	# reduce_diplomacy_skill
	add_diplomacy_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
 }
 spell_effect_599 = {	# add_intrigue_skill
	add_intrigue_skill = scope:spell_effect.spell_tag_scalar_threshold_diff_value
 }
 spell_effect_600 = {	# reduce_intrigue_skill
	add_intrigue_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
 }
 spell_effect_601 = {	# add_stewardship_skill
	add_stewardship_skill = scope:spell_effect.spell_tag_scalar_threshold_diff_value
 }
 spell_effect_602 = {	# reduce_stewardship_skill
	add_stewardship_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
 }
 spell_effect_603 = {	# add_martial_skill
	add_martial_skill = scope:spell_effect.spell_tag_scalar_threshold_diff_value
 }
 spell_effect_604 = {	# reduce_martial_skill
	add_martial_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
 }
 spell_effect_605 = {	# add_learning_skill
	add_learning_skill = scope:spell_effect.spell_tag_scalar_threshold_diff_value
 }
 spell_effect_606 = {	# reduce_learning_skill
	add_learning_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
 }
 spell_effect_607 = {	# add_prowess_skill
	add_prowess_skill = scope:spell_effect.spell_tag_scalar_threshold_diff_value
 }
 spell_effect_608 = {	# reduce_prowess_skill
	add_prowess_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
 }
 spell_effect_609 = {	# add_aspect_fire
	add_aspect_skill_effect = { ASPECT = fire VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_610 = {	# add_aspect_water
	add_aspect_skill_effect = { ASPECT = water VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_611 = {	# add_aspect_ice
	add_aspect_skill_effect = { ASPECT = ice VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_612 = {	# add_aspect_air
	add_aspect_skill_effect = { ASPECT = air VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_613 = {	# add_aspect_stone
	add_aspect_skill_effect = { ASPECT = stone VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_614 = {	# add_aspect_dream
	add_aspect_skill_effect = { ASPECT = dream VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_615 = {	# add_aspect_celestial
	add_aspect_skill_effect = { ASPECT = celestial VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_616 = {	# add_aspect_dark
	add_aspect_skill_effect = { ASPECT = dark VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_617 = {	# add_aspect_light
	add_aspect_skill_effect = { ASPECT = light VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_618 = {	# add_aspect_blood
	add_aspect_skill_effect = { ASPECT = blood VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_619 = {	# add_aspect_nature
	add_aspect_skill_effect = { ASPECT = nature VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_620 = {	# add_aspect_ethereal
	add_aspect_skill_effect = { ASPECT = ethereal VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_621 = {	# add_aspect_hymns
	add_aspect_skill_effect = { ASPECT = hymns VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_622 = {	# add_aspect_death
	add_aspect_skill_effect = { ASPECT = death VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_623 = {	# add_aspect_sand
	add_aspect_skill_effect = { ASPECT = sand VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_624 = {	# add_aspect_metal
	add_aspect_skill_effect = { ASPECT = metal VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_625 = {	# add_aspect_time
	add_aspect_skill_effect = { ASPECT = time VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_626 = {	# add_aspect_dawn
	add_aspect_skill_effect = { ASPECT = dawn VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
 }
 spell_effect_627 = {	# add_diplomacy_lifestyle_xp
	add_diplomacy_lifestyle_xp = add_diplomacy_lifestyle_xp_spell_effect_value
 }
 spell_effect_628 = {	# add_intrigue_lifestyle_xp
	add_intrigue_lifestyle_xp = add_intrigue_lifestyle_xp_spell_effect_value
 }
 spell_effect_629 = {	# add_martial_lifestyle_xp
	add_martial_lifestyle_xp = add_martial_lifestyle_xp_spell_effect_value
 }
 spell_effect_630 = {	# add_stewardship_lifestyle_xp
	add_stewardship_lifestyle_xp = add_stewardship_lifestyle_xp_spell_effect_value
 }
 spell_effect_631 = {	# add_learning_lifestyle_xp
	add_learning_lifestyle_xp = add_learning_lifestyle_xp_spell_effect_value
 }
 spell_effect_632 = {	# add_arcana_lifestyle_xp
	add_arcana_lifestyle_xp = add_arcana_lifestyle_xp_spell_effect_value
 }
 spell_effect_633 = {	# add_mana_positive
	gain_magical_power_effect = { VALUE = generate_magic_from_baseline_value }
	arcana_actuation_perk3_tree1_effect = yes

 }
 spell_effect_634 = {	# add_gold_positive
	add_gold = {
		value = 10
		multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
	}

 }
 spell_effect_635 = {	# remove_gold_negative
	add_gold = {
		value = minor_gold_loss
		multiply = scope:spell_effect.spell_tag_scalar_value
	}

 }
 spell_effect_636 = {	# stress_gain
	add_stress = {
		value = {
			value = minor_stress_gain
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}

 }
 spell_effect_637 = {	# stress_loss
	add_stress = {
		value = {
			value = minor_stress_loss
			multiply = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		}
	}

 }
 spell_effect_638 = {	# death_effect
	show_as_tooltip = {
		death = { death_reason = death_mysterious }
	}
	hidden_effect = {
		magic_unknown_murder_effect = { CASTER = scope:spell_organizer VICTIM = scope:spell_target REASON = death_mysterious }
	}

 }
 spell_effect_639 = {	# improve_development
	change_development_level = scope:spell_effect.spell_tag_scalar_threshold_diff_value

 }
 spell_effect_640 = {	# reduce_development
	change_development_level = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -3
	}
	if = {
		limit = { development_level = 0 }
		save_temporary_scope_as = county_to_ruin_scope
		spawn_ruin = { COUNTY = scope:county_to_ruin_scope }
	}

 }
 spell_effect_641 = {	# add_arcane_fallout
	gain_arcane_fallout_effect = { VALUE = add_arcane_fallout_value }

 }
 spell_effect_642 = {	# remove_arcane_fallout
	gain_arcane_fallout_effect = { VALUE = remove_arcane_fallout_value }

 }
 spell_effect_643 = {	# resist_poison
	custom_tooltip = {
		text = resist_poison_spell_effect_tooltip
		save_scope_value_as = {
			name = murder_saved
			value = flag:protective_spell
		}
	}

 }
 spell_effect_644 = {	# add_magic_baseline_positive
	add_magic_baseline_effect = { VALUE = scope:spell_effect.spell_tag_scalar_threshold_diff_value }

 }
 spell_effect_645 = {	# learn_random_magic_school_spell
	if = {
		limit = { exists = scope:effect_display_mode }
		custom_tooltip = learns_random_school_ritual_tooltip
	}
	else = {
		scope:spell_effect.var:magic_school = {
			random_in_list = {
				variable = spell_list
				limit = {
					NOT = {
						scope:spell_target = {
							trigger_if = {
								limit = { has_variable_list = known_spell_list }
								is_target_in_variable_list = {
									name = known_spell_list
									target = prev
								}
							}
						}
					}
					scope:spell_effect.spell_tag_scalar_threshold_diff_value >= spell_level_value
				}
				save_scope_as = learn_arcane_knowledge_spell_scope
			}
		}
		if = {
			limit = { exists = scope:learn_arcane_knowledge_spell_scope }
			learn_spell_effect = { SPELL = scope:learn_arcane_knowledge_spell_scope }
		}
		else = {
			scope:spell_effect.var:magic_school = { generate_procedural_spell_effect = { LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value QUALITY = 0 } }
			if = {
				limit = { exists = scope:new_spell_scope }
				learn_spell_effect = { SPELL = scope:new_spell_scope }
			}
		}
	}

 }
 spell_effect_646 = {	# damage_army
	every_army_in_location = {
		army_owner = {
			send_interface_message = { # Notification for the owner that their troops have been pwned
				type = event_martial_bad_with_text
				title = "Army Damaged"
				desc = "Your army was damaged by a spell cast by [spell_organizer.GetShortUIName]"
				prev = {
					deplete_army_by_percentage = { 
						value = damage_army_spell_effect_value
						multiply = 0.01
					}
				}
				right_icon = scope:spell_organizer
			}
		}
	}

 }
 spell_effect_647 = {	# education_lifestyle_xp_gain_mult_negative
	if = {
		limit = { is_adult = yes }
		switch = {
			trigger = has_trait
			education_diplomacy = { set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = 5 } }
			education_martial = { set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_martial_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = 5 } }
			education_stewardship = { set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_stewardship_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = 5 } }
			education_intrigue = { set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_intrigue_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = 5 } }
			education_learning = { set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_learning_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = 5 } }
			education_arcana = { set_stacking_modifier_to_level_with_overflow_effect = { MODIFIER = magic_arcana_lifestyle_xp_gain_mult_negative_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_threshold_diff_value YEARS = 5 } }
		}
	}

 }
 spell_effect_648 = {	# knight_summons
	custom_tooltip = {
		text = summon_knights_tooltip
		if = {
			limit = { NOT = { has_character_flag = invite_knights_decision_active } }
			add_character_flag = {
				flag = invite_knights_decision_active
				years = 3
			}
		}
		if = {
			limit = { NOT = { exists = var:number_of_invite_knights_countdown } }
			set_variable = {
				name = number_of_invite_knights_countdown
				value = knight_summons_value
				days = 1000
			}
			trigger_event = {
				id = minor_decisions.0001
				days = { 20 40 }
			}
		}
		else = {
			change_variable = {
				name = number_of_invite_knights_countdown
				add = knight_summons_value
			}
		}
	}

 }
 spell_effect_649 = {	# improve_inspiration_quality
	if = { # To avoid messing with vanilla tooltips too much
		limit = { exists = inspiration }
		change_artifact_quality_effect = { AMOUNT = scope:spell_effect.spell_tag_scalar_threshold_diff_value }
	}

 }
 spell_effect_650 = {	# dominate_character
	save_scope_value_as = {
		name = hook_duration
		value = {
			value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
			multiply = 3
		}
	}
	if = {
		limit = {
			scope:spell_effect.var:second_target_type ?= flag:spell_organizer
			NOT = { scope:spell_organizer ?= this }
		}
		add_hook = {
			type = domination_hook_strong
			target = scope:spell_organizer
			years = scope:hook_duration
		}
	}
	else_if = {
		limit = {
			scope:spell_effect.var:second_target_type ?= flag:target
		}
		every_in_list = {
			list = spell_targets
			limit = { NOT = { this = prev } }
			prev = {
				add_hook = {
					type = domination_hook_strong
					target = prev
					years = scope:hook_duration
				}
			}
		}
	}
	else_if = {
		limit = { NOT = { scope:spell_organizer ?= this } }
		scope:spell_organizer = {
			add_hook = {
				type = domination_hook_strong
				target = prev
				years = scope:hook_duration
			}
		}
	}

 }
 spell_effect_651 = {	# add_relevant_lifestyle_xp
	if = {
		limit = { is_adult = yes }
		if = {
			limit = { has_any_focus = yes }
			switch = {
				trigger = has_lifestyle
				diplomacy_lifestyle = { add_diplomacy_lifestyle_xp = add_relevant_lifestyle_xp_value }
				martial_lifestyle = { add_martial_lifestyle_xp = add_relevant_lifestyle_xp_value }
				stewardship_lifestyle = { add_stewardship_lifestyle_xp = add_relevant_lifestyle_xp_value }
				intrigue_lifestyle = { add_intrigue_lifestyle_xp = add_relevant_lifestyle_xp_value }
				learning_lifestyle = { add_learning_lifestyle_xp = add_relevant_lifestyle_xp_value }
				wanderer_lifestyle = { add_wanderer_lifestyle_xp = add_relevant_lifestyle_xp_value }
				arcana_lifestyle = { add_arcana_lifestyle_xp = add_relevant_lifestyle_xp_value }
				adventure_lifestyle = { add_adventure_lifestyle_xp = add_relevant_lifestyle_xp_value }
			}
		}
		else = {
			switch = {
				trigger = has_trait
				education_diplomacy = { add_diplomacy_lifestyle_xp = add_relevant_lifestyle_xp_value }
				education_martial = { add_martial_lifestyle_xp = add_relevant_lifestyle_xp_value }
				education_stewardship = { add_stewardship_lifestyle_xp = add_relevant_lifestyle_xp_value }
				education_intrigue = { add_intrigue_lifestyle_xp = add_relevant_lifestyle_xp_value }
				education_learning = { add_learning_lifestyle_xp = add_relevant_lifestyle_xp_value }
				education_arcana = { add_arcana_lifestyle_xp = add_relevant_lifestyle_xp_value }
			}
		}
	}
	hidden_effect = {
		random = {
			chance = 1
			trigger_event = magic.6001
		}
	}

 }
 spell_effect_652 = {	# add_relevant_lifestyle_perk_points
	if = {
		limit = { is_adult = yes }
		scope:caster ?= {
			switch = {
				trigger = has_trait
				education_diplomacy = { prev = { add_diplomacy_lifestyle_perk_points = scope:spell_effect.spell_tag_scalar_threshold_diff_value } }
				education_martial = { prev = { add_martial_lifestyle_perk_points = scope:spell_effect.spell_tag_scalar_threshold_diff_value } }
				education_stewardship = { prev = { add_stewardship_lifestyle_perk_points = scope:spell_effect.spell_tag_scalar_threshold_diff_value } }
				education_intrigue = { prev = { add_intrigue_lifestyle_perk_points = scope:spell_effect.spell_tag_scalar_threshold_diff_value } }
				education_learning = { prev = { add_learning_lifestyle_perk_points = scope:spell_effect.spell_tag_scalar_threshold_diff_value } }
				education_arcana = { prev = { add_arcana_lifestyle_perk_points = scope:spell_effect.spell_tag_scalar_threshold_diff_value } }
			}
		}
	}

 }
 spell_effect_653 = {	# destroy_random_building
	set_local_variable = {
		name = for_counter
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
	}
	while = {
		limit = {
			exists = local_var:for_counter
			local_var:for_counter > 0
		}
		destroy_random_building_variable_effect = yes
		destroy_random_building_effect = yes
	}

 }
 spell_effect_654 = {	# add_spell_to_tattoo_list
	add_to_variable_list = {
		name = GH_ritual_tattoo_list
		target = scope:spell_being_casted
	}

 }
 spell_effect_655 = {	# destroy_sun
	custom_tooltip = {
		text = destroy_sun_tooltip
		scope:spell_organizer ?= { create_story = story_cycle_sundeath }
	}

	scope:spell_organizer = {
		if = {
			limit = {
				has_variable_list = spell_component_being_prepared_list
				any_in_list = {
					variable = spell_component_being_prepared_list
					exists = var:spell_component_template.var:artifact_type
					var:spell_component_template.var:artifact_type = flag:prism
				}
			}
			random_in_list = {
				variable = spell_component_being_prepared_list
				limit = {
					exists = var:spell_component_template.var:artifact_type
					var:spell_component_template.var:artifact_type = flag:prism
				}
				var:spell_component_artifact_selection = {
					custom_tooltip = {
						text = charge_mana_prism_infinite_tooltip
						
						set_variable = {
							name = stored_mana
							value = -1
						}
					}
					add_artifact_aspect_modifier_effect = { NAME = light VALUE = 100 }
					add_artifact_aspect_modifier_effect = { NAME = fire VALUE = 50 }
					add_artifact_aspect_modifier_effect = { NAME = celestial VALUE = 50 } 
					
					set_artifact_name = artifact_sun_prism_name
					set_artifact_description = artifact_sun_prism_desc
				}
			}
		}
		gh_achiev_nothingcouldgowrong_check = yes
	}

 }
 spell_effect_656 = {	# reduce_all_skills
	add_diplomacy_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
	add_intrigue_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
	add_stewardship_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
	add_martial_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
	add_learning_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
	add_prowess_skill = {
		value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
		multiply = -1
	}
	save_scope_value_as = {
		name = arcana_skill_loss
		value = {
			value = scope:spell_effect.spell_tag_scalar_threshold_diff_value
			multiply = -1
		}
	}
	if = {
		limit = { exists = scope:arcana_skill_loss }
		add_arcana_skill = { VALUE = scope:arcana_skill_loss }
	}

 }
 spell_effect_657 = {	# rank_up_education_effect
	if = {
		limit = { has_trait = education_diplomacy }
		change_trait_rank = {
			trait = education_diplomacy
			rank = 1
			max = 5
		}
	}
	else_if = {
		limit = { has_trait = education_martial }
		change_trait_rank = {
			trait = education_martial
			rank = 1
			max = 5
		}
	}
	else_if = {
		limit = { has_trait = education_stewardship }
		change_trait_rank = {
			trait = education_stewardship
			rank = 1
			max = 5
		}
	}
	else_if = {
		limit = { has_trait = education_intrigue }
		change_trait_rank = {
			trait = education_intrigue
			rank = 1
			max = 5
		}
	}
	else_if = {
		limit = { has_trait = education_learning }
		change_trait_rank = {
			trait = education_learning
			rank = 1
			max = 5
		}
	}

 }
 spell_effect_658 = {	# reveal_secret
	if = {
		limit = { exists = scope:effect_display_mode }
		custom_tooltip = may_learn_secrets_tooltip
	}
	else = {
		if = {
			limit = {
				NOR = {
					this = scope:spell_organizer
					this = scope:caster
				}
			}
			random_secret = {
				reveal_to_without_events_effect = { CHARACTER = scope:spell_organizer }
				if = {
					limit = {
						exists = scope:caster
						NOT = { scope:caster = scope:spell_organizer }
					}
					reveal_to_without_events_effect = { CHARACTER = scope:caster }
				}
			}
		}
	}

 }
 spell_effect_659 = {	# freeze_target_character
	custom_tooltip = inter_in_ice_tooltip

 }
 spell_effect_660 = {	# create_skeletal_artifact
	# Influences the quality of the artifact crafted & in turn its magical capabilities 
	save_scope_value_as = {
	  name = aspect_level_value
	  value = scope:spell_effect.spell_tag_scalar_value
	}

 }
 spell_effect_661 = {	# dream_glimpse_reality
	if = {
		limit = { NOT = { has_character_flag =  casted_glimpse_reality } }
		custom_tooltip = glimpse_reality.tooltip
		if = {
				limit = { exists = scope:spell_organizer }
				scope:spell_organizer = { trigger_event = glimpse_reality.0001 }
		}
		else = { trigger_event = glimpse_reality.0001 }
		if = {
				limit = {
					scope:spell_organizer = {
						dream_aspect_skill_trigger = { VALUE = 10 }
					}
				}
				if = {
					limit = {
						scope:spell_organizer = {
								dream_aspect_skill_trigger = { VALUE = 20 }
						}
					}
					add_character_flag = {
						flag = casted_glimpse_reality
						years = 1
					}
				}
				else = {
					add_character_flag = {
						flag = casted_glimpse_reality
						years = 2
					}
				}
		}
		else = {
				add_character_flag = {
					flag = casted_glimpse_reality
					years = 3
				}
		}
	}
	else = {
		custom_tooltip = {
				text = glimpse_reality_limited_tt
				add_stress = major_stress_impact_gain
		}
	}

 }
 spell_effect_662 = {	# add_education_progress
	if = {
		limit = { is_adult = no }
		custom_tooltip = {
			text = shard_of_imbued_knowledge_child_tooltip
			switch = {
				trigger = has_focus
				education_diplomacy = {
					if = {
						limit = { NOT = { has_variable = education_diplomacy_variable } }
						set_variable = {
							name = education_diplomacy_variable
							value = 0
						}
					}
					change_variable = {
						name = education_diplomacy_variable
						add = {
							value = scope:spell_effect.spell_tag_scalar_value
							multiply = 1.25
							if = {
								limit = { scope:caster = { has_trait = education_diplomacy } }
								multiply = 1.25
							}
							round = yes
						}
					}
				}
				education_martial = {
					if = {
						limit = { NOT = { has_variable = education_martial_variable } }
						set_variable = {
							name = education_martial_variable
							value = 0
						}
					}
					change_variable = {
						name = education_martial_variable
						add = {
							value = scope:spell_effect.spell_tag_scalar_value
							multiply = 1.25
							if = {
								limit = { scope:caster = { has_trait = education_martial } }
								multiply = 1.25
							}
							round = yes
						}
					}
				}
				education_stewardship = {
					if = {
						limit = { NOT = { has_variable = education_stewardship_variable } }
						set_variable = {
							name = education_stewardship_variable
							value = 0
						}
					}
					change_variable = {
						name = education_stewardship_variable
						add = {
							value = scope:spell_effect.spell_tag_scalar_value
							multiply = 1.25
							if = {
								limit = { scope:caster = { has_trait = education_stewardship } }
								multiply = 1.25
							}
							round = yes
						}
					}
				}
				education_intrigue = {
					if = {
						limit = { NOT = { has_variable = education_intrigue_variable } }
						set_variable = {
							name = education_intrigue_variable
							value = 0
						}
					}
					change_variable = {
						name = education_intrigue_variable
						add = {
							value = scope:spell_effect.spell_tag_scalar_value
							multiply = 1.25
							if = {
								limit = { scope:caster = { has_trait = education_intrigue } }
								multiply = 1.25
							}
							round = yes
						}
					}
				}
				education_learning = {
					if = {
						limit = { NOT = { has_variable = education_learning_variable } }
						set_variable = {
							name = education_learning_variable
							value = 0
						}
					}
					change_variable = {
						name = education_learning_variable
						add = {
							value = scope:spell_effect.spell_tag_scalar_value
							multiply = 1.25
							if = {
								limit = { scope:caster = { has_trait = education_learning } }
								multiply = 1.25
							}
							round = yes
						}
					}
				}
				education_arcana = {
					if = {
						limit = { NOT = { has_variable = education_arcana_variable } }
						set_variable = {
							name = education_arcana_variable
							value = 0
						}
					}
					change_variable = {
						name = education_arcana_variable
						add = {
							value = scope:spell_effect.spell_tag_scalar_value
							multiply = 1.25
							if = {
								limit = { scope:caster = { has_trait = education_arcana } }
								multiply = 1.25
							}
							round = yes
						}
					}
				}
			}
		}
	}

 }
 spell_effect_663 = {	# initiate_interior_journey
	add_character_flag = {
		flag = casted_inner_journey
		years = 5
	}
	save_scope_value_as = {
		name = aspect_level_value
		value = scope:spell_effect.spell_tag_scalar_value
	}
	save_scope_value_as = {
		name = aspect_level_scalar_threshold
		value = scope:spell_effect.var:scalar_threshold
	}
	scope:spell_organizer ?= { trigger_event = interior_journey.0001 }

 }
 spell_effect_664 = {	# increase_raid_capture_improvement
	add_or_increase_permanent_variable_magic_effect = { VARIABLE = raid_capture_improvement LEVEL = scope:spell_effect.spell_tag_scalar_value START_AFTER_LEVEL = scope:spell_effect.var:scalar_threshold }
	upgrade_stacking_modifier_by_level_effect = { MODIFIER = raid_capture_improvement_modifier TYPE = character LEVEL = scope:spell_effect.spell_tag_scalar_value YEARS = -1  }

 }
 spell_effect_665 = {}
 spell_effect_666 = {}
 spell_effect_667 = {}
 spell_effect_668 = {}
 spell_effect_669 = {}
 spell_effect_670 = {}
 spell_effect_671 = {}
 spell_effect_672 = {}
 spell_effect_673 = {}
 spell_effect_674 = {}
 spell_effect_675 = {}
 spell_effect_676 = {}
 spell_effect_677 = {}
 spell_effect_678 = {}
 spell_effect_679 = {}
 spell_effect_680 = {}
 spell_effect_681 = {}
 spell_effect_682 = {}
 spell_effect_683 = {}
 spell_effect_684 = {}
 spell_effect_685 = {}
 spell_effect_686 = {}
 spell_effect_687 = {}
 spell_effect_688 = {}
 spell_effect_689 = {}
 spell_effect_690 = {}
 spell_effect_691 = {}
 spell_effect_692 = {}
 spell_effect_693 = {}
 spell_effect_694 = {}
 spell_effect_695 = {}
 spell_effect_696 = {}
 spell_effect_697 = {}
 spell_effect_698 = {}
 spell_effect_699 = {}
 spell_effect_700 = {}
 spell_effect_701 = {}
 spell_effect_702 = {}
 spell_effect_703 = {}
 spell_effect_704 = {}
 spell_effect_705 = {}
 spell_effect_706 = {}
 spell_effect_707 = {}
 spell_effect_708 = {}
 spell_effect_709 = {}
 spell_effect_710 = {}
 spell_effect_711 = {}
 spell_effect_712 = {}
 spell_effect_713 = {}
 spell_effect_714 = {}
 spell_effect_715 = {}
 spell_effect_716 = {}
 spell_effect_717 = {}
 spell_effect_718 = {}
 spell_effect_719 = {}
 spell_effect_720 = {}
 spell_effect_721 = {}
 spell_effect_722 = {}
 spell_effect_723 = {}
 spell_effect_724 = {}
 spell_effect_725 = {}
 spell_effect_726 = {}
 spell_effect_727 = {}
 spell_effect_728 = {}
 spell_effect_729 = {}
 spell_effect_730 = {}
 spell_effect_731 = {}
 spell_effect_732 = {}
 spell_effect_733 = {}
 spell_effect_734 = {}
 spell_effect_735 = {}
 spell_effect_736 = {}
 spell_effect_737 = {}
 spell_effect_738 = {}
 spell_effect_739 = {}
 spell_effect_740 = {}
 spell_effect_741 = {}
 spell_effect_742 = {}
 spell_effect_743 = {}
 spell_effect_744 = {}
 spell_effect_745 = {}
 spell_effect_746 = {}
 spell_effect_747 = {}
 spell_effect_748 = {}
 spell_effect_749 = {}
 spell_effect_750 = {}
 spell_effect_751 = {}
 spell_effect_752 = {}
 spell_effect_753 = {}
 spell_effect_754 = {}
 spell_effect_755 = {}
 spell_effect_756 = {}
 spell_effect_757 = {}
 spell_effect_758 = {}
 spell_effect_759 = {}
 spell_effect_760 = {}
 spell_effect_761 = {}
 spell_effect_762 = {}
 spell_effect_763 = {}
 spell_effect_764 = {}
 spell_effect_765 = {}
 spell_effect_766 = {}
 spell_effect_767 = {}
 spell_effect_768 = {}
 spell_effect_769 = {}
 spell_effect_770 = {}
 spell_effect_771 = {}
 spell_effect_772 = {}
 spell_effect_773 = {}
 spell_effect_774 = {}
 spell_effect_775 = {}
 spell_effect_776 = {}
 spell_effect_777 = {}
 spell_effect_778 = {}
 spell_effect_779 = {}
 spell_effect_780 = {}
 spell_effect_781 = {}
 spell_effect_782 = {}
 spell_effect_783 = {}
 spell_effect_784 = {}
 spell_effect_785 = {}
 spell_effect_786 = {}
 spell_effect_787 = {}
 spell_effect_788 = {}
 spell_effect_789 = {}
 spell_effect_790 = {}
 spell_effect_791 = {}
 spell_effect_792 = {}
 spell_effect_793 = {}
 spell_effect_794 = {}
 spell_effect_795 = {}
 spell_effect_796 = {}
 spell_effect_797 = {}
 spell_effect_798 = {}
 spell_effect_799 = {}
 spell_effect_800 = {}
 spell_effect_801 = {}
 spell_effect_802 = {}
 spell_effect_803 = {}
 spell_effect_804 = {}
 spell_effect_805 = {}
 spell_effect_806 = {}
 spell_effect_807 = {}
 spell_effect_808 = {}
 spell_effect_809 = {}
 spell_effect_810 = {}
 spell_effect_811 = {}
 spell_effect_812 = {}
 spell_effect_813 = {}
 spell_effect_814 = {}
 spell_effect_815 = {}
 spell_effect_816 = {}
 spell_effect_817 = {}
 spell_effect_818 = {}
 spell_effect_819 = {}
 spell_effect_820 = {}
 spell_effect_821 = {}
 spell_effect_822 = {}
 spell_effect_823 = {}
 spell_effect_824 = {}
 spell_effect_825 = {}
 spell_effect_826 = {}
 spell_effect_827 = {}
 spell_effect_828 = {}
 spell_effect_829 = {}
 spell_effect_830 = {}
 spell_effect_831 = {}
 spell_effect_832 = {}
 spell_effect_833 = {}
 spell_effect_834 = {}
 spell_effect_835 = {}
 spell_effect_836 = {}
 spell_effect_837 = {}
 spell_effect_838 = {}
 spell_effect_839 = {}
 spell_effect_840 = {}
 spell_effect_841 = {}
 spell_effect_842 = {}
 spell_effect_843 = {}
 spell_effect_844 = {}
 spell_effect_845 = {}
 spell_effect_846 = {}
 spell_effect_847 = {}
 spell_effect_848 = {}
 spell_effect_849 = {}
 spell_effect_850 = {}
 spell_effect_851 = {}
 spell_effect_852 = {}
 spell_effect_853 = {}
 spell_effect_854 = {}
 spell_effect_855 = {}
 spell_effect_856 = {}
 spell_effect_857 = {}
 spell_effect_858 = {}
 spell_effect_859 = {}
 spell_effect_860 = {}
 spell_effect_861 = {}
 spell_effect_862 = {}
 spell_effect_863 = {}
 spell_effect_864 = {}
 spell_effect_865 = {}
 spell_effect_866 = {}
 spell_effect_867 = {}
 spell_effect_868 = {}
 spell_effect_869 = {}
 spell_effect_870 = {}
 spell_effect_871 = {}
 spell_effect_872 = {}
 spell_effect_873 = {}
 spell_effect_874 = {}
 spell_effect_875 = {}
 spell_effect_876 = {}
 spell_effect_877 = {}
 spell_effect_878 = {}
 spell_effect_879 = {}
 spell_effect_880 = {}
 spell_effect_881 = {}
 spell_effect_882 = {}
 spell_effect_883 = {}
 spell_effect_884 = {}
 spell_effect_885 = {}
 spell_effect_886 = {}
 spell_effect_887 = {}
 spell_effect_888 = {}
 spell_effect_889 = {}
 spell_effect_890 = {}
 spell_effect_891 = {}
 spell_effect_892 = {}
 spell_effect_893 = {}
 spell_effect_894 = {}
 spell_effect_895 = {}
 spell_effect_896 = {}
 spell_effect_897 = {}
 spell_effect_898 = {}
 spell_effect_899 = {}
 spell_effect_900 = {}
 spell_effect_901 = {}
 spell_effect_902 = {}
 spell_effect_903 = {}
 spell_effect_904 = {}
 spell_effect_905 = {}
 spell_effect_906 = {}
 spell_effect_907 = {}
 spell_effect_908 = {}
 spell_effect_909 = {}
 spell_effect_910 = {}
 spell_effect_911 = {}
 spell_effect_912 = {}
 spell_effect_913 = {}
 spell_effect_914 = {}
 spell_effect_915 = {}
 spell_effect_916 = {}
 spell_effect_917 = {}
 spell_effect_918 = {}
 spell_effect_919 = {}
 spell_effect_920 = {}
 spell_effect_921 = {}
 spell_effect_922 = {}
 spell_effect_923 = {}
 spell_effect_924 = {}
 spell_effect_925 = {}
 spell_effect_926 = {}
 spell_effect_927 = {}
 spell_effect_928 = {}
 spell_effect_929 = {}
 spell_effect_930 = {}
 spell_effect_931 = {}
 spell_effect_932 = {}
 spell_effect_933 = {}
 spell_effect_934 = {}
 spell_effect_935 = {}
 spell_effect_936 = {}
 spell_effect_937 = {}
 spell_effect_938 = {}
 spell_effect_939 = {}
 spell_effect_940 = {}
 spell_effect_941 = {}
 spell_effect_942 = {}
 spell_effect_943 = {}
 spell_effect_944 = {}
 spell_effect_945 = {}
 spell_effect_946 = {}
 spell_effect_947 = {}
 spell_effect_948 = {}
 spell_effect_949 = {}
 spell_effect_950 = {}
 spell_effect_951 = {}
 spell_effect_952 = {}
 spell_effect_953 = {}
 spell_effect_954 = {}
 spell_effect_955 = {}
 spell_effect_956 = {}
 spell_effect_957 = {}
 spell_effect_958 = {}
 spell_effect_959 = {}
 spell_effect_960 = {}
 spell_effect_961 = {}
 spell_effect_962 = {}
 spell_effect_963 = {}
 spell_effect_964 = {}
 spell_effect_965 = {}
 spell_effect_966 = {}
 spell_effect_967 = {}
 spell_effect_968 = {}
 spell_effect_969 = {}
 spell_effect_970 = {}
 spell_effect_971 = {}
 spell_effect_972 = {}
 spell_effect_973 = {}
 spell_effect_974 = {}
 spell_effect_975 = {}
 spell_effect_976 = {}
 spell_effect_977 = {}
 spell_effect_978 = {}
 spell_effect_979 = {}
 spell_effect_980 = {}
 spell_effect_981 = {}
 spell_effect_982 = {}
 spell_effect_983 = {}
 spell_effect_984 = {}
 spell_effect_985 = {}
 spell_effect_986 = {}
 spell_effect_987 = {}
 spell_effect_988 = {}
 spell_effect_989 = {}
 spell_effect_990 = {}
 spell_effect_991 = {}
 spell_effect_992 = {}
 spell_effect_993 = {}
 spell_effect_994 = {}
 spell_effect_995 = {}
 spell_effect_996 = {}
 spell_effect_997 = {}
 spell_effect_998 = {}
 spell_effect_999 = {}
 spell_effect_1000 = {}
 spell_effect_1001 = {}
 spell_effect_1002 = {}
 spell_effect_1003 = {}
 spell_effect_1004 = {}
 spell_effect_1005 = {}
 spell_effect_1006 = {}
 spell_effect_1007 = {}
 spell_effect_1008 = {}
 spell_effect_1009 = {}
 spell_effect_1010 = {}
 spell_effect_1011 = {}
 spell_effect_1012 = {}
 spell_effect_1013 = {}
 spell_effect_1014 = {}
 spell_effect_1015 = {}
 spell_effect_1016 = {}
 spell_effect_1017 = {}
 spell_effect_1018 = {}
 spell_effect_1019 = {}
 spell_effect_1020 = {}
 spell_effect_1021 = {}
 spell_effect_1022 = {}
 spell_effect_1023 = {}

 # Categorization effects (mainly for AI)
 add_character_modifier_magic_health_gain_modifier_assign_spell_category_effect = {
	set_variable = healing
 }
 add_character_modifier_magic_health_resistance_gain_modifier_assign_spell_category_effect = {
	set_variable = healing
 }
 add_character_modifier_magic_health_loss_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_health_loss_minor_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_stress_negative_assign_spell_category_effect = {
 }
 add_character_modifier_magic_stress_positive_assign_spell_category_effect = {
 }
 add_character_modifier_magic_stress_gain_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_stress_loss_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_virility_opinion_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_viagra_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_general_boost_assign_spell_category_effect = {
 }
 add_character_modifier_magic_diplomacy_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_diplomacy_resistance_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_diplomacy_loss_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_diplomacy_gain_per_piety_level_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_martial_animal_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_martial_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_martial_resistance_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_martial_loss_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_martial_gain_per_piety_level_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_stewardship_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_stewardship_resistance_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_stewardship_loss_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_stewardship_gain_per_piety_level_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_intrigue_animal_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_intrigue_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_intrigue_resistance_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_intrigue_loss_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_intrigue_gain_per_piety_level_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_learning_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_learning_resistance_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_learning_loss_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_learning_gain_per_piety_level_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_prowess_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_prowess_resistance_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_prowess_loss_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_prowess_gain_per_piety_level_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_attraction_opinion_physical_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_attraction_opinion_social_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_close_relative_opinion_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_child_opinion_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_spouse_opinion_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_house_opinion_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_dynasty_opinion_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_general_opinion_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_realm_opinion_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_internal_strife_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_external_condemnation_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_diplomacy_magic_modifier_seduction_positive_assign_spell_category_effect = {
 }
 add_character_modifier_diplomacy_magic_modifier_seduction_negative_assign_spell_category_effect = {
 }
 add_character_modifier_diplomacy_magic_modifier_vassal_opinion_positive_assign_spell_category_effect = {
 }
 add_character_modifier_religious_fanaticism_assign_spell_category_effect = {
 }
 add_character_modifier_melodious_voice_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_glassinger_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_character_county_opinion_negative_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_short_reign_duration_mult_positive_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_court_grandeur_baseline_add_positive_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_character_travel_safety_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_character_travel_safety_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_character_travel_speed_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_travel_advantage_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_travel_disadvantage_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_pane_of_passage_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_county_travel_danger_advantage_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_county_travel_danger_disadvantage_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_murder_scheme_power_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_seduce_scheme_power_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_hostile_scheme_discovery_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_vengeance_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_haunting_power_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_brave_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_craven_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_calm_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_wrathful_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_chaste_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_lustful_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_content_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_ambitious_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_diligent_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_lazy_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_fickle_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_stubborn_assign_spell_category_effect = {
	set_variable = healing
 }
 add_character_modifier_magic_trait_synergy_forgiving_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_vengeful_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_generous_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_greedy_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_gregarious_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_shy_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_honest_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_deceitful_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_humble_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_arrogant_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_just_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_arbitrary_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_patient_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_impatient_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_temperate_assign_spell_category_effect = {
	set_variable = healing
 }
 add_character_modifier_magic_trait_synergy_gluttonous_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_trusting_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_paranoid_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_zealous_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_cynical_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_compassionate_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_callous_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_sadistic_assign_spell_category_effect = {
 }
 add_character_modifier_magic_trait_synergy_eccentric_assign_spell_category_effect = {
 }
 add_character_modifier_magic_battle_magic_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_character_modifier_magic_enhanced_fatality_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
 }
 add_character_modifier_magic_hard_casualty_modifier_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_hard_casualty_modifier_loss_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
 }
 add_character_modifier_dry_terrain_advantage_magic_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_character_modifier_forest_terrain_advantage_magic_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_character_modifier_water_magic_advantage_magic_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_character_modifier_water_magic_disadvantage_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_sailing_magic_advantage_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_sailing_magic_disadvantage_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_slow_army_movement_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_movement_speed_positive_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_hasten_raid_speed_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_rocky_terrain_advantage_magic_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_character_modifier_negate_enemy_advantage_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_knight_effectiveness_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_army_damage_magic_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_army_damage_negative_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_army_toughness_magic_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
 }
 add_character_modifier_magi_siege_value_add_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_siege_weapon_siege_value_add_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_abstruse_survivability_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_character_modifier_men_at_arms_recruitment_cost_positive_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_siege_phase_time_positive_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_attacker_advantage_positive_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_dynasty_prestige_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_dynasty_prestige_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_income_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_income_gain_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_income_loss_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_piety_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_piety_gain_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_piety_loss_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_prestige_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_prestige_gain_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_prestige_loss_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_omen_diplomacy_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_omen_intrigue_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_omen_martial_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
 }
 add_character_modifier_magic_omen_stewardship_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_omen_learning_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_genetics_positive_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magi_siege_value_add_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_epidemic_resistance_gain_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_county_opinion_add_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_county_opinion_loss_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_monthly_county_control_decline_add_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_improve_agriculture_magic_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_reduce_agriculture_magic_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_building_construction_county_magic_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_defensive_county_magic_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_decimate_defense_county_magic_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_fort_creation_county_magic_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_long_term_fort_creation_county_magic_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_backfire_county_debuff_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_backfire_county_debuff_earth_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_county_ground_positive_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_county_ground_positive_earth_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_county_ground_positive_earth_long_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_county_positive_build_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_weather_negative_magic_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_weather_negative_fire_magic_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_county_defender_advantage_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_county_lower_control_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_county_lower_control_modifier_livestock_assign_spell_category_effect = {
 }
 add_county_modifier_county_illuminated_night_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_county_light_pollution_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_lead_to_gold_inflation_min_assign_spell_category_effect = {
 }
 add_county_modifier_lead_to_gold_inflation_assign_spell_category_effect = {
 }
 add_county_modifier_magic_ruined_agriculture_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_destroyed_buildings_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_fogswept_modifier_assign_spell_category_effect = {
 }
 add_province_modifier_magic_shattered_defenses_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_corroded_defenses_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_glasswinds_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_resource_exotic_metals_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_resource_abundant_stone_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_resource_excellent_soil_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_resource_verdant_plant_growth_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_character_monthly_county_control_growth_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_character_capital_county_monthly_development_growth_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_character_build_speed_modifier_assign_spell_category_effect = {
 }
 add_province_modifier_backfire_province_debuff_fire_modifier_assign_spell_category_effect = {
 }
 add_province_modifier_enhanced_farmland_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_tyranny_gain_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_tyranny_loss_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_tyranny_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_tyranny_loss_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_cultural_head_fascination_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_cultural_head_fascination_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_unnatural_shaping_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_boneshaping_modifier_assign_spell_category_effect = {
	set_variable = army_improvement
 }
 add_character_modifier_magic_defiled_nadir_modifier_assign_spell_category_effect = {
	set_variable = healing
 }
 add_character_modifier_magic_frozen_experience_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_arcane_incapacitation_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_mind_fog_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_life_extension_modifier_assign_spell_category_effect = {
	set_variable = healing
 }
 add_character_modifier_magic_arcane_degeneration_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_bodily_modification_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_levy_reinforcement_rate_gain_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_enemy_hostile_scheme_phase_duration_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_enemy_hostile_scheme_phase_duration_loss_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_scheme_discovery_chance_mult_loss_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_prestige_gain_per_dread_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_dread_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monthly_lifestyle_xp_gain_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_intrigue_lifestyle_xp_gain_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_stewardship_lifestyle_xp_gain_mult_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_martial_lifestyle_xp_gain_mult_negative_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_stewardship_lifestyle_xp_gain_mult_negative_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_intrigue_lifestyle_xp_gain_mult_negative_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_learning_lifestyle_xp_gain_mult_negative_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_arcana_lifestyle_xp_gain_mult_negative_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_shard_exhaustion_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_communication_shards_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_title_creation_cost_mult_positive_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_resistance_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_penetration_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_battle_death_chance_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_enemy_knight_kill_chance_magic_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_vassalization_acceptance_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_arcane_fallout_reduction_modifier_assign_spell_category_effect = {
 }
 add_county_modifier_magic_habitability_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_raid_capture_improvement_modifier_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_health_gain_modifier_artifact_assign_spell_category_effect = {
	set_variable = healing
 }
 add_artifact_modifier_magic_health_resistance_gain_modifier_artifact_assign_spell_category_effect = {
	set_variable = healing
 }
 add_artifact_modifier_magic_health_loss_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_health_loss_minor_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_stress_negative_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_stress_positive_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_stress_gain_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_stress_loss_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_virility_opinion_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_viagra_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_general_boost_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_diplomacy_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_diplomacy_resistance_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_diplomacy_loss_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_diplomacy_gain_per_piety_level_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_martial_animal_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_martial_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_martial_resistance_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_martial_loss_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_martial_gain_per_piety_level_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_stewardship_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_stewardship_resistance_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_stewardship_loss_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_stewardship_gain_per_piety_level_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_intrigue_animal_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_intrigue_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_intrigue_resistance_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_intrigue_loss_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_intrigue_gain_per_piety_level_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_learning_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_learning_resistance_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_learning_loss_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_learning_gain_per_piety_level_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_prowess_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_prowess_resistance_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_prowess_loss_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_prowess_gain_per_piety_level_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_attraction_opinion_physical_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_attraction_opinion_social_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_close_relative_opinion_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_child_opinion_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_spouse_opinion_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_house_opinion_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_dynasty_opinion_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_general_opinion_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_realm_opinion_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_internal_strife_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_external_condemnation_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_diplomacy_magic_modifier_seduction_positive_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_diplomacy_magic_modifier_seduction_negative_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_diplomacy_magic_modifier_vassal_opinion_positive_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_religious_fanaticism_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_melodious_voice_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_glassinger_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_character_county_opinion_negative_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_short_reign_duration_mult_positive_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_court_grandeur_baseline_add_positive_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_character_travel_safety_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_character_travel_safety_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_character_travel_speed_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_travel_advantage_magic_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_travel_disadvantage_magic_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_pane_of_passage_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_murder_scheme_power_add_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_seduce_scheme_power_add_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_hostile_scheme_discovery_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_vengeance_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_haunting_power_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_brave_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_craven_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_calm_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_wrathful_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_chaste_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_lustful_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_content_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_ambitious_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_diligent_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_lazy_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_fickle_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_stubborn_artifact_assign_spell_category_effect = {
	set_variable = healing
 }
 add_artifact_modifier_magic_trait_synergy_forgiving_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_vengeful_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_generous_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_greedy_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_gregarious_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_shy_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_honest_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_deceitful_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_humble_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_arrogant_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_just_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_arbitrary_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_patient_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_impatient_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_temperate_artifact_assign_spell_category_effect = {
	set_variable = healing
 }
 add_artifact_modifier_magic_trait_synergy_gluttonous_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_trusting_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_paranoid_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_zealous_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_cynical_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_compassionate_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_callous_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_sadistic_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_trait_synergy_eccentric_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_battle_magic_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_artifact_modifier_magic_enhanced_fatality_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
 }
 add_artifact_modifier_magic_hard_casualty_modifier_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_hard_casualty_modifier_loss_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
 }
 add_artifact_modifier_dry_terrain_advantage_magic_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_artifact_modifier_forest_terrain_advantage_magic_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_artifact_modifier_water_magic_advantage_magic_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_artifact_modifier_water_magic_disadvantage_magic_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_sailing_magic_advantage_magic_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_sailing_magic_disadvantage_magic_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_slow_army_movement_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_movement_speed_positive_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_hasten_raid_speed_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_rocky_terrain_advantage_magic_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_artifact_modifier_negate_enemy_advantage_magic_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_knight_effectiveness_magic_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_army_damage_magic_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_army_damage_negative_magic_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_army_toughness_magic_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
 }
 add_artifact_modifier_magi_siege_value_add_magic_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_siege_weapon_siege_value_add_magic_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_abstruse_survivability_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
	set_variable = army_improvement
 }
 add_artifact_modifier_men_at_arms_recruitment_cost_positive_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_siege_phase_time_positive_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_attacker_advantage_positive_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_dynasty_prestige_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_dynasty_prestige_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_income_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_income_gain_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_income_loss_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_piety_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_piety_gain_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_piety_loss_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_prestige_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_prestige_gain_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_prestige_loss_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_omen_diplomacy_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_omen_intrigue_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_omen_martial_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
 }
 add_artifact_modifier_magic_omen_stewardship_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_omen_learning_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_genetics_positive_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_magi_siege_value_add_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_character_monthly_county_control_growth_add_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_character_capital_county_monthly_development_growth_add_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_character_build_speed_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_tyranny_gain_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_tyranny_loss_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_tyranny_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_tyranny_loss_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_cultural_head_fascination_add_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_cultural_head_fascination_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_unnatural_shaping_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_boneshaping_modifier_artifact_assign_spell_category_effect = {
	set_variable = army_improvement
 }
 add_artifact_modifier_magic_defiled_nadir_modifier_artifact_assign_spell_category_effect = {
	set_variable = healing
 }
 add_artifact_modifier_magic_frozen_experience_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_arcane_incapacitation_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_mind_fog_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_life_extension_modifier_artifact_assign_spell_category_effect = {
	set_variable = healing
 }
 add_artifact_modifier_magic_arcane_degeneration_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_bodily_modification_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_levy_reinforcement_rate_gain_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_enemy_hostile_scheme_phase_duration_add_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_enemy_hostile_scheme_phase_duration_loss_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_scheme_discovery_chance_mult_loss_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_prestige_gain_per_dread_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_dread_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_monthly_lifestyle_xp_gain_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_intrigue_lifestyle_xp_gain_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_stewardship_lifestyle_xp_gain_mult_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_diplomacy_lifestyle_xp_gain_mult_negative_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_martial_lifestyle_xp_gain_mult_negative_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_stewardship_lifestyle_xp_gain_mult_negative_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_intrigue_lifestyle_xp_gain_mult_negative_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_learning_lifestyle_xp_gain_mult_negative_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_magic_arcana_lifestyle_xp_gain_mult_negative_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_shard_exhaustion_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_communication_shards_modifier_artifact_assign_spell_category_effect = {
 }
 add_artifact_modifier_title_creation_cost_mult_positive_modifier_artifact_assign_spell_category_effect = {
 }
 add_character_modifier_magic_archer_cavalry_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_archers_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_camel_cavalry_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_elephant_cavalry_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_heavy_cavalry_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_light_cavalry_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_heavy_infantry_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_pikemen_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_skirmishers_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_siege_weapon_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_flying_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magi_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_adventurers_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_chariot_cavalry_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_monsters_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_undead_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_constructs_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_ethereal_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_nature_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_water_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_air_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_stone_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_fire_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_ice_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_metal_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_sand_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_light_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_blood_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_death_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_dark_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_celestial_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_dream_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_time_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_hymns_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_character_modifier_magic_magical_dawn_improvement_add_modifier_assign_spell_category_effect = {
 }
 add_trait_magic_good_assign_spell_category_effect = {
 }
 remove_trait_magic_good_assign_spell_category_effect = {
 }
 add_trait_wounded_assign_spell_category_effect = {
 }
 remove_trait_wounded_assign_spell_category_effect = {
 }
 add_trait_disfigured_assign_spell_category_effect = {
 }
 remove_trait_disfigured_assign_spell_category_effect = {
 }
 add_trait_ill_assign_spell_category_effect = {
 }
 remove_trait_ill_assign_spell_category_effect = {
 }
 add_trait_pneumonic_assign_spell_category_effect = {
 }
 remove_trait_pneumonic_assign_spell_category_effect = {
 }
 add_trait_great_pox_assign_spell_category_effect = {
 }
 remove_trait_great_pox_assign_spell_category_effect = {
 }
 add_trait_early_great_pox_assign_spell_category_effect = {
 }
 remove_trait_early_great_pox_assign_spell_category_effect = {
 }
 add_trait_lovers_pox_assign_spell_category_effect = {
 }
 remove_trait_lovers_pox_assign_spell_category_effect = {
 }
 add_trait_leper_assign_spell_category_effect = {
 }
 remove_trait_leper_assign_spell_category_effect = {
 }
 add_trait_cancer_assign_spell_category_effect = {
 }
 remove_trait_cancer_assign_spell_category_effect = {
 }
 add_trait_typhus_assign_spell_category_effect = {
 }
 remove_trait_typhus_assign_spell_category_effect = {
 }
 add_trait_smallpox_assign_spell_category_effect = {
 }
 remove_trait_smallpox_assign_spell_category_effect = {
 }
 add_trait_measles_assign_spell_category_effect = {
 }
 remove_trait_measles_assign_spell_category_effect = {
 }
 add_trait_dysentery_assign_spell_category_effect = {
 }
 remove_trait_dysentery_assign_spell_category_effect = {
 }
 add_trait_bubonic_plague_assign_spell_category_effect = {
 }
 remove_trait_bubonic_plague_assign_spell_category_effect = {
 }
 add_trait_incapable_assign_spell_category_effect = {
 }
 remove_trait_incapable_assign_spell_category_effect = {
 }
 add_trait_infirm_assign_spell_category_effect = {
 }
 remove_trait_infirm_assign_spell_category_effect = {
 }
 add_trait_lunatic_1_assign_spell_category_effect = {
 }
 remove_trait_lunatic_1_assign_spell_category_effect = {
 }
 add_trait_depressed_1_assign_spell_category_effect = {
 }
 remove_trait_depressed_1_assign_spell_category_effect = {
 }
 add_trait_depressed_genetic_assign_spell_category_effect = {
 }
 remove_trait_depressed_genetic_assign_spell_category_effect = {
 }
 add_trait_blind_assign_spell_category_effect = {
 }
 remove_trait_blind_assign_spell_category_effect = {
 }
 add_trait_drunkard_assign_spell_category_effect = {
 }
 remove_trait_drunkard_assign_spell_category_effect = {
 }
 add_trait_gluttonous_assign_spell_category_effect = {
 }
 remove_trait_gluttonous_assign_spell_category_effect = {
 }
 add_trait_lustful_assign_spell_category_effect = {
 }
 remove_trait_lustful_assign_spell_category_effect = {
 }
 add_trait_gregarious_assign_spell_category_effect = {
 }
 remove_trait_gregarious_assign_spell_category_effect = {
 }
 add_trait_hashishiyah_assign_spell_category_effect = {
 }
 remove_trait_hashishiyah_assign_spell_category_effect = {
 }
 add_trait_gh_elementalist_assign_spell_category_effect = {
 }
 remove_trait_gh_elementalist_assign_spell_category_effect = {
 }
 add_trait_lifestyle_physician_assign_spell_category_effect = {
 }
 remove_trait_lifestyle_physician_assign_spell_category_effect = {
 }
 add_trait_possessed_1_assign_spell_category_effect = {
 }
 remove_trait_possessed_1_assign_spell_category_effect = {
 }
 add_trait_gh_riftmark_assign_spell_category_effect = {
 }
 remove_trait_gh_riftmark_assign_spell_category_effect = {
 }
 add_trait_xp_scarred_assign_spell_category_effect = {
 }
 add_trait_xp_lifestyle_physician_assign_spell_category_effect = {
 }
 add_trait_xp_lifestyle_reveler_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_fire_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_water_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_air_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_stone_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_dream_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_dark_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_ice_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_death_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_blood_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_sand_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_metal_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_ethereal_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_celestial_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_nature_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_dawn_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_hymns_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_time_assign_spell_category_effect = {
 }
 add_trait_xp_gh_elementalist_magical_light_assign_spell_category_effect = {
 }
 add_trait_xp_gh_ritual_tattoos_assign_spell_category_effect = {
 }
 add_trait_xp_lifestyle_mystic_assign_spell_category_effect = {
 }
 spawn_army_horse_archers_assign_spell_category_effect = {
 }
 spawn_army_cloud_riders_assign_spell_category_effect = {
 }
 spawn_army_oltenic_horse_archers_assign_spell_category_effect = {
 }
 spawn_army_undead_horse_archers_assign_spell_category_effect = {
 }
 spawn_army_bowmen_assign_spell_category_effect = {
 }
 spawn_army_camel_rider_assign_spell_category_effect = {
 }
 spawn_army_war_elephant_assign_spell_category_effect = {
 }
 spawn_army_armored_horsemen_assign_spell_category_effect = {
 }
 spawn_army_light_horsemen_assign_spell_category_effect = {
 }
 spawn_army_armored_footmen_assign_spell_category_effect = {
 }
 spawn_army_pikemen_unit_assign_spell_category_effect = {
 }
 spawn_army_light_footmen_assign_spell_category_effect = {
 }
 spawn_army_onager_assign_spell_category_effect = {
 }
 spawn_army_griffon_riders_assign_spell_category_effect = {
 }
 spawn_army_magi_regular_assign_spell_category_effect = {
 }
 spawn_army_adventurers_assign_spell_category_effect = {
 }
 spawn_army_war_chariots_assign_spell_category_effect = {
 }
 spawn_army_fogbeasts_assign_spell_category_effect = {
 }
 spawn_army_blade_tendrils_assign_spell_category_effect = {
 }
 spawn_army_marrowdrones_assign_spell_category_effect = {
 }
 spawn_army_hungering_mouths_assign_spell_category_effect = {
 }
 spawn_army_chasm_terrors_assign_spell_category_effect = {
 }
 spawn_army_enfleshed_grotesquerie_assign_spell_category_effect = {
 }
 spawn_army_lesser_voidspawns_assign_spell_category_effect = {
 }
 spawn_army_archonarachs_assign_spell_category_effect = {
 }
 spawn_army_woodland_hydra_assign_spell_category_effect = {
 }
 spawn_army_elite_undead_assign_spell_category_effect = {
 }
 spawn_army_undead_skirmishers_assign_spell_category_effect = {
 }
 spawn_army_undead_bowmen_assign_spell_category_effect = {
 }
 spawn_army_siege_golems_assign_spell_category_effect = {
 }
 spawn_army_stone_golems_assign_spell_category_effect = {
 }
 spawn_army_magma_golems_assign_spell_category_effect = {
 }
 spawn_army_ice_golems_assign_spell_category_effect = {
 }
 spawn_army_bronze_golems_assign_spell_category_effect = {
 }
 spawn_army_metal_golems_assign_spell_category_effect = {
 }
 spawn_army_spirit_regular_assign_spell_category_effect = {
 }
 spawn_army_ethereal_elementals_assign_spell_category_effect = {
 }
 spawn_army_nature_elementals_assign_spell_category_effect = {
 }
 spawn_army_vine_elementals_assign_spell_category_effect = {
 }
 spawn_army_leshens_assign_spell_category_effect = {
 }
 spawn_army_water_elementals_assign_spell_category_effect = {
 }
 spawn_army_air_elementals_assign_spell_category_effect = {
 }
 spawn_army_lightning_elementals_assign_spell_category_effect = {
 }
 spawn_army_stone_elementals_assign_spell_category_effect = {
 }
 spawn_army_mountain_spirit_elementals_assign_spell_category_effect = {
 }
 spawn_army_fire_elementals_assign_spell_category_effect = {
 }
 spawn_army_ice_elementals_assign_spell_category_effect = {
 }
 spawn_army_metal_elementals_assign_spell_category_effect = {
 }
 spawn_army_quicksilver_elementals_assign_spell_category_effect = {
 }
 spawn_army_sand_elementals_assign_spell_category_effect = {
 }
 spawn_army_desert_mirage_elementals_assign_spell_category_effect = {
 }
 spawn_army_dune_reaper_elementals_assign_spell_category_effect = {
 }
 spawn_army_light_elementals_assign_spell_category_effect = {
 }
 spawn_army_seraph_melacham_assign_spell_category_effect = {
 }
 spawn_army_blood_elementals_assign_spell_category_effect = {
 }
 spawn_army_death_elementals_assign_spell_category_effect = {
 }
 spawn_army_dark_elementals_assign_spell_category_effect = {
 }
 spawn_army_night_gaunts_assign_spell_category_effect = {
 }
 spawn_army_celestial_elementals_assign_spell_category_effect = {
 }
 spawn_army_dream_elementals_assign_spell_category_effect = {
 }
 spawn_army_time_elementals_assign_spell_category_effect = {
 }
 spawn_army_elemental_choir_assign_spell_category_effect = {
 }
 spawn_army_epochal_riders_assign_spell_category_effect = {
 }
 add_diplomacy_skill_assign_spell_category_effect = {
 }
 reduce_diplomacy_skill_assign_spell_category_effect = {
 }
 add_intrigue_skill_assign_spell_category_effect = {
 }
 reduce_intrigue_skill_assign_spell_category_effect = {
 }
 add_stewardship_skill_assign_spell_category_effect = {
 }
 reduce_stewardship_skill_assign_spell_category_effect = {
 }
 add_martial_skill_assign_spell_category_effect = {
 }
 reduce_martial_skill_assign_spell_category_effect = {
 }
 add_learning_skill_assign_spell_category_effect = {
 }
 reduce_learning_skill_assign_spell_category_effect = {
 }
 add_prowess_skill_assign_spell_category_effect = {
 }
 reduce_prowess_skill_assign_spell_category_effect = {
 }
 add_aspect_fire_assign_spell_category_effect = {
 }
 add_aspect_water_assign_spell_category_effect = {
 }
 add_aspect_ice_assign_spell_category_effect = {
 }
 add_aspect_air_assign_spell_category_effect = {
 }
 add_aspect_stone_assign_spell_category_effect = {
 }
 add_aspect_dream_assign_spell_category_effect = {
 }
 add_aspect_celestial_assign_spell_category_effect = {
 }
 add_aspect_dark_assign_spell_category_effect = {
 }
 add_aspect_light_assign_spell_category_effect = {
 }
 add_aspect_blood_assign_spell_category_effect = {
 }
 add_aspect_nature_assign_spell_category_effect = {
 }
 add_aspect_ethereal_assign_spell_category_effect = {
 }
 add_aspect_hymns_assign_spell_category_effect = {
 }
 add_aspect_death_assign_spell_category_effect = {
 }
 add_aspect_sand_assign_spell_category_effect = {
 }
 add_aspect_metal_assign_spell_category_effect = {
 }
 add_aspect_time_assign_spell_category_effect = {
 }
 add_aspect_dawn_assign_spell_category_effect = {
 }
 add_diplomacy_lifestyle_xp_assign_spell_category_effect = {
 }
 add_intrigue_lifestyle_xp_assign_spell_category_effect = {
 }
 add_martial_lifestyle_xp_assign_spell_category_effect = {
 }
 add_stewardship_lifestyle_xp_assign_spell_category_effect = {
 }
 add_learning_lifestyle_xp_assign_spell_category_effect = {
 }
 add_arcana_lifestyle_xp_assign_spell_category_effect = {
 }
 add_mana_positive_assign_spell_category_effect = {
 }
 add_gold_positive_assign_spell_category_effect = {
 }
 remove_gold_negative_assign_spell_category_effect = {
 }
 stress_gain_assign_spell_category_effect = {
 }
 stress_loss_assign_spell_category_effect = {
 }
 death_effect_assign_spell_category_effect = {
 }
 improve_development_assign_spell_category_effect = {
 }
 reduce_development_assign_spell_category_effect = {
 }
 add_arcane_fallout_assign_spell_category_effect = {
 }
 remove_arcane_fallout_assign_spell_category_effect = {
 }
 resist_poison_assign_spell_category_effect = {
 }
 add_magic_baseline_positive_assign_spell_category_effect = {
 }
 learn_random_magic_school_spell_assign_spell_category_effect = {
 }
 damage_army_assign_spell_category_effect = {
 }
 education_lifestyle_xp_gain_mult_negative_assign_spell_category_effect = {
 }
 knight_summons_assign_spell_category_effect = {
 }
 improve_inspiration_quality_assign_spell_category_effect = {
 }
 dominate_character_assign_spell_category_effect = {
 }
 add_relevant_lifestyle_xp_assign_spell_category_effect = {
 }
 add_relevant_lifestyle_perk_points_assign_spell_category_effect = {
 }
 destroy_random_building_assign_spell_category_effect = {
 }
 add_spell_to_tattoo_list_assign_spell_category_effect = {
 }
 destroy_sun_assign_spell_category_effect = {
 }
 reduce_all_skills_assign_spell_category_effect = {
 }
 rank_up_education_effect_assign_spell_category_effect = {
 }
 reveal_secret_assign_spell_category_effect = {
 }
 freeze_target_character_assign_spell_category_effect = {
 }
 create_skeletal_artifact_assign_spell_category_effect = {
 }
 dream_glimpse_reality_assign_spell_category_effect = {
 }
 add_education_progress_assign_spell_category_effect = {
 }
 initiate_interior_journey_assign_spell_category_effect = {
 }
 increase_raid_capture_improvement_assign_spell_category_effect = {
 }