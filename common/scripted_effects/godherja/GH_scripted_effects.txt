everybody_loves_cenware = { # GH TODO: Should be made into a more general feature for the Imperrech, not specifically tied to anything
    every_vassal_or_below = {
		limit = {
			has_faith = faith:sjalvolki
		}

		add_opinion = {
			modifier = sjalvolki_core_vassal_opinion
			target = prev
		}
	}
	
    every_vassal_or_below = {
		limit = {
			OR = {
				has_faith = faith:apti
				has_faith = faith:gethian
				has_faith = faith:kakarataki
				has_faith = faith:kardawai
				has_faith = faith:partic
				has_faith = faith:portenchant
				has_faith = faith:praznarva # Check if this belongs here or above
				has_faith = faith:salacad
			}
		}

		add_opinion = {
			modifier = sjalvolki_coalition_vassal_opinion
			target = prev
		}
	}
}

# Pulls any independent character with a county in the target war title into the war.
multi_realm_invasion_join_war = {
	every_in_list = {
		list = target_titles
		save_scope_as = target_title
		every_de_jure_county_holder = {
			limit = {
				NOR = {
					this.top_liege = scope:attacker
					this.top_liege = scope:attacker.top_liege
					is_human = no
				}
			}
			top_liege = {
				if = {
					limit = { NOT = { is_defender_in_war = scope:war } }
					scope:war = {
						add_defender = prev
					}
				}
				every_vassal_or_below = {
					limit = {
						AND = {
							primary_title = {
								tier >= tier_county
							}
							NOT = {
								is_defender_in_war = scope:war
							}
						}
					}
					add_to_list = valid_vassals
				}
			}
		}
	}
	every_in_list = {
		list = valid_vassals
		trigger_event = {
			id = gh_war_event.4000
		}
	}
}

#shifts a title in the sjalvolki migration, but will only do so if the area is not held by a player
#after you grant the higher title to a character
#landed title scope
migrate_to_title = {
	holder = {
		save_scope_as = conqueror
	}
	create_title_and_vassal_change = {
		type = conquest
		save_scope_as = change
		add_claim_on_loss = no
	}
	every_in_de_jure_hierarchy = {
		limit = {
			holder = {
				is_ai = yes
			}
			holder.top_liege = scope:destroyer
			tier >= tier_county
		}
		
		IF = {
			limit = {
				tier = tier_county
			}
			set_county_culture = scope:conqueror.culture
			set_county_faith = scope:conqueror.faith

			# create_character = {
			# 	location = scope:conqueror.capital_province
			# 	gender_female_chance = 50
			# 	template_character = scope:conqueror
			# 	random_traits = yes
			# 	age = { 20 50 }
				
			# 	save_scope_as = fill
			# }
			# change_title_holder = {
			# 	holder = scope:fill
			# 	change = scope:change
			# }
			# scope:fill = {
			# 	change_liege = {
			# 		liege = scope:conqueror
			# 		change = scope:change
			# 	}
			# }
		}
	}
	
	# create_character = {
	# 	location = root.capital_province
	# 	gender_female_chance = 50
	# 	template_character = root
	# 	random_traits = yes
	# 	age = { 20 50 }
		
	# 	save_scope_as = fill
	# }
	#giving away temporary capital_province
	# scope:conqueror.capital_county = {
	# 	change_title_holder = {
	# 		holder = scope:fill
	# 		change = scope:change
	# 	}
	# }
	
	resolve_title_and_vassal_change = scope:change
}

# Same as above, but gives out duchies instead of counties. Mostly for Cenware because he takes a ton of land
migrate_to_title_duchy = {
	holder = {
		save_scope_as = conqueror
	}
	create_title_and_vassal_change = {
		type = conquest
		save_scope_as = change
		add_claim_on_loss = no
	}
	every_in_de_jure_hierarchy = {
		limit = {
			holder = {
				is_ai = yes
			}
			holder.top_liege = scope:conqueror
			tier >= tier_county
		}
		
		IF = {
			limit = {
				tier = tier_county
			}
			set_county_culture = scope:conqueror.culture
			set_county_faith = scope:conqueror.faith
		}
		ELSE_IF = {
			limit = {
				tier = tier_duchy
			}

			create_character = {
				location = scope:conqueror.capital_province
				gender_female_chance = 50
				template_character = scope:conqueror
				random_traits = yes
				age = { 20 50 }
				
				save_scope_as = fill
			}

			every_county = {
				limit = {
					duchy = prev
				}
				change_title_holder = {
					holder = scope:fill
					change = scope:change
				}
			}
			change_title_holder = {
				holder = scope:fill
				change = scope:change
			}
			scope:fill = {
				change_liege = {
					liege = scope:conqueror
					change = scope:change
				}
			}
		}
	}
	
	resolve_title_and_vassal_change = scope:change
}

#migrates away from previously held lands, except for one title
#make sure that this is done before migrate_to_title is done
#will give away all personally held counties, will grant independence to all vassals
#everyone but the person who activated the decision should have this effect
#character scope

migrate_from_lands = {
	capital_county ?= {
		save_scope_as = temp_province
		title_province = {
			save_scope_as = temp_title_province
		}
	}

	every_held_title = {
		limit = { tribal_title = yes }
		root = { destroy_title = prev }
	}

	create_title_and_vassal_change = {
		type = independency
		save_scope_as = change
		add_claim_on_loss = no
	}
	
	liege ?= { save_scope_as = former_liege }
	
	# Make sure they're not still under their old duke/king after migrating
	if = {
		limit = {
			exists = liege
			liege = { has_title_migrant_coalition_trigger = no }
		}
		change_liege = {
			CHANGE = scope:change
			LIEGE = root.top_liege
		}
		
		every_vassal = {
			limit = {
				primary_title.tier >= tier_county
			}
			change_liege = {
				CHANGE = scope:change
				LIEGE = root.top_liege
			}
		}
	}

	every_held_title = {
		limit = {
			NOR = {
				this = scope:temp_province
				tier = tier_barony
			}
		}
		if = {
			limit = {
				NOT = {
					this = scope:temp_province
				}
			}
			
			if = {
				limit = {
					has_variable = influx_culture
					has_variable = influx_faith
				}
				var:influx_culture = { save_temporary_scope_as = influx_culture }
				var:influx_faith = { save_temporary_scope_as = influx_faith }
				set_variable = protected_from_automatic_culture_conversion
				create_character = {
					location = scope:temp_title_province
					culture = scope:influx_culture
					faith = scope:influx_faith
					gender_female_chance = {
						if = {
							limit = { scope:influx_faith = { has_doctrine = doctrine_gender_male_dominated } }
							add = 0
						}
						else_if = {
							limit = { scope:influx_faith = { has_doctrine = doctrine_gender_female_dominated } }
							add = 100
						}
						else = {
							add = 50
						}
					}
					template_character = root
					random_traits = yes
					age = { 20 50 }
					
					save_scope_as = fill
				}
				set_county_culture = scope:influx_culture
				set_county_faith = scope:influx_faith
			}
			else_if = {
				limit = { 
					NOR = {
						scope:temp_province.culture = { has_cultural_pillar = heritage_aversarian }
						scope:temp_province.religion = religion:aversarinas_aagiokrata_religion
					}
				}
				create_character = {
					location = scope:temp_title_province
					culture = scope:temp_province.culture
					faith = scope:temp_province.faith
					template_character = root
					random_traits = yes
					gender_female_chance = {
						if = {
							limit = { scope:temp_province.faith = { has_doctrine = doctrine_gender_male_dominated } }
							add = 0
						}
						else_if = {
							limit = { scope:temp_province.faith = { has_doctrine = doctrine_gender_female_dominated } }
							add = 100
						}
						else = {
							add = 50
						}
					}
					
					save_scope_as = fill
				}
			}
			else = {
				create_character = {
					location = scope:temp_title_province
					culture = root.culture
					faith = root.faith
					gender_female_chance = {
						if = {
							limit = { root.faith = { has_doctrine = doctrine_gender_male_dominated } }
							add = 0
						}
						else_if = {
							limit = { root.faith = { has_doctrine = doctrine_gender_female_dominated } }
							add = 100
						}
						else = {
							add = 50
						}
					}
					template_character = root
					random_traits = yes
					age = { 20 50 }
					
					save_scope_as = fill
				}
			}
			scope:fill = { 
				add_character_flag = holdover_in_old_lands 
				add_character_flag = aversarian_migration
			}
			change_title_holder = {
				holder = scope:fill
				change = scope:change
			}
			scope:fill = {
				change_liege = {
					CHANGE = scope:change
					LIEGE = scope:former_liege
				}
			}
		}
	}
	resolve_title_and_vassal_change = scope:change
}	
#migrating from your current lands, but only if you keep your old vassals.
migrate_from_lands_keep = {
	capital_county ?= {
		save_scope_as = temp_province
	}

	create_title_and_vassal_change = {
		type = independency
		save_scope_as = change
		add_claim_on_loss = no
	}
	
	every_held_title = {
		limit = {
			NOR = {
				this = scope:temp_province
				this = root.primary_title
				tier = tier_barony
			}
		}
		
		create_character = {
			location = root.top_liege.capital_province
			gender_female_chance = 50
			template_character = root
			random_traits = yes
			age = { 20 50 }
			
			save_scope_as = fill
		}
		
		change_title_holder = {
			holder = scope:fill
			change = scope:change
		}
	}
	#keeping temporary capital_province
	scope:temp_province = {
		change_title_holder = {
			holder = root
			change = scope:change
		}
	}
	resolve_title_and_vassal_change = scope:change
}

generate_vassal_list = {
	# Get a list of all vassals of a set culture
	ordered_vassal_or_below = {
		limit = {
			culture = $CULTURE$
			primary_title.tier >= tier_county
			NOT = {
				has_character_flag = aversarian_migration
			}
		}
		order_by = primary_title.tier
		max = 500 # Check if there is a way to add all of them without setting a max

		add_to_list = $LIST$
	}

	# Get unlanded courtiers fitting the criteria

	# If none were found, generate one
	IF = {
		limit = {
			list_size = {
				name = $LIST$
				value = 0
			}
		}

		create_character = {
			employer = root
			gender_female_chance = 50
			template_character = root
			culture = $CULTURE$
			faith = $FAITH$
			random_traits = yes
			age = { 20 50 }

			save_scope_as = generated_character
		}

		scope:generated_character = {
			add_to_list = $LIST$
		}
	}
}

generate_title_list = {
	every_in_list = {
		list = $INPUT_LIST$

		every_in_de_jure_hierarchy = {
			IF = {
				limit = {
					tier = tier_duchy
					any_de_jure_county_holder = {
						top_liege = scope:destroyer
					}
					is_title_created = yes
				}
				#random_list = {
				#	40 = {
				#		add_to_list = $OUTPUT_DUCHIES$
				#	}
				#	60 = {}
				#}
				add_to_list = $OUTPUT_DUCHIES$
			}
			ELSE_IF = {
				limit = {
					tier = tier_county
					holder.top_liege = scope:destroyer
				}
				add_to_list = $OUTPUT_COUNTIES$
			}
		}
	}
}

change_de_jure_liege_conditional = {
	if = {
		limit = {
			title:$TITLE$ = {
				de_jure_liege = {
					NOT = { this = title:$NOT_ALREADY_PART_OF$ }
				}
			}
		}
		title:$TITLE$ = { set_de_jure_liege_title = title:$NEW_DE_JURE_LIEGE$ }
	}
}

rebuild_title_hierarchy = {
	create_title_and_vassal_change = {
		type = granted
		save_scope_as = change
		add_claim_on_loss = no
	}
	holder = { save_temporary_scope_as = rebuilding_title_holder }

	every_in_de_jure_hierarchy = {
		limit = {
			is_title_created = yes
			trigger_if = {
				limit = { exists = holder }
				holder = {
					primary_title.tier >= tier_county
					top_liege = scope:rebuilding_title_holder.top_liege
					NOR = {
						primary_title.tier >= scope:rebuilding_title_holder.primary_title.tier
						liege = primary_title.de_jure_liege.holder
						any_liege_or_above = {
							protected_from_title_rebuilding = yes
						}
					}
				}
			}
			trigger_else = {
				always = no
			}
		}
		holder = {
			IF = {
				limit = {
					primary_title.tier = tier_county
				}

				IF = {
					limit = {
						exists = primary_title.duchy.holder
					}
					
					# 95%, 4.8%, 0.2%
					random_list = {
						475 = {
							change_liege = {
								liege = primary_title.duchy.holder
								change = scope:change
							}
						}
						24 = {
							change_liege = {
								liege = primary_title.kingdom.holder
								change = scope:change
							}
						}
						#1 = {
						#	change_liege = {
						#		liege = scope:destroyer
						#		change = scope:change
						#	}
						#}
					}
				}
				ELSE = {
					random_list = {
						95 = {
							change_liege = {
								liege = primary_title.kingdom.holder
								change = scope:change
							}
						}
						#5 = {
						#	change_liege = {
						#		liege = scope:destroyer
						#		change = scope:change
						#	}
						#}
					}
				}
			}
			ELSE_IF = {
				limit = {
					primary_title.tier = tier_duchy
				}

				random_list = {
					90 = {
						change_liege = {
							liege = primary_title.kingdom.holder
							change = scope:change
						}
					}
					#10 = {
					#	change_liege = {
					#		liege = scope:destroyer
					#		change = scope:change
					#	}
					#}
				}
			}
			#ELSE_IF = {
			#	limit = {
			#		primary_title.tier = tier_kingdom
			#	}
			#	change_liege = {
			#		liege = scope:destroyer
			#		change = scope:change
			#	}
			#}
		}
	}

	resolve_title_and_vassal_change = scope:change
}

rebuild_title_hierarchy_dukes = {
	create_title_and_vassal_change = {
		type = granted
		save_scope_as = change
		add_claim_on_loss = no
	}
	holder = { save_temporary_scope_as = rebuilding_title_holder }

	every_in_de_jure_hierarchy = {
		limit = {
			is_title_created = yes
			trigger_if = {
				limit = { exists = holder }
				holder = {
					primary_title.tier >= tier_county
					NOR = {
						primary_title.tier >= scope:rebuilding_title_holder.primary_title.tier
						liege = primary_title.de_jure_liege.holder
						any_liege_or_above = {
							protected_from_title_rebuilding = yes
						}
					}
				}
			}
			trigger_else = {
				always = no
			}
		}
		holder = {
			IF = {
				limit = {
					primary_title.tier = tier_county
				}

				IF = {
					limit = {
						exists = primary_title.duchy.holder
					}
					
					# 95%, 4.8%, 0.2%
					random_list = {
						475 = {
							change_liege = {
								liege = primary_title.duchy.holder
								change = scope:change
							}
						}
						140 = { }
					}
				}
			}
		}
	}
	resolve_title_and_vassal_change = scope:change
}

debug_check_migrators = {
	debug_log = debug_check_migrators
	every_ruler = {
		limit = {
			has_character_flag = aversarian_migration
		}

		debug_log_scopes = no
	}
}

debug_set_magic_number = { # sets everyone's magic counter to NUM
	every_living_character = {
		limit = { has_variable = magic_counter }
		set_variable = {
			name = magic_counter
			value = $NUM$
		}
	}
}

aironoi_free_slaves_effect = { # End slavery effects
	# add_trait = reformer
	if = {
		limit = {
			NOT = {
				has_character_modifier = freed_slaves
			}
		}
		add_character_modifier = freed_slaves
	}
	custom_tooltip = aironoi_free_slaves_effect_tt
}

asiupoli_free_slaves_effect = { # Emancipation
	give_nickname = nick_the_uniter
	custom_tooltip = aironoi_free_slaves_effect_tt
}

devastate_county = {
	change_development_level = -100
	add_county_modifier = extreme_devastation
	every_county_province = {
		limit = { has_special_building_slot = no }
		set_holding_type = wasteland_empty_holding
	}
	every_county_province = {
		limit = { has_special_building_slot = yes }
		set_holding_type = ruin_holding
	}
}

clear_truces = {
	every_truce_target = {
		cancel_truce_both_ways = root
	}
}

generate_web_of_intrigue = {
	if = {
		limit = { is_independent_ruler = no }
		save_temporary_scope_as = web_builder
		top_liege = {
			while = {
				count = 2
				ordered_vassal = {
					limit = { 
						highest_held_title_tier >= tier_county
						NOT = { scope:web_builder = { has_strong_usable_hook = prev } } 
						NOT = { this = scope:web_builder }
					}
					order_by = highest_held_title_tier
					save_temporary_scope_as = blackmailed_vassal
					scope:web_builder = {
						add_hook = {
							target = scope:blackmailed_vassal
							type = loyalty_hook
						}
					}
				}
			}
			while = {
				count = 3
				ordered_vassal = {
					limit = { 
						highest_held_title_tier >= tier_county
						NOT = { scope:web_builder = { has_strong_usable_hook = prev } } 
						NOT = { this = scope:web_builder }
					}
					order_by = highest_held_title_tier
					save_temporary_scope_as = blackmailed_vassal
					scope:web_builder = {
						add_hook = {
							target = scope:blackmailed_vassal
							type = loyalty_hook
						}
					}
				}
			}
		}
	}
}

copy_global_variable_into_local = {
	if = {
		limit = { exists = global_var:$GLOBAL_VAR$ }
		set_variable = {
			name = $GLOBAL_VAR$
			value = global_var:$GLOBAL_VAR$
		}
	}
}

release_disconnected_counties = {
	remove_character_flag = delayed_cleanse
	save_temporary_scope_as = root_scope
	
	scope:root_scope.capital_province.county = {
		every_connected_county = { # Start off by making a list of all disconnected Counties
			invert = yes
			max_naval_distance = 2000
			add_to_list = disconnected_counties
		}
	}
	
	every_in_list = {
		list = disconnected_counties
		
		limit = {
			any_connected_county = {
				NOT = { is_in_list = disconnected_counties }
				max_naval_distance = 2000
			}
		}
		add_to_list = cull_naval_connection_counties
	}
	
	while = {
		limit = {
			any_in_list = {
				list = cull_naval_connection_counties
			}
		}
		random_in_list = {
			list = cull_naval_connection_counties
			
			save_scope_as = cull_origin_county
			
			every_connected_county = {
				remove_from_list = cull_naval_connection_counties
				remove_from_list = disconnected_counties
			}
			remove_from_list = cull_naval_connection_counties
			remove_from_list = disconnected_counties
		}
	}
	
	every_in_list = { # Release Kings first
		list = disconnected_counties
		
		limit = {
			holder.primary_title.tier = tier_kingdom
			NOR = {
				holder = scope:root_scope
				holder = {
					any_sub_realm_title = {
						tier = tier_county
						NOT = { is_in_list = disconnected_counties }
					}
				}
			}
		}
		holder = {
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = yes
			}
			becomes_independent = {
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
		}
	}
	
	every_in_list = { # Release Dukes second
		list = disconnected_counties
		
		limit = {
			holder.primary_title.tier = tier_duchy
			NOR = {
				holder = scope:root_scope
				holder = {
					any_sub_realm_title = {	
						tier = tier_county
						NOT = { is_in_list = disconnected_counties }
					}
				}
			}
		}
		holder = {
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = yes
			}
			becomes_independent = {
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
		}
	}
	
	every_in_list = { # Release Counts last
		list = disconnected_counties
		
		limit = {
			holder.primary_title.tier = tier_county
			NOR = {
				holder = scope:root_scope
				holder = {
					any_sub_realm_title = {
						tier = tier_county
						NOT = { is_in_list = disconnected_counties }
					}
				}
			}
		}
		holder = {
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = yes
			}
			becomes_independent = {
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
		}
	}
	
	every_in_list = { # Finally, release contiguous areas under someone from the pool
		list = disconnected_counties
		
		limit = {
			OR = {
				holder.top_liege = scope:root_scope
				holder = scope:root_scope
			}
		}
		
		save_scope_as = county_of_origin
		
		every_pool_character = {
			province = scope:county_of_origin.title_province
			limit = {
				is_available_adult = yes
			}
			add_to_list = potential_holders
		}
		
		every_pool_character = {
			province = scope:county_of_origin.holder.capital_province
			limit = {
				is_available_adult = yes
			}
			add_to_list = potential_holders
		}
		
		if = {
			limit = {
				NOT = {
					any_in_list = {
						list = potential_holders
						is_available_adult = yes
					}
				}
			}
			create_character = {
				location = scope:county_of_origin.title_province
				culture = scope:county_of_origin.culture
				faith = scope:county_of_origin.faith
				gender_female_chance = 50
				age = 32
				save_scope_as = backup_character
			}
			scope:backup_character = {
				add_to_list = potential_holders
			}
		}
		
		random_in_list = {
			list = potential_holders
			limit = {
				is_available_adult = yes
				has_claim_on = scope:county_of_origin
				faith = {
					has_dominant_ruling_gender = prev
				}
			}
			alternative_limit = {
				is_available_adult = yes
				culture = scope:county_of_origin.culture
				faith = scope:county_of_origin.faith
				faith = {
					has_dominant_ruling_gender = prev
				}
			}
			alternative_limit = {
				is_available_adult = yes
				culture = scope:county_of_origin.culture
				faith = {
					has_dominant_ruling_gender = prev
				}
			}
			alternative_limit = {
				is_available_adult = yes
				faith = scope:county_of_origin.faith
				faith = {
					has_dominant_ruling_gender = prev
				}
			}
			alternative_limit = {
				is_available_adult = yes
				faith = {
					has_dominant_ruling_gender = prev
				}
			}
			alternative_limit = {
				is_available_adult = yes
				has_claim_on = scope:county_of_origin
			}
			alternative_limit = {
				is_available_adult = yes
				culture = scope:county_of_origin.culture
				faith = scope:county_of_origin.faith
			}
			alternative_limit = {
				is_available_adult = yes
				culture = scope:county_of_origin.culture
			}
			alternative_limit = {
				is_available_adult = yes
				faith = scope:county_of_origin.faith
			}
			alternative_limit = {
				is_available_adult = yes
			}
			
			save_scope_as = new_county_holder
			#get_title = scope:county_of_origin
			
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = yes
			}
			every_in_list = {
				list = disconnected_counties
				limit = {
					OR = {
						holder.top_liege = scope:root_scope
						holder = scope:root_scope
					}
					is_connected_to = {
						target = scope:county_of_origin
					}
					NOT ={
						is_connected_to = {
							target = scope:root_scope.capital_province.county
						}
					}
				}
				change_title_holder = {
					holder = scope:new_county_holder
					change = scope:change
				}
				#scope:new_county_holder = { get_title = prev }
			}
			becomes_independent = {
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
			if = { # Just in case they need to create a duchy
				limit = {
					gold < 500
				}
				add_gold = 500
			}
		}
	}
}

initialize_influx_cultures_kalathipsomi = {	# Determines which culture gets what in Kalathipsomi after the Sjalvolki leave
	title:k_heartwood = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_duchy }
			random_list = {
				3 = {
					every_in_de_jure_hierarchy = {
						limit = { tier = tier_county }
						set_variable = {
							name = influx_culture
							value = culture:bricotaves
						}
						set_variable = {
							name = influx_faith
							value = faith:mothers_and_fathers
						}
					}
				}
				3 = {
					every_in_de_jure_hierarchy = {
						limit = { tier = tier_county }
						set_variable = {
							name = influx_culture
							value = culture:corvosnari
						}
						set_variable = {
							name = influx_faith
							value = faith:mothers_and_fathers
						}
					}
				}
				3 = {
					every_in_de_jure_hierarchy = {
						limit = { tier = tier_county }
						set_variable = {
							name = influx_culture
							value = culture:ardothanes
						}
						set_variable = {
							name = influx_faith
							value = faith:mothers_and_fathers
						}
					}
				}
			}
		}
	}
	# Some regions always get settled by predetermined cultures, to make sure they have a place to live
	title:k_redwald = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:auteonic
			}
			set_variable = {
				name = influx_faith
				value = faith:partic
			}
		}
	}
	title:k_westhold = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:ordikin
			}
			set_variable = {
				name = influx_faith
				value = faith:wyrdpath
			}
		}
	}
	title:d_cascadia = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:brigandines
			}
			set_variable = {
				name = influx_faith
				value = faith:partic
			}
		}
	}
	title:d_oakendale = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:ardothanes
			}
			set_variable = {
				name = influx_faith
				value = faith:wyrdpath
			}
		}
	}
	title:d_leafsea = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:bricotaves
			}
			set_variable = {
				name = influx_faith
				value = faith:wyrdpath
			}
		}
	}
	title:d_honeyreach = {
		random_list = {
			50 = {
				every_in_de_jure_hierarchy = {
					limit = { tier = tier_county }
					set_variable = {
						name = influx_culture
						value = culture:bricotaves
					}
					set_variable = {
						name = influx_faith
						value = faith:mothers_and_fathers
					}
				}
			}
			25 = {
				every_in_de_jure_hierarchy = {
					limit = { tier = tier_county }
					set_variable = {
						name = influx_culture
						value = culture:bricotaves
					}
					set_variable = {
						name = influx_faith
						value = faith:wyrdpath
					}
				}
			}
			50 = {
				every_in_de_jure_hierarchy = {
					limit = { tier = tier_county }
					set_variable = {
						name = influx_culture
						value = culture:huegodocs
					}
					set_variable = {
						name = influx_faith
						value = faith:apti
					}
				}
			}
		}
	}
	title:d_stormhook = {
		if = {
			limit = { holder.culture = { has_cultural_pillar = heritage_kardwen } }
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_county }
				set_variable = {
					name = influx_culture
					value = culture:kardwens
				}
				set_variable = {
					name = influx_faith
					value = faith:kardawai
				}
			}
		}
		else = {
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_county }
				set_variable = {
					name = influx_culture
					value = culture:corvosnari
				}
				set_variable = {
					name = influx_faith
					value = faith:wyrdpath
				}
			}
		}
	}
	title:d_murkwood = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:corvosnari
			}
			set_variable = {
				name = influx_faith
				value = faith:wyrdpath
			}
		}
	}
	title:d_agaricea = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:karzarads
			}
			set_variable = {
				name = influx_faith
				value = faith:kakarataki
			}
		}
	}
	title:d_mistwatch = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:karzarads
			}
			set_variable = {
				name = influx_faith
				value = faith:kakarataki
			}
		}
	}
	title:k_skycrown ={
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:ardothanes
			}
			set_variable = {
				name = influx_faith
				value = faith:mothers_and_fathers
			}
		}
	}
	title:d_antaphos = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:mondecny
			}
			set_variable = {
				name = influx_faith
				value = faith:portenchant
			}
		}
	}
	title:d_oedi = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:skorikiakas
			}
			set_variable = {
				name = influx_faith
				value = faith:aversarinas_aagiokrata
			}
		}
	}
	title:d_oios = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:skorikiakas
			}
			set_variable = {
				name = influx_faith
				value = faith:aversarinas_aagiokrata
			}
		}
	}
	title:d_knokidbes = {
		if = {
			limit = { holder.culture = { has_cultural_pillar = heritage_mondecny } }
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_county }
				set_variable = {
					name = influx_culture
					value = culture:mondecny
				}
				set_variable = {
					name = influx_faith
					value = faith:portenchant
				}
			}
		}
		else = {
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_county }
				set_variable = {
					name = influx_culture
					value = culture:corvosnari
				}
				set_variable = {
					name = influx_faith
					value = faith:mothers_and_fathers
				}
			}
		}
	}
	title:d_gelale = {
		if = {
			limit = { holder.culture = { has_cultural_pillar = heritage_mondecny } }
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_county }
				set_variable = {
					name = influx_culture
					value = culture:mondecny
				}
				set_variable = {
					name = influx_faith
					value = faith:portenchant
				}
			}
		}
		else = {
			every_in_de_jure_hierarchy = {
				limit = { tier = tier_county }
				set_variable = {
					name = influx_culture
					value = culture:corvosnari
				}
				set_variable = {
					name = influx_faith
					value = faith:mothers_and_fathers
				}
			}
		}
	}
	title:d_moorende = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:bricotaves
			}
			set_variable = {
				name = influx_faith
				value = faith:mothers_and_fathers
			}
		}
	}
	title:k_cornucopia = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_county }
			set_variable = {
				name = influx_culture
				value = culture:ordikin
			}
			set_variable = {
				name = influx_faith
				value = faith:wyrdpath
			}
		}
	}
}

transfer_to_new_de_jure_if_not_controlled_effect = {
	if = {
		limit = {
			OR = {
				# Title should always break off if the old de jure liege outright doesn't exist 
				NOT = { exists = de_jure_liege.holder }
				# If a holder of the title itself exists, check if they're either the de jure liege themselves or a vassal
				trigger_if = {
					limit = { exists = holder }
					holder = {
						NOR = {
							this = prev.de_jure_liege.holder
							is_vassal_or_below_of = prev.de_jure_liege.holder
						}
					}
				}
				trigger_else = {
					# If the title itself doesn't exist, check if the de jure liege de facto controls the entirety of its de jure land
					NOT = {
						de_jure_liege.holder = { completely_controls = prev }
					}
				}
			}
		}
		set_de_jure_liege_title = $NEW_DE_JURE_LIEGE$
		$NEW_DE_JURE_LIEGE$ = { add_to_list = new_de_jure_title_list }	# Needed for later cleanup of titles that are too small
	}
}

transfer_to_new_de_jure_if_not_controlled_cleanup_immunity_effect = {
	transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = $NEW_DE_JURE_LIEGE$ }
	if = {
		limit = { is_in_list = new_de_jure_title_list }
		remove_from_list = new_de_jure_title_list
	}
}

clear_rump_dissolution_empires_effect = {
	if = {
		limit = { exists = $DEFAULT_DE_JURE_LIEGE$.holder }
		every_in_list = {
			list = new_de_jure_title_list
			if = {
				limit = { direct_de_jure_vassals_value < 2 }
				every_in_de_jure_hierarchy = {
					limit = { tier = prev.direct_de_jure_vassal_tier_value }
					set_de_jure_liege_title = $DEFAULT_DE_JURE_LIEGE$
				}
			}
			remove_from_list = new_de_jure_title_list
		}
	}
}

dissolve_aversarian_titles = {
	#if = {
	#	limit = {
	#		NOT = {
	#			title:e_etepezea = {
	#				exists = holder
	#			}
	#		}
	#	}
	#	dissolve_etepezea_effect = yes
	#}
	#if = {
	#	limit = {
	#		NOT = {
	#			title:e_cornucopia = {
	#				exists = holder
	#			}
	#		}
	#	}
	#	dissolve_cornucopia_effect = yes
	#}
	#if = {	
	#	limit = {
	#		NOT = {
	#			title:e_the_reach = {
	#				exists = holder
	#			}
	#		}
	#	}
	#	dissolve_the_reach_effect = yes
	#}
	#if = {	
	#	limit = {
	#		NOR = {
	#			title:e_gurdurbok = {
	#				exists = holder
	#			}
	#			title:e_aversaria_voreias = {
	#				exists = holder
	#			}
	#		}
	#	}
	#	dissolve_gurdurbok_effect = yes
	#}
	#if = {	
	#	limit = {
	#		NOT = {
	#			title:e_malcois = {
	#				exists = holder
	#			}
	#		}
	#	}
	#	dissolve_malcois_effect = yes
	#}
	if = {	
		limit = {
			NOT = {
				title:e_opakhasia = {
					exists = holder
				}
			}
		}
		title:e_opakhasia = {
			set_title_name = e_opakhasia
			set_color_from_title = title:d_mountain_sun_temple_rel 
		}
	}
	if = {	
		limit = {
			NOT = {
				title:e_aironoi = {
					exists = holder
				}
			}
		}
		dissolve_aironoi_effect = yes
	}
}

dissolve_etepezea_effect = {
	title:k_palitake = {
		set_de_jure_liege_title = title:e_oraissos
	}
	title:k_kollos = {
		set_de_jure_liege_title = title:e_elarinea
	}
	title:k_pergicos = {
		set_de_jure_liege_title = title:e_antyrigos
	}
	title:k_assocaea = {
		set_de_jure_liege_title = title:e_antyrigos
	}
}

#dissolve_cornucopia_effect = {
#	title:k_schouweiler = {
#		set_de_jure_liege_title = title:e_elysiara
#	}
#	title:k_cornucopia = {
#		set_de_jure_liege_title = title:e_kovgardr
#	}
#	title:k_redwald = {
#		set_de_jure_liege_title = title:e_kovgardr
#	}
#	title:k_pearlcoast = {
#		set_de_jure_liege_title = title:e_thalsia
#	}
#}
#
#dissolve_the_reach_effect = {
#	title:k_everrain = {
#		set_de_jure_liege_title = title:e_marsolm
#	}
#	title:k_heartwood = {
#		set_de_jure_liege_title = title:e_kranowa
#	}
#	title:k_skycrown = {
#		set_de_jure_liege_title = title:e_mohejval
#	}
#	title:k_easternkatraddia8 = {
#		set_de_jure_liege_title = title:e_mohejval
#	}
#}

dissolve_gurdurbok_effect = {
	title:k_niidinia = {
		set_de_jure_liege_title = title:e_dethixos
	}
	title:k_vyshtanka = {
		set_de_jure_liege_title = title:e_dethixos
	}
	#title:k_aldergreen = {
	#	set_de_jure_liege_title = title:e_kerelai
	#}
}

dissolve_malcois_effect = {
	title:k_kallios = {
		set_de_jure_liege_title = title:e_thalsia
	}
	title:k_helenai = {
		set_de_jure_liege_title = title:e_thalsia
	}
	title:k_adgos = {
		set_de_jure_liege_title = title:e_mytidon
	}
	title:k_mytidon = {
		set_de_jure_liege_title = title:e_mytidon
	}
	title:k_cyrocaea = {
		set_de_jure_liege_title = title:e_pathaea
	}
	title:k_kasmiene = {
		set_de_jure_liege_title = title:e_partharia
	}
}

dissolve_opakhasia_effect = {
	title:k_eve = {
		set_de_jure_liege_title = title:e_tinitidos
	}
	title:k_suncourt = {
		set_de_jure_liege_title = title:e_diosemosae
	}
	# title:k_opakoutercrescent = {
	# 	set_de_jure_liege_title = title:e_diosemosae
	# }
	title:k_day = {
		set_de_jure_liege_title = title:e_tomaria
	}
	title:k_morn = {
		set_de_jure_liege_title = title:e_tomaria
	}
	#title:k_karros = {
	#	set_de_jure_liege_title = title:e_red_waste
	#}
}

dissolve_aironoi_effect = {
	title:k_hyrea = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_asiupoliox }
	}
	title:k_kalliados = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_asiupoliox }
	}
	title:k_kteumaxa = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_asiupoliox }
	}
	title:k_arderwan = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_olteneria }
	}
	title:k_muthathk = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_olteneria }
	}
	title:k_ijardigarrn = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_redlands }
	}
	title:k_dethskel = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_redlands }
	}
	title:k_krehejad = {
		transfer_to_new_de_jure_if_not_controlled_cleanup_immunity_effect = { NEW_DE_JURE_LIEGE = title:e_krehejad }
	}
	title:k_taykovi = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_anokryosae }
	}
	title:k_arbaz = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_anokryosae }
	}
	title:k_aryvann_vos = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_anokryosae }
	}
	title:k_dartar = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_muwagahn }
	}
	title:k_anthygal = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_kosiros }
	}
	title:k_chvor = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_kosiros }
	}
	title:k_svatavego = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_amaghea }
	}
	title:k_coluehis = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_amaghea }
	}
	title:k_svanti = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_amaghea }
	}
	title:k_imrezstav = {
		transfer_to_new_de_jure_if_not_controlled_effect = { NEW_DE_JURE_LIEGE = title:e_amaghea }
	}
	clear_rump_dissolution_empires_effect = { DEFAULT_DE_JURE_LIEGE = title:e_aironoi }
}

legio_xcv_reborn_scripted_effect = {
	create_title_and_vassal_change = {
		type = created
		save_scope_as = title_change
		add_claim_on_loss = no
	}
	title:k_legio_xcv_viesuados = {
		change_title_holder = {
			holder = scope:founder
			change = scope:title_change
		}
	}
	resolve_title_and_vassal_change = scope:title_change

	spawn_army = {
		levies = 500
		men_at_arms = {
			type = legion_marines
			stacks = 5
		}
		location = capital_province
		name = xcv_marines
	}
}

scourge_of_rovarska_effect = {
	dynasty = {
		add_dynasty_modifier = {
			modifier = fp1_legacy_of_piracy_modifier
			years = 100
		}
	}
	add_character_modifier = {
		modifier = scourge_of_rovarska
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = title_change
		add_claim_on_loss = no
	}
	title:e_pirate_coast = {
		change_title_holder = {
			holder = scope:founder
			change = scope:title_change
		}
	}
	resolve_title_and_vassal_change = scope:title_change
	set_primary_title_to = title:e_pirate_coast
}

kinilam_legitimacy_effect = {
	if = {
		limit = { has_character_modifier = kinilam_regency_modifier }
		remove_character_modifier = kinilam_regency_modifier
	}
	add_character_modifier = {
		modifier = legitimate_kinilam_ruler
	}
	dynasty = {
		add_dynasty_modifier = {
			modifier = legitimate_heirs_to_kinilam
			years = 80
		}
	}
	destroy_title = title:k_kinilam_regency
}

dergi_garden_effect = {
	if = {
		limit = {
			title_province = { has_building = dergi_garden_01 }
		}
		title_province = { remove_building = dergi_garden_01 }
		title_province = { add_building = dergi_garden_02 }
	}
	else_if = {
		limit = {
			title_province = { has_building = dergi_garden_02 }
		}
		title_province = { remove_building = dergi_garden_02 }
		title_province = { add_building = dergi_garden_03 }
	}
	else_if = {
		limit = {
			title_province = { has_building = dergi_garden_03 }
		}
		title_province = { remove_building = dergi_garden_03 }
		title_province = { add_building = dergi_garden_01 }
	}
}

defiled_nadir_skills_setup_effect = {
	set_variable = {
		name = defiled_nadir_diplomacy
		value = 0
	}
	set_variable = {
		name = defiled_nadir_martial
		value = 0
	}
	set_variable = {
		name = defiled_nadir_stewardship
		value = 0
	}
	set_variable = {
		name = defiled_nadir_stewardship
		value = 0
	}
	set_variable = {
		name = defiled_nadir_intrigue
		value = 0
	}
	set_variable = {
		name = defiled_nadir_learning
		value = 0
	}
	set_variable = {
		name = defiled_nadir_arcana
		value = 0
	}
}

defiled_nadir_education_scripted_effect = {
	artifact_owner = {
		if = {
			limit = { has_education_diplomacy_trigger = yes }
			if = {
				limit = { has_trait = education_diplomacy_1 }
				prev = {
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_monthly_diplomacy_lifestyle_xp_2_modifier
					change_variable = {
						name = defiled_nadir_diplomacy
						add = 1
					}
				}
			}
			else_if = {
				limit = { has_trait = education_diplomacy_2 }
				prev = {
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_monthly_diplomacy_lifestyle_xp_3_modifier
					change_variable = {
						name = defiled_nadir_diplomacy
						add = 2
					}
				}
			}
			else_if = {
				limit = { has_trait = education_diplomacy_3 }
				prev = {
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_monthly_diplomacy_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_diplomacy
						add = 3
					}
				}
			}
			else_if = {
				limit = { has_trait = education_diplomacy_4 }
				prev = {
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_monthly_diplomacy_lifestyle_xp_1_modifier
					add_artifact_modifier = artifact_monthly_diplomacy_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_diplomacy
						add = 4
					}
				}
			}
			else = {
				prev = {
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_diplomacy_1_modifier
					add_artifact_modifier = artifact_monthly_diplomacy_lifestyle_xp_2_modifier
					add_artifact_modifier = artifact_monthly_diplomacy_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_diplomacy
						add = 5
					}
				}
			}
		}
		else_if = {
			limit = { has_education_martial_trigger = yes }
			if = {
				limit = { has_trait = education_martial_1 }
				prev = {
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_monthly_martial_lifestyle_xp_2_modifier
					change_variable = {
						name = defiled_nadir_martial
						add = 1
					}
				}
			}
			else_if = {
				limit = { has_trait = education_martial_2 }
				prev = {
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_monthly_martial_lifestyle_xp_3_modifier
					change_variable = {
						name = defiled_nadir_martial
						add = 2
					}
				}
			}
			else_if = {
				limit = { has_trait = education_martial_3 }
				prev = {
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_monthly_martial_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_martial
						add = 3
					}
				}
			}
			else_if = {
				limit = { has_trait = education_martial_4 }
				prev = {
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_monthly_martial_lifestyle_xp_1_modifier
					add_artifact_modifier = artifact_monthly_martial_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_martial
						add = 4
					}
				}
			}
			else = {
				prev = {
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_martial_1_modifier
					add_artifact_modifier = artifact_monthly_martial_lifestyle_xp_2_modifier
					add_artifact_modifier = artifact_monthly_martial_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_martial
						add = 5
					}
				}
			}
		}
		else_if = {
			limit = { has_education_stewardship_trigger = yes }
			if = {
				limit = { has_trait = education_stewardship_1 }
				prev = {
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_monthly_stewardship_lifestyle_xp_2_modifier
					change_variable = {
						name = defiled_nadir_stewardship
						add = 1
					}
				}
			}
			else_if = {
				limit = { has_trait = education_stewardship_2 }
				prev = {
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_monthly_stewardship_lifestyle_xp_3_modifier
					change_variable = {
						name = defiled_nadir_stewardship
						add = 2
					}
				}
			}
			else_if = {
				limit = { has_trait = education_stewardship_3 }
				prev = {
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_monthly_stewardship_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_stewardship
						add = 3
					}
				}
			}
			else_if = {
				limit = { has_trait = education_stewardship_4 }
				prev = {
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_monthly_stewardship_lifestyle_xp_1_modifier
					add_artifact_modifier = artifact_monthly_stewardship_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_stewardship
						add = 4
					}
				}
			}
			else = {
				prev = {
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_stewardship_1_modifier
					add_artifact_modifier = artifact_monthly_stewardship_lifestyle_xp_2_modifier
					add_artifact_modifier = artifact_monthly_stewardship_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_stewardship
						add = 5
					}
				}
			}
		}
		else_if = {
			limit = { has_education_intrigue_trigger = yes }
			if = {
				limit = { has_trait = education_intrigue_1 }
				prev = {
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_monthly_intrigue_lifestyle_xp_2_modifier
					change_variable = {
						name = defiled_nadir_intrigue
						add = 1
					}
				}
			}
			else_if = {
				limit = { has_trait = education_intrigue_2 }
				prev = {
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_monthly_intrigue_lifestyle_xp_3_modifier
					change_variable = {
						name = defiled_nadir_intrigue
						add = 2
					}
				}
			}
			else_if = {
				limit = { has_trait = education_intrigue_3 }
				prev = {
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_monthly_intrigue_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_intrigue
						add = 3
					}
				}
			}
			else_if = {
				limit = { has_trait = education_intrigue_4 }
				prev = {
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_monthly_intrigue_lifestyle_xp_1_modifier
					add_artifact_modifier = artifact_monthly_intrigue_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_intrigue
						add = 4
					}
				}
			}
			else = {
				prev = {
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_intrigue_1_modifier
					add_artifact_modifier = artifact_monthly_intrigue_lifestyle_xp_2_modifier
					add_artifact_modifier = artifact_monthly_intrigue_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_intrigue
						add = 5
					}
				}
			}
		}
		else_if = {
			limit = { has_education_learning_trigger = yes }
			if = {
				limit = { has_trait = education_learning_1 }
				prev = {
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_2_modifier
					change_variable = {
						name = defiled_nadir_learning
						add = 1
					}
				}
			}
			else_if = {
				limit = { has_trait = education_learning_2 }
				prev = {
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_3_modifier
					change_variable = {
						name = defiled_nadir_learning
						add = 2
					}
				}
			}
			else_if = {
				limit = { has_trait = education_learning_3 }
				prev = {
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_learning
						add = 3
					}
				}
			}
			else_if = {
				limit = { has_trait = education_learning_4 }
				prev = {
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_learning
						add = 4
					}
				}
			}
			else = {
				prev = {
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_2_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_learning
						add = 5
					}
				}
			}
		}
		else_if = {
			limit = { has_education_arcana_trigger = yes }
			if = {
				limit = { has_trait = education_arcana_1 }
				prev = {
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_2_modifier
					change_variable = {
						name = defiled_nadir_arcana
						add = 1
					}
				}
			}
			else_if = {
				limit = { has_trait = education_arcana_2 }
				prev = {
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_3_modifier
					change_variable = {
						name = defiled_nadir_arcana
						add = 2
					}
				}
			}
			else_if = {
				limit = { has_trait = education_arcana_3 }
				prev = {
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_arcana
						add = 3
					}
				}
			}
			else_if = {
				limit = { has_trait = education_arcana_4 }
				prev = {
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_arcana
						add = 4
					}
				}
			}
			else = {
				prev = {
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_learning_1_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_2_modifier
					add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_4_modifier
					change_variable = {
						name = defiled_nadir_arcana
						add = 5
					}
				}
			}
		}
		else = { prev = { add_artifact_modifier = artifact_learning_1_modifier } }
	}
}

sear_recipient_effect = { # Sarminian searing banishment method
	scope:recipient = {
		add_prestige_level = -1
		if = {
			limit = { has_trait = lifestyle_gh_steppe_queen }
			remove_trait = lifestyle_gh_steppe_queen
		}
		add_character_modifier = {
			modifier = seared_outcast_modifier
			years = 10
		}
		add_character_flag = no_headgear
		custom_tooltip = searing_claim_loss_tooltip
		banish = yes
		blind_castrated_disfigured_recipient_support_effect = yes # Still applicable
		hidden_effect = { every_claim = { scope:recipient = { remove_claim = prev } } }
		trigger_event = { # Your hair grows back
			id = gh_sarminian_events.0007
			years = 10
		}
	}
}

decrease_divine_mission_penalties_effect = {
	random_owned_story = {
		limit = { story_type = story_divine_mission }
		save_scope_as = new_divine_mission_scope
	}
	scope:new_divine_mission_scope = {
		if = {
			limit = { var:mission_punishment_level > 0 }
			change_variable = {
				name = mission_punishment_level
				add = -1
			}
		}
		change_variable = {
			name = mission_timer_stage
			add = 5
		}
		change_variable = {
			name = mission_timer_total
			add = 5
		}
	}
	if = {
		limit = { has_character_modifier = redlander_punishment_1 }
		remove_character_modifier = redlander_punishment_1
	}
	else_if = {
		limit = { has_character_modifier = redlander_punishment_2 }
		remove_character_modifier = redlander_punishment_2
		add_character_modifier = redlander_punishment_1
	}
	else_if = {
		limit = { has_character_modifier = redlander_punishment_3 }
		remove_character_modifier = redlander_punishment_3
		add_character_modifier = redlander_punishment_2
	}
	custom_tooltip = decrease_divine_mission_penalties_effect_tt
	add_piety = medium_piety_gain
}

fix_variable_error = {
    save_scope_as = $ERROR$ 
    add_to_list = $ERROR$ 
    clear_variable_list = $ERROR$ 
    clear_saved_scope = $ERROR$ 
    set_variable = {name = $ERROR$ value = flag:$ERROR$} 
    set_global_variable = {name = $ERROR$ value = flag:$ERROR$}  
    if = {limit = {OR = {has_character_flag = $ERROR$ var:$ERROR$ = flag:$ERROR$}} remove_variable = $ERROR$ remove_global_variable = $ERROR$}
}

