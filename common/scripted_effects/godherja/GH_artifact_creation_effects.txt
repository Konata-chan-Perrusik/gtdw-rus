##########################################
# Court Artifact Creation and Decoration #
##########################################

##############################
# Random Modifier Effects

add_scaled_artifact_modifier_monthly_learning_lifestyle_xp_mult_effect = {
	if = {
		limit = {
			rarity = common
		}
		random_list = {
			20 = {
				add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_1_modifier
			}
			15 = {
				add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_2_modifier
			}
		}
	}
	else_if = {
		limit = {
			rarity = masterwork
		}
		random_list = {
			20 = {
				add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_2_modifier
			}
			15 = {
				add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_3_modifier
			}
		}
	}
	else_if = {
		limit = {
			rarity = famed
		}
		random_list = {
			20 = {
				add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_3_modifier
			}
			15 = {
				add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_4_modifier
			}
		}
	}
	else_if = {
		limit = {
			rarity = illustrious
		}
		add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_4_modifier
	}
}

add_scaled_artifact_modifier_monthly_arcana_lifestyle_xp_mult_effect = {
	if = {
		limit = {
			rarity = common
		}
		random_list = {
			20 = {
				add_artifact_modifier = artifact_monthly_arcana_lifestyle_xp_gain_mult_1_modifier
			}
			15 = {
				add_artifact_modifier = artifact_monthly_arcana_lifestyle_xp_gain_mult_2_modifier
			}
		}
	}
	else_if = {
		limit = {
			rarity = masterwork
		}
		random_list = {
			20 = {
				add_artifact_modifier = artifact_monthly_arcana_lifestyle_xp_gain_mult_2_modifier
			}
			15 = {
				add_artifact_modifier = artifact_monthly_arcana_lifestyle_xp_gain_mult_3_modifier
			}
		}
	}
	else_if = {
		limit = {
			rarity = famed
		}
		random_list = {
			20 = {
				add_artifact_modifier = artifact_monthly_arcana_lifestyle_xp_gain_mult_3_modifier
			}
			15 = {
				add_artifact_modifier = artifact_monthly_arcana_lifestyle_xp_gain_mult_4_modifier
			}
		}
	}
	else_if = {
		limit = {
			rarity = illustrious
		}
		add_artifact_modifier = artifact_monthly_arcana_lifestyle_xp_gain_mult_4_modifier
	}
}

add_scaled_artifact_modifier_aspect_effect = {
	if = {
		limit = {
			rarity = common
		}
		random_list = {
			20 = {
				add_artifact_aspect_modifier_effect = { NAME = $ASPECT$ VALUE = 1 }
			}
			15 = {
				add_artifact_aspect_modifier_effect = { NAME = $ASPECT$ VALUE = 2 }
			}
		}
	}
	else_if = {
		limit = {
			rarity = masterwork
		}
		random_list = {
			20 = {
				add_artifact_aspect_modifier_effect = { NAME = $ASPECT$ VALUE = 2 }
			}
			15 = {
				add_artifact_aspect_modifier_effect = { NAME = $ASPECT$ VALUE = 3 }
			}
		}
	}
	else_if = {
		limit = {
			rarity = famed
		}
		random_list = {
			20 = {
				add_artifact_aspect_modifier_effect = { NAME = $ASPECT$ VALUE = 3 }
			}
			15 = {
				add_artifact_aspect_modifier_effect = { NAME = $ASPECT$ VALUE = 4 }
			}
		}
	}
	else_if = {
		limit = {
			rarity = illustrious
		}
		add_artifact_aspect_modifier_effect = { NAME = $ASPECT$ VALUE = 4 }
	}
}

add_scaled_artifact_modifier_minor_prowess_effect = {
	if = {
		limit = { rarity = common }
		random_list = {
			20 = { }
			20 = { add_artifact_modifier = artifact_prowess_1_modifier }
		}
	}
	else_if = {
		limit = { rarity = masterwork }
		add_artifact_modifier = artifact_prowess_1_modifier
	}
	else_if = {
		limit = { rarity = famed }
		add_artifact_modifier = artifact_prowess_2_modifier
	}
	else_if = {
		limit = { rarity = illustrious }
		random_list = {
			20 = { add_artifact_modifier = artifact_prowess_2_modifier }
			5 = { add_artifact_modifier = artifact_prowess_3_modifier }
		}
	}
}

get_random_artifact_quality_and_wealth_effect = { #Boosts by arcana stat
	random_list = {
		20 = {
			set_artifact_rarity_common = yes
			save_scope_value_as = {
					name = random_artifact_quality
					value = 20
				}
			save_scope_value_as = {
				name = random_artifact_wealth
				value = 20
			}
		}
		30 = {
			set_artifact_rarity_masterwork = yes
			save_scope_value_as = {
					name = random_artifact_quality
					value = 40
				}
			save_scope_value_as = {
				name = random_artifact_wealth
				value = 40
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 10
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 20
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 30
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 40
				}
			}
			modifier = {
				add = -5
				scope:owner = {
					character_arcana_baseline_value > 50
				}
			}
			modifier = {
				add = -5
				scope:owner = {
					character_arcana_baseline_value > 60
				}
			}
			modifier = {
				add = -5
				scope:owner = {
					character_arcana_baseline_value > 70
				}
			}
		}
		20 = {
			set_artifact_rarity_famed = yes
			save_scope_value_as = {
					name = random_artifact_quality
					value = 70
				}
			save_scope_value_as = {
				name = random_artifact_wealth
				value = 70
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 10
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 20
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 30
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 40
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 50
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 60
				}
			}
			modifier = {
				add = -5
				scope:owner = {
					character_arcana_baseline_value > 70
				}
			}
		}
		10 = {
			set_artifact_rarity_illustrious = yes
			save_scope_value_as = {
					name = random_artifact_quality
					value = 100
				}
			save_scope_value_as = {
				name = random_artifact_wealth
				value = 100
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 10
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 20
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 30
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 40
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 50
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 60
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 70
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 80
				}
			}
			modifier = {
				add = 5
				scope:owner = {
					character_arcana_baseline_value > 90
				}
			}
		}
	}
}

add_scaled_artifact_modifier_income_effect = {
	random_list = {	
		20 = { # Men-at-Arms Maintenance
			if = {
				limit = { rarity = common }
				random_list = {
					20 = { add_artifact_modifier = artifact_men_at_arms_maintenance_1_modifier }
					10 = { add_artifact_modifier = artifact_men_at_arms_maintenance_2_modifier }
				}
			}
			else_if = {
				limit = { rarity = masterwork }
				random_list = {
					20 = { add_artifact_modifier = artifact_men_at_arms_maintenance_3_modifier }
					10 = { add_artifact_modifier = artifact_men_at_arms_maintenance_4_modifier }
				}
			}
			else_if = {
				limit = { rarity = famed }
				random_list = {
					20 = { add_artifact_modifier = artifact_men_at_arms_maintenance_5_modifier }
					10 = { add_artifact_modifier = artifact_men_at_arms_maintenance_6_modifier }
				}
			}
			else_if = {
				limit = { rarity = illustrious }
				random_list = {
					20 = { add_artifact_modifier = artifact_men_at_arms_maintenance_7_modifier }
					10 = { add_artifact_modifier = artifact_men_at_arms_maintenance_8_modifier }
				}
			}
		}

		20 = { # Building Gold Cost
			if = {
				limit = { rarity = common }
				add_artifact_modifier = artifact_build_gold_cost_1_modifier
			}
			else_if = {
				limit = { rarity = masterwork }
				add_artifact_modifier = artifact_build_gold_cost_2_modifier
			}
			else_if = {
				limit = { rarity = famed }
				add_artifact_modifier = artifact_build_gold_cost_3_modifier
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_modifier = artifact_build_gold_cost_4_modifier
			}
		}

		# domain_tax_mult
		20 = { # Domain Tax Multiplier
			trigger = {
				OR = {
					rarity = famed
					rarity = illustrious
				}
			}
			if = {
				limit = { rarity = famed }
				random_list = {
					20 = { add_artifact_modifier = artifact_domain_tax_mult_1_modifier }
					10 = { add_artifact_modifier = artifact_domain_tax_mult_2_modifier }
				}
			}
			else_if = {
				limit = { rarity = illustrious }
				random_list = {
					20 = { add_artifact_modifier = artifact_domain_tax_mult_3_modifier }
					10 = { add_artifact_modifier = artifact_domain_tax_mult_4_modifier }
				}
			}
		}

		20 = { # Parochial Vassal Tax Contribution Multiplier
			if = {
				limit = { rarity = common }
				add_artifact_modifier = artifact_parochial_tax_contribution_mult_1_modifier
			}
			else_if = {
				limit = { rarity = masterwork }
				add_artifact_modifier = artifact_parochial_tax_contribution_mult_2_modifier
			}
			else_if = {
				limit = { rarity = famed }
				add_artifact_modifier = artifact_parochial_tax_contribution_mult_3_modifier
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_modifier = artifact_parochial_tax_contribution_mult_4_modifier
			}
		}
		
		20 = { # Stewardship per Stress Level
			trigger = {
				artifact_slot_type = helmet
				OR = {
					rarity = famed
					rarity = illustrious
				}
			}
			if = {
				limit = { rarity = illustrious }
				add_artifact_modifier = artifact_stewardship_per_stress_level_2_modifier
			}
			else = { add_artifact_modifier = artifact_stewardship_per_stress_level_1_modifier }
		}
	}
}

add_scaled_artifact_modifier_vassal_opinion_effect = {
	random_list = {
		20 = { # Powerful Vassal Opinion
			if = {
				limit = { rarity = common }
				random_list = {
					20 = { add_artifact_modifier = artifact_powerful_vassal_opinion_1_modifier }
					10 = { add_artifact_modifier = artifact_powerful_vassal_opinion_2_modifier }
				}
			}
			else_if = {
				limit = { rarity = masterwork }
				random_list = {
					20 = { add_artifact_modifier = artifact_powerful_vassal_opinion_3_modifier }
					10 = { add_artifact_modifier = artifact_powerful_vassal_opinion_4_modifier }
				}
			}
			else_if = {
				limit = { rarity = famed }
				random_list = {
					20 = { add_artifact_modifier = artifact_powerful_vassal_opinion_5_modifier }
					10 = { add_artifact_modifier = artifact_powerful_vassal_opinion_6_modifier }
				}
			}
			else_if = {
				limit = { rarity = illustrious }
				random_list = {
					20 = { add_artifact_modifier = artifact_powerful_vassal_opinion_7_modifier }
					10 = { add_artifact_modifier = artifact_powerful_vassal_opinion_8_modifier }
				}
			}
		}

		20 = { # Courtly Vassal Opinion
			if = {
				limit = { rarity = common }
				add_artifact_modifier = artifact_courtly_vassal_opinion_1_modifier
			}
			else_if = {
				limit = { rarity = masterwork }
				add_artifact_modifier = artifact_courtly_vassal_opinion_2_modifier
			}
			else_if = {
				limit = { rarity = famed }
				add_artifact_modifier = artifact_courtly_vassal_opinion_3_modifier
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_modifier = artifact_courtly_vassal_opinion_4_modifier
			}
		}

		20 = { # Parochial Vassal Opinion
			if = {
				limit = { rarity = common }
				add_artifact_modifier = artifact_parochial_vassal_opinion_1_modifier
			}
			else_if = {
				limit = { rarity = masterwork }
				add_artifact_modifier = artifact_parochial_vassal_opinion_2_modifier
			}
			else_if = {
				limit = { rarity = famed }
				add_artifact_modifier = artifact_parochial_vassal_opinion_3_modifier
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_modifier = artifact_parochial_vassal_opinion_4_modifier
			}
		}
	}
}

add_scaled_artifact_modifier_knight_effect = {
	random_list = {
		20 = { # Knight Limit
			trigger = {
				OR = {
					rarity = famed
					rarity = illustrious
				}
			}
			if = {
				limit = { rarity = famed }
				add_artifact_modifier = artifact_knight_limit_1_modifier
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_modifier = artifact_knight_limit_2_modifier
			}
		}

		20 = { # Knight Effectiveness
			if = {
				limit = { rarity = common }
				random_list = {
					20 = { add_artifact_modifier = artifact_knight_effectiveness_1_modifier }
					15 = { add_artifact_modifier = artifact_knight_effectiveness_2_modifier }
					5 = { add_artifact_modifier = artifact_knight_effectiveness_3_modifier }
				}
			}
			else_if = {
				limit = { rarity = masterwork }
				random_list = {
					20 = { add_artifact_modifier = artifact_knight_effectiveness_4_modifier }
					15 = { add_artifact_modifier = artifact_knight_effectiveness_5_modifier }
					5 = { add_artifact_modifier = artifact_knight_effectiveness_6_modifier }
				}
			}
			else_if = {
				limit = { rarity = famed }
				random_list = {
					20 = { add_artifact_modifier = artifact_knight_effectiveness_7_modifier }
					15 = { add_artifact_modifier = artifact_knight_effectiveness_8_modifier }
					5 = { add_artifact_modifier = artifact_knight_effectiveness_9_modifier }
				}
			}
			else_if = {
				limit = { rarity = illustrious }
				random_list = {
					20 = { add_artifact_modifier = artifact_knight_effectiveness_10_modifier }
					15 = { add_artifact_modifier = artifact_knight_effectiveness_11_modifier }
					5 = { add_artifact_modifier = artifact_knight_effectiveness_12_modifier }
				}
			}
		}
	}
}

add_scaled_artifact_modifier_ruler_opinion_effect = {
	if = {
		limit = { rarity = common }
		random_list = {
			20 = { add_artifact_modifier = artifact_independent_ruler_opinion_1_modifier }
			10 = { add_artifact_modifier = artifact_independent_ruler_opinion_2_modifier }
		}
	}
	else_if = {
		limit = { rarity = masterwork }
		random_list = {
			20 = { add_artifact_modifier = artifact_independent_ruler_opinion_3_modifier }
			10 = { add_artifact_modifier = artifact_independent_ruler_opinion_4_modifier }
		}
	}
	else_if = {
		limit = { rarity = famed }
		random_list = {
			20 = { add_artifact_modifier = artifact_independent_ruler_opinion_5_modifier }
			10 = { add_artifact_modifier = artifact_independent_ruler_opinion_6_modifier }
		}
	}
	else_if = {
		limit = { rarity = illustrious }
		random_list = {
			20 = { add_artifact_modifier = artifact_independent_ruler_opinion_7_modifier }
			10 = { add_artifact_modifier = artifact_independent_ruler_opinion_8_modifier }
		}
	}
}

add_scaled_artifact_modifier_acceptance_effect = {
	random_list = {
		20 = { # Different Faith Opinion
			if = {
				limit = { rarity = common }
				random_list = {
					20 = { add_artifact_modifier = artifact_different_faith_opinion_4_modifier }
					10 = { add_artifact_modifier = artifact_different_faith_opinion_5_modifier }
				}
			}
			else_if = {
				limit = { rarity = masterwork }
				random_list = {
					20 = { add_artifact_modifier = artifact_different_faith_opinion_5_modifier }
					10 = { add_artifact_modifier = artifact_different_faith_opinion_6_modifier }
				}
			}
			else_if = {
				limit = { rarity = famed }
				random_list = {
					20 = { add_artifact_modifier = artifact_different_faith_opinion_6_modifier }
					10 = { add_artifact_modifier = artifact_different_faith_opinion_7_modifier }
				}
			}
			else_if = {
				limit = { rarity = illustrious }
				random_list = {
					20 = { add_artifact_modifier = artifact_different_faith_opinion_7_modifier }
					10 = { add_artifact_modifier = artifact_different_faith_opinion_8_modifier }
				}
			}
		}

		20 = { # Different Culture Opinion
			if = {
				limit = { rarity = common }
				random_list = {
					20 = { add_artifact_modifier = artifact_different_culture_opinion_4_modifier }
					10 = { add_artifact_modifier = artifact_different_culture_opinion_5_modifier }
				}
			}
			else_if = {
				limit = { rarity = masterwork }
				random_list = {
					20 = { add_artifact_modifier = artifact_different_culture_opinion_5_modifier }
					10 = { add_artifact_modifier = artifact_different_culture_opinion_6_modifier }
				}
			}
			else_if = {
				limit = { rarity = famed }
				random_list = {
					20 = { add_artifact_modifier = artifact_different_culture_opinion_6_modifier }
					10 = { add_artifact_modifier = artifact_different_culture_opinion_7_modifier }
				}
			}
			else_if = {
				limit = { rarity = illustrious }
				random_list = {
					20 = { add_artifact_modifier = artifact_different_culture_opinion_7_modifier }
					10 = { add_artifact_modifier = artifact_different_culture_opinion_8_modifier }
				}
			}
		}

		20 = { # Cultural Acceptance
			if = {
				limit = { rarity = common }
				add_artifact_modifier = artifact_cultural_head_acceptance_gain_mult_1_modifier
			}
			else_if = {
				limit = { rarity = masterwork }
				add_artifact_modifier = artifact_cultural_head_acceptance_gain_mult_2_modifier
			}
			else_if = {
				limit = { rarity = famed }
				add_artifact_modifier = artifact_cultural_head_acceptance_gain_mult_3_modifier
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_modifier = artifact_cultural_head_acceptance_gain_mult_4_modifier
			}
		}
	}
}

######################
## Magical Effects

set_artifact_as_magical = {
	scope:newly_created_artifact = {
		save_scope_as = this_artifact
	}
	scope:this_artifact = {
		set_variable = {
			name = magical_artifact
			value = yes
		}
		random_list = {
			10 = { add_artifact_aspect_modifier_effect = { NAME = blood VALUE = 1 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = water VALUE = 1 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = fire VALUE = 1 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = ice VALUE = 1 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = stone VALUE = 1 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = celestial VALUE = 1 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = dream VALUE = 1 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = dark VALUE = 1 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = light VALUE = 1 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = nature VALUE = 1 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = ethereal VALUE = 1 } }
		}
	}
}

artifact_magical_infusion_effect = { # This is not for giving artifacts magic, this is for magic features
	if = {
		limit = {
			scope:newly_created_artifact = {
				OR = {
					AND = {
						exists = var:quality
						var:quality > 50
					}
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
			}
		}
		random_list = {
			80 = {}
			15 = {
				modifier = {
					add = {
						value = scope:owner.character_arcana_baseline_value
					}
				}
				scope:newly_created_artifact = {
					set_artifact_description = artifact_magically_infusion_description
					set_artifact_as_magical = yes
				}
			}
		}
	}
}

# For Unique Grimoire Books

set_random_grimoire_aspect_effect = {
	if = {
		limit = { NOT = { exists = var:grimoire_aspect } }
		random_list = {
			1 = { set_variable = { name = grimoire_aspect value = flag:fire } }
			1 = { set_variable = { name = grimoire_aspect value = flag:water } }
			1 = { set_variable = { name = grimoire_aspect value = flag:ice } }
			1 = { set_variable = { name = grimoire_aspect value = flag:air } }
			1 = { set_variable = { name = grimoire_aspect value = flag:stone } }
			1 = { set_variable = { name = grimoire_aspect value = flag:dream} }
			1 = { set_variable = { name = grimoire_aspect value = flag:celestial } }
			1 = { set_variable = { name = grimoire_aspect value = flag:dark } }
			1 = { set_variable = { name = grimoire_aspect value = flag:light } }

			1 = { set_variable = { name = grimoire_aspect value = flag:blood } }
			1 = { set_variable = { name = grimoire_aspect value = flag:nature } }
			1 = { set_variable = { name = grimoire_aspect value = flag:ethereal } }
			1 = { set_variable = { name = grimoire_aspect value = flag:hymns } }
			1 = { set_variable = { name = grimoire_aspect value = flag:death } }
			#1 = { set_variable = { name = grimoire_aspect value = flag:sand } }
			#1 = { set_variable = { name = grimoire_aspect value = flag:metal } }
			#1 = { set_variable = { name = grimoire_aspect value = flag:time } }
			#1 = { set_variable = { name = grimoire_aspect value = flag:dawn } }

		}
	}
}

######################
# Dynamic Age Range

generate_date_range_effect = {
	set_variable = {
		name = $NAME$_lower_year
		value = {
			value = $MIN_YEAR$
			add = {
				integer_range = {
					min = 0
					max = {
						value = $MAX_YEAR$
						subtract = $MAX_LENGTH$
					}
				}
			}
		}
	}
	set_variable = {
		name = $NAME$_upper_year
		value = {
			value = var:$NAME$_lower_year
			add = {
				integer_range = {
					min = $MIN_LENGTH$
					max = $MAX_LENGTH$
				}
			}
		}
	}
}

# Mayikprolollan Book Age

generate_mayikprolollan_book_original_age_effect = {
	random_list = {
		3 = {
			trigger = {
				exists = scope:rarity
				scope:rarity >= 70
			}
			set_variable = {
				name = book_original_age
				value = {
					value = 0
					add = {
						integer_range = {
							min = 1
							max = 299
						}
					}
				}
			}
		}
		7 = {
			trigger = {
				exists = scope:rarity
				scope:rarity >= 30
			}
			set_variable = {
				name = book_original_age
				value = {
					value = 0
					add = {
						integer_range = {
							min = 300
							max = 599
						}
					}
				}
			}
		}
		# Chaos of the Seventh Century
		10 = {
			set_variable = {
				name = book_original_age
				value = {
					value = 0
					add = {
						integer_range = {
							min = 600
							max = 750
						}
					}
				}
			}
		}
		# Golden Age
		50 = {
			set_variable = {
				name = book_original_age
				value = {
					value = 0
					add = {
						integer_range = {
							min = 751
							max = 1050
						}
					}
				}
			}
		}
		# Decline of the Empire
		30 = {
			set_variable = {
				name = book_original_age
				value = {
					value = 0
					add = {
						integer_range = {
							min = 1051
							max = 1200
						}
					}
				}
			}
		}
	}
}

##############################################################################
# Aversarian Artifacts - For the Sjalvolki Conquest and General 1254 Seeding #
##############################################################################


###############
# GOBLET

generate_aversarian_goblet_age_effect = {
	random_list = {
		3 = {
			set_variable = {
				name = goblet_age
				value = {
					integer_range = {
						min = 1
						max = 299
					}
				}
			}
		}
		7 = {
			set_variable = {
				name = goblet_age
				value = {
					integer_range = {
						min = 300
						max = 599
					}
				}
			}
		}
		# Chaos of the Seventh Century
		10 = {
			set_variable = {
				name = goblet_age
				value = {
					integer_range = {
						min = 600
						max = 750
					}
				}
			}
		}
		# Golden Age
		50 = {
			set_variable = {
				name = goblet_age
				value = {
					integer_range = {
						min = 751
						max = 1050
					}
				}
			}
		}
		# Decline of the Empire
		30 = {
			set_variable = {
				name = goblet_age
				value = {
					integer_range = {
						min = 1051
						max = 1200
					}
				}
			}
		}
	}
}

create_artifact_aversarian_goblet_effect = {
	# Get the character that discovered the artifact.
	$OWNER$ = { save_scope_as = owner }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_aversarian_goblet_name
				description = placeholder
				visuals = goblet
				type = goblet
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = discovered
				}
			}
		}
		
		generate_aversarian_goblet_age_effect = yes

		scope:newly_created_artifact = {
			set_artifact_feature_group = goblet_characteristic
			set_artifact_feature_group = goblet_decoration
			set_artifact_description = artifact_aversarian_goblet_description

			# Set grandeur
			add_scaled_artifact_modifier_grandeur_small_effect = yes
			
			# Let's add another random effect to keep goblets interesting!
			random_list = {
				10 = {
					add_scaled_artifact_modifier_minor_prestige_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_majesty_effect = yes
				}
			}
			artifact_magical_infusion_effect = yes
			remove_artifact_modifier = artifact_placeholder_modifier
		}
		remove_variable = goblet_age # Not needed anymore
		remove_variable = artifact_origin_location
	}
}

####################
#VASES

create_artifact_vessel_earthware_effect = {
	$OWNER$ = { save_scope_as = owner }
	$POTTER$ = { save_scope_as = potter }
	$LOCATION$ = { save_scope_as = location }
	if = { #Any existing dummy character gets turned into the potter
		limit = {
			exists = scope:dummy_gender
			scope:potter = scope:dummy_gender
		}
		clear_saved_scope = potter
		clear_saved_scope = dummy_gender
	}
	hidden_effect_new_object = {
		# Get artifact quality, wealth, materials, and decorations
		get_artifact_quality_effect = yes
		get_artifact_wealth_effect = yes

		# Create the artifact
		if = {
			limit = { exists = scope:adventurer }
			create_artifact = {
				name = artifact_vessel_earthware_name
				description = placeholder
				visuals = vessel
				type = vessel_earthware
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:adventurer
					recipient = root
					type = discovered
				}
			}
		}
		else_if = {
			limit = {
				scope:host ?= $OWNER$
				scope:activity ?= { has_activity_type = activity_tournament }
			}
			create_artifact = {
				name = artifact_vessel_earthware_name
				creator = scope:host
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				visuals = vessel
				type = vessel_earthware
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				history = {
					type = prize_created
					recipient = scope:host
				}
				save_scope_as = newly_created_artifact
			}
		}
		else_if = {
			limit = { exists = scope:potter }
			create_artifact = {
				name = artifact_vessel_earthware_name
				creator = scope:potter
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				visuals = vessel
				type = vessel_earthware
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
			}
		}
		else = {
			create_artifact = {
				name = artifact_vessel_earthware_name
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				visuals = vessel
				type = vessel_earthware
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = { type = created_before_history }
			}
		}
		scope:newly_created_artifact = {
			# Finish generating decorations and update description
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_vessel_earthware_description
			# Add artifact modifiers
			add_scaled_artifact_modifier_grandeur_small_effect = yes
			add_scaled_artifact_modifier_minor_prestige_effect = yes
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				add_scaled_artifact_modifier_majesty_effect = yes
			}
			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}
		}
	}
}

create_artifact_vessel_glassware_effect = {
	$OWNER$ = { save_scope_as = owner }
	$POTTER$ = { save_scope_as = potter }
	$LOCATION$ = { save_scope_as = location }
	if = { #Any existing dummy character gets turned into the potter
		limit = {
			exists = scope:dummy_gender
			scope:potter = scope:dummy_gender
		}
		clear_saved_scope = potter
		clear_saved_scope = dummy_gender
	}
	hidden_effect_new_object = {
		# Get artifact quality, wealth, materials, and decorations
		get_artifact_quality_effect = yes
		get_artifact_wealth_effect = yes

		# Create the artifact
		if = {
			limit = { exists = scope:adventurer }
			create_artifact = {
				name = artifact_vessel_glassware_name
				description = placeholder
				visuals = vessel
				type = vessel_glassware
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:adventurer
					recipient = root
					type = discovered
				}
			}
		}
		else_if = {
			limit = {
				scope:host ?= $OWNER$
				scope:activity ?= { has_activity_type = activity_tournament }
			}
			create_artifact = {
				name = artifact_vessel_glassware_name
				creator = scope:host
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				visuals = vessel
				type = vessel_glassware
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				history = {
					type = prize_created
					recipient = scope:host
				}
				save_scope_as = newly_created_artifact
			}
		}
		else_if = {
			limit = { exists = scope:potter }
			create_artifact = {
				name = artifact_vessel_glassware_name
				creator = scope:potter
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				visuals = vessel
				type = vessel_glassware
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
			}
		}
		else = {
			create_artifact = {
				name = artifact_vessel_glassware_name
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				visuals = vessel
				type = vessel_glassware
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = { type = created_before_history }
			}
		}
		scope:newly_created_artifact = {
			# Finish generating decorations and update description
			get_artifact_feature_references_effect = yes
			set_artifact_feature_group = glass_decoration
			set_artifact_feature_group = decoration_material_inlay
			set_artifact_description = artifact_vessel_glassware_description
			# Add artifact modifiers
			add_scaled_artifact_modifier_grandeur_small_effect = yes
			add_scaled_artifact_modifier_minor_prestige_effect = yes
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				add_scaled_artifact_modifier_majesty_effect = yes
			}
			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}
		}
	}
}

generate_aversarian_vase_age_effect = {
	random_list = {
		3 = {
			set_variable = {
				name = vase_age
				value = {
					integer_range = {
						min = 150
						max = 299
					}
				}
			}
		}
		7 = {
			set_variable = {
				name = vase_age
				value = {
					integer_range = {
						min = 300
						max = 599
					}
				}
			}
		}
		# Chaos of the Seventh Century
		10 = {
			set_variable = {
				name = vase_age
				value = {
					integer_range = {
						min = 600
						max = 750
					}
				}
			}
		}
		# Golden Age
		50 = {
			set_variable = {
				name = vase_age
				value = {
					integer_range = {
						min = 751
						max = 1050
					}
				}
			}
		}
		# Decline of the Empire
		30 = {
			set_variable = {
				name = vase_age
				value = {
					integer_range = {
						min = 1051
						max = 1200
					}
				}
			}
		}
	}
}

###################
#Marcher Caskets

generate_marcher_casket_age_effect = {
	random_list = {
		7 = {
			set_variable = {
				name = casket_age
				value = {
					integer_range = {
						min = 300
						max = 599
					}
				}
			}
		}
		# Chaos of the Seventh Century
		10 = {
			set_variable = {
				name = casket_age
				value = {
					integer_range = {
						min = 600
						max = 750
					}
				}
			}
		}
		# Golden Age
		50 = {
			set_variable = {
				name = casket_age
				value = {
					integer_range = {
						min = 751
						max = 1050
					}
				}
			}
		}
		# Decline of the Empire
		30 = {
			set_variable = {
				name = casket_age
				value = {
					integer_range = {
						min = 1051
						max = 1200
					}
				}
			}
		}
	}
}

casket_branding_effect = {
	if = {
		limit = { 
			OR = {
				rarity = famed
				rarity = illustrious
			}
		}
		set_artifact_feature_group = casket_branded 
		set_artifact_feature_group = casket_name
	}
}



create_artifact_marcher_casket_effect = {
	# Get the character that discovered the artifact.
	$OWNER$ = { save_scope_as = owner }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, materials, and decorations
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_marcher_casket_name
				description = placeholder
				visuals = small_box
				type = casket
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = discovered
				}
			}
		}

		generate_marcher_casket_age_effect = yes

		scope:newly_created_artifact = {
			casket_branding_effect = yes
			set_artifact_feature_group = casket_characteristic
			set_artifact_feature_group = casket_decoration
			set_artifact_description = artifact_marcher_casket_description


			# Set grandeur
			add_scaled_artifact_modifier_scholarship_effect = yes
			add_scaled_artifact_modifier_attractiveness_effect = yes
			
			# Let's add another random effect to keep vases interesting!
			random_list = {
				10 = {
					add_scaled_artifact_modifier_minor_prestige_effect = yes
					add_scaled_artifact_modifier_majesty_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_grandeur_small_effect = yes
				}
				10 = {
					add_2_scaled_artifact_modifier_majesty_effect = yes
				}
			}
			remove_artifact_modifier = artifact_placeholder_modifier
		}
		remove_variable = casket_age # Not needed anymore
		remove_variable = artifact_origin_location
	}	
}

#################
#Stone Tablets

generate_tablet_age_effect = {
	random_list = {
		10 = {
			set_variable = {
				name = tablet_age
				value = {
					integer_range = {
						min = 25
						max = 35
					}
				}
			}
		}
		20 = {
			set_variable = {
				name = tablet_age
				value = {
					integer_range = {
						min = 19
						max = 25
					}
				}
			}
		}
		40 = {
			set_variable = {
				name = tablet_age
				value = {
					integer_range = {
						min = 13
						max = 16
					}
				}
			}
		}
		30 = {
			set_variable = {
				name = tablet_age
				value = {
					integer_range = {
						min = 15
						max = 20
					}
				}
			}
		}
	}
}
create_artifact_stone_tablet_effect = {
	# Get the character that discovered the artifact.
	$OWNER$ = { save_scope_as = owner }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		get_random_artifact_quality_and_wealth_effect = yes
		 

		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_stone_tablet_name
				description = placeholder
				visuals = tablet
				type = tablet
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = discovered
				}
			}
		}

		generate_tablet_age_effect = yes

		scope:newly_created_artifact = {
			set_artifact_feature_group = tablet_characteristic
			set_artifact_feature_group = tablet_engraving
			set_artifact_description = artifact_stone_tablet_description

			# Set grandeur
			add_scaled_artifact_modifier_scholarship_effect = yes
			add_scaled_artifact_modifier_majesty_effect = yes
			
			# Let's add another random effect to keep vases interesting!
			random_list = {
				10 = {
					add_scaled_artifact_modifier_piety_effect = yes
					add_2_scaled_artifact_modifier_rulership_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_grandeur_small_effect = yes
					add_scaled_artifact_modifier_devotion_effect = yes
				}
			}
			artifact_magical_infusion_effect = yes
			remove_artifact_modifier = artifact_placeholder_modifier
		}
		remove_variable = tablet_age # Not needed anymore
		remove_variable = artifact_origin_location
	}	
}

create_artifact_arcane_stone_tablet_effect = {
	# Get the character that discovered the artifact.
	$OWNER$ = { save_scope_as = owner }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		get_random_artifact_quality_and_wealth_effect = yes
		 

		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_stone_tablet_name
				description = placeholder
				visuals = tablet
				type = tablet
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = discovered
				}
			}
		}

		generate_tablet_age_effect = yes

		scope:newly_created_artifact = {
			set_variable = {
				name = author
				value = scope:author
			}
			if = {
				limit = { exists = scope:location }
				set_variable = {
					name = writing_culture
					value = scope:location.culture
				}
			}
			set_artifact_feature_group = tablet_characteristic
			set_artifact_feature_group = tablet_engraving
			set_artifact_description = artifact_stone_tablet_description

			# Set grandeur
			add_scaled_artifact_modifier_scholarship_effect = yes
			add_scaled_artifact_modifier_majesty_effect = yes
			
			# Let's add another random effect to keep vases interesting!
			random_list = {
				10 = {
					add_scaled_artifact_modifier_piety_effect = yes
					add_2_scaled_artifact_modifier_rulership_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_grandeur_small_effect = yes
					add_scaled_artifact_modifier_devotion_effect = yes
				}
			}
			random_list = {
				1 = {
					trigger = { rarity = masterwork }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 2 }
				}
				1 = {
					trigger = { rarity = masterwork }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 3 }
				}
				1 = {
					trigger = { rarity = famed }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 4 }
				}
				1 = {
					trigger = { rarity = famed }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 5 }
				}
				1 = {
					trigger = { rarity = illustrious }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 6 }
				}
				1 = {
					trigger = { rarity = illustrious }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 7 }
				}
			}
			random_in_list = {
				variable = knowledge_entry_list
				prev = { set_variable = { name = namesake_knowledge_entry value = prev } }
			}
			artifact_magical_infusion_effect = yes
			remove_artifact_modifier = artifact_placeholder_modifier
		}
		remove_variable = tablet_age # Not needed anymore
		remove_variable = artifact_origin_location
	}	
}

################
#VOTIVE FIGURES

generate_votive_figure_age_effect = {
	random_list = {
		7 = {
			set_variable = {
				name = votive_age
				value = {
					integer_range = {
						min = 150
						max = 299
					}
				}
			}
		}
		10 = {
			set_variable = {
				name = votive_age
				value = {
					integer_range = {
						min = 300
						max = 599
					}
				}
			}
		}
		# Chaos of the Seventh Century
		15 = {
			set_variable = {
				name = votive_age
				value = {
					integer_range = {
						min = 600
						max = 750
					}
				}
			}
		}
		# Golden Age
		50 = {
			set_variable = {
				name = votive_age
				value = {
					integer_range = {
						min = 751
						max = 1050
					}
				}
			}
		}
		# Decline of the Empire
		20 = {
			set_variable = {
				name = votive_age
				value = {
					integer_range = {
						min = 1051
						max = 1230
					}
				}
			}
		}
	}
}
create_artifact_votive_figure_effect = {
	# Get the character that discovered the artifact.
	$OWNER$ = { save_scope_as = owner }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_votive_figure_name
				description = placeholder
				visuals = pocket_figurine
				type = votive
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = discovered
				}
			}
		}

		generate_votive_figure_age_effect = yes

		scope:newly_created_artifact = {
			set_artifact_feature_group = votive_characteristic
			set_artifact_feature_group = votive_carving
			set_artifact_description = artifact_votive_figure_description

			# Set grandeur
			add_scaled_artifact_modifier_scholarship_effect = yes
			
			# Let's add another random effect to keep vases interesting!
			random_list = {
				10 = {
					add_scaled_artifact_modifier_piety_effect = yes
					add_scaled_artifact_modifier_majesty_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_grandeur_small_effect = yes
					add_2_scaled_artifact_modifier_devotion_effect = yes
				}
			}
			remove_artifact_modifier = artifact_placeholder_modifier
		}
		remove_variable = votive_age # Not needed anymore
		remove_variable = artifact_origin_location
	}	
}

###########
#Coins

generate_coin_age_effect = {
    random_list = {
        7 = {
            set_variable = {
                name = coin_age
                value = {
                    integer_range = {
                        min = 300
                        max = 599
                    }
                }
            }
        }
        # Chaos of the Seventh Century
        10 = {
            set_variable = {
                name = coin_age
                value = {
                    integer_range = {
                        min = 600
                        max = 750
                    }
                }
            }
        }
        # Golden Age
        50 = {
            set_variable = {
                name = coin_age
                value = {
                    integer_range = {
                        min = 751
                        max = 1050
                    }
                }
            }
        }
        # Decline of the Empire
        30 = {
            set_variable = {
                name = coin_age
                value = {
                    integer_range = {
                        min = 1051
                        max = 1254
                    }
                }
            }
        }
    }
}

create_artifact_commemorative_coin_effect = {
    # Get the character that discovered the artifact.
    $OWNER$ = { save_scope_as = owner }
    $LOCATION$ = { save_scope_as = location }

    hidden_effect_new_object = {
        # Get artifact quality, wealth, and materials
        get_artifact_quality_effect = yes
        get_artifact_wealth_effect = yes

        # Create the artifact
        scope:owner = {
            create_artifact = { 
                name = artifact_commemorative_coin_name
                description = placeholder
                visuals = coin
                type = coin
                modifier = artifact_placeholder_modifier
                wealth = scope:wealth
                quality = scope:quality
                #decaying = no
                save_scope_as = newly_created_artifact
                history = {
                    location = scope:location
                    actor = scope:owner
                    recipient = scope:owner
                    type = discovered
                }
            }
        }
        generate_coin_age_effect = yes

        scope:newly_created_artifact = {
        	set_artifact_feature_group = coin_issue
            set_artifact_feature_group = coin_characteristic
            set_artifact_feature_group = coin_decoration
            set_artifact_description = artifact_commemorative_coin_description

            # Set grandeur
            add_scaled_artifact_modifier_scholarship_effect = yes
            
            # Let's add another random effect to keep vases interesting!
            random_list = {
                10 = {
                    add_scaled_artifact_modifier_rulership_effect = yes
                }
                10 = {
                    add_scaled_artifact_modifier_majesty_effect = yes
                }
                10 = {
                    add_scaled_artifact_modifier_grandeur_small_effect = yes
                }
                10 = {
                    add_scaled_artifact_modifier_devotion_effect = yes
                }
            }
            remove_artifact_modifier = artifact_placeholder_modifier
        }
        remove_variable = coin_age # Not needed anymore
        remove_variable = artifact_origin_location
    }   
}

##############################################################################
# Hunting Artifacts - For Rewards from Hunts #
##############################################################################

hunting_quality_and_wealth_effect = {
	if = {
		limit = {
			exists = scope:hunt_tier
			OR = {
				scope:hunt_tier = flag:mundane
				scope:hunt_tier = flag:common
			}
		}
		set_artifact_rarity_common = yes
		save_scope_value_as = {
			name = quality
			value = 20
		}
		save_scope_value_as = {
			name = wealth
			value = 10
		}
	}
	if = {
		limit = {
			exists = scope:hunt_tier
			scope:hunt_tier = flag:medium
		}
		random_list = {
			75 = {
				set_artifact_rarity_masterwork = yes
				save_scope_value_as = {
					name = quality
					value = 40
				}
				save_scope_value_as = {
					name = wealth
					value = 20
				}
			}
			25 = {
				set_artifact_rarity_famed = yes
				save_scope_value_as = {
					name = quality
					value = 75
				}
				save_scope_value_as = {
					name = wealth
					value = 30
				}
			}
		}
	}
	if = {
		limit = {
			exists = scope:hunt_tier
			scope:hunt_tier = flag:high
		}
		random_list = {
			76 ={
				set_artifact_rarity_famed = yes
				save_scope_value_as = {
					name = quality
					value = 75
				}
				save_scope_value_as = {
					name = wealth
					value = 30
				}
			}
			25 = {
				set_artifact_rarity_illustrious = yes
				save_scope_value_as = {
					name = quality
					value = 100
				}
				save_scope_value_as = {
					name = wealth
					value = 60
				}
			}
		}
	}
	if = {
		limit = {
			exists = scope:hunt_tier
			scope:hunt_tier = flag:legendary
		}
		set_artifact_rarity_illustrious = yes
	}
}

hunting_magical_game_effect = {
	if = {
		limit = {
			OR = {
				exists = scope:magic_user
				exists = scope:moonbound
				exists = scope:magical_sickness
				exists = scope:mindrender
			}
		}
		artifact_magical_infusion_effect = yes
	}
	random = {
		chance = 33
		if = {
			limit = { exists = scope:moonbound }
			if = {
				limit = { rarity = common }
				add_artifact_aspect_modifier_effect = { NAME = celestial VALUE = 1 }
			}
			else_if = {
				limit = { rarity = masterwork }
				add_artifact_aspect_modifier_effect = { NAME = celestial VALUE = 2 }
			}
			else_if = {
				limit = { rarity = famed }
				add_artifact_aspect_modifier_effect = { NAME = celestial VALUE = 3 }
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_aspect_modifier_effect = { NAME = celestial VALUE = 4 }
			}
		}
		if = {
			limit = { exists = scope:mindrender }
			if = {
				limit = { rarity = common }
				add_artifact_aspect_modifier_effect = { NAME = dream VALUE = 1 }
			}
			else_if = {
				limit = { rarity = masterwork }
				add_artifact_aspect_modifier_effect = { NAME = dream VALUE = 2 }
			}
			else_if = {
				limit = { rarity = famed }
				add_artifact_aspect_modifier_effect = { NAME = dream VALUE = 3 }
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_aspect_modifier_effect = { NAME = dream VALUE = 4 }
			}
		}
	}
}
# For Large Fauna
create_artifact_hunt_trophy_animal_hide_big_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		get_random_artifact_quality_and_wealth_effect = yes
		save_scope_value_as = {
			name = animal_hide_size
			value = flag:big
		}

		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_hunt_animal_hide_big_name
				description = placeholder
				visuals = large_animal_hide
				type = animal_hide_big
				modifier = artifact_hunted_modifier
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}
			}
		}
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}
		scope:newly_created_artifact = {
			set_artifact_description = artifact_hunt_animal_hide_big_description

			# Set grandeur
			add_scaled_artifact_modifier_grandeur_big_effect = yes
			# Set prestige
			add_scaled_artifact_modifier_prestige_effect = yes
			hunting_magical_game_effect = yes

			random_list = {
				10 = {		
					add_scaled_artifact_modifier_combat_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_majesty_effect = yes
				}
				10 = {
					add_2_scaled_artifact_modifier_rulership_effect = yes
				}
			}
		}
		remove_variable = artifact_origin_location
	}
}
# For Medium Fauna
create_artifact_hunt_trophy_animal_hide_medium_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		get_random_artifact_quality_and_wealth_effect = yes
		save_scope_value_as = {
			name = animal_hide_size
			value = flag:medium
		}

		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_hunt_animal_hide_medium_name
				description = placeholder
				visuals = medium_animal_hide
				type = animal_hide
				modifier = artifact_hunted_modifier
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}
			}
		}
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}
		scope:newly_created_artifact = {
			set_artifact_description = artifact_hunt_animal_hide_medium_description

			# Set grandeur
			add_scaled_artifact_modifier_grandeur_small_effect = yes
			# Set prestige
			add_scaled_artifact_modifier_prestige_effect = yes
			hunting_magical_game_effect = yes

			random_list = {
				10 = {		
					add_scaled_artifact_modifier_dynasty_prestige_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_majesty_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_rulership_effect = yes
				}
			}
		}
		remove_variable = artifact_origin_location
	}
}
# For Small Fauna
create_artifact_hunt_trophy_animal_hide_small_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
#	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		get_random_artifact_quality_and_wealth_effect = yes
		save_scope_value_as = {
			name = animal_hide_size
			value = flag:small
		}

		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_hunt_animal_hide_small_name
				description = placeholder
				visuals = small_animal_hide
				type = animal_hide
				modifier = artifact_hunted_modifier
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
#					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}
			}
		}
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}
		scope:newly_created_artifact = {
			set_artifact_description = artifact_small_hide_description

			# Set grandeur
			add_scaled_artifact_modifier_grandeur_small_effect = yes
			# Set prestige
			add_scaled_artifact_modifier_minor_prestige_effect = yes
			hunting_magical_game_effect = yes

			random_list = {
				10 = {		
					add_scaled_artifact_modifier_dynasty_prestige_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_majesty_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_rulership_effect = yes
				}
			}
		}
#		remove_variable = artifact_origin_location
	}
}

# Fogbeasts
create_artifact_hunt_fogbeast_trophy_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		get_random_artifact_quality_and_wealth_effect = yes
		save_scope_value_as = {
			name = animal_hide_size
			value = flag:big
		}

		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_hunt_animal_hide_fogbeast_name
				description = placeholder
				visuals = large_animal_hide
				type = animal_hide_big
				modifier = artifact_fogbeast_modifier
				wealth = 90
				quality = 90
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}
			}
		}
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}
		scope:newly_created_artifact = {
			set_artifact_description = artifact_hunt_fogbeast_hide_description

			# Set grandeur
			add_scaled_artifact_modifier_grandeur_big_effect = yes
			# Set prestige
			add_scaled_artifact_modifier_prestige_effect = yes

			random_list = {
				10 = {		
					add_2_scaled_artifact_modifier_rulership_effect = yes
					add_scaled_artifact_modifier_minor_prestige_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_majesty_effect = yes
					add_scaled_artifact_modifier_minor_prestige_effect = yes
				}
				10 = {
					generate_fogged_artifact = yes
				}
			}
		}
		remove_variable = artifact_origin_location
	}
}

# Elementals
create_artifact_hunt_trophy_elemental_essence_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	save_scope_value_as = { name = legendary value = $LEGENDARY$ }
	scope:owner = {
		set_variable = { name = animal_type value = $ANIMAL$ days = 5 }
		if = {
			limit = {
				OR = {
					NOT = { exists = var:animal_type }
					var:animal_type ?= flag:none
				}
			}
			random_list = {
				8 = {
					hunt_activity_standard_game_effect = { PROVINCE = scope:hunter.location HUNTER = scope:hunter }
				}
				2 = {
					hunt_activity_dangerous_game_effect = { PROVINCE = scope:hunter.location }
				}
			}
		}
	}
	if = {
		limit = { exists = scope:adventurer }
		scope:adventurer = { save_scope_as = creator }
	}
	else = {
		scope:hunter = { save_scope_as = creator }
	}
	hidden_effect_new_object = {
		# Get artifact quality, location, and animal
		animal_artifact_wealth_quality_effect = yes
		get_animal_hunt_location_effect = yes
		scope:location = { add_to_list = artifact_material_sources }
		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_hunt_essence_name
				description = placeholder
				visuals = flask
				type = animal_essence
				modifier = artifact_essence_modifier
				wealth = scope:wealth
				quality = scope:quality
			}
		}
		scope:newly_created_artifact = {
			set_max_durability = 60
			set_artifact_feature_group = animal_essence_infusion
			set_artifact_description = artifact_hunt_essence_description
			# Set grandeur
			add_scaled_artifact_modifier_grandeur_big_effect = yes
			# Set prestige
			add_scaled_artifact_modifier_prestige_effect = yes
			hunting_magical_game_effect = yes
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			}
			remove_artifact_modifier = artifact_placeholder_modifier
			set_variable = {
				name = animal_type
				value = scope:owner.var:animal_type
			}
			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}
			hunt_animal_artifact_modifier_selection_effect = yes
			if = {
				limit = { scope:legendary = yes }
				set_variable = { name = legendary }
				add_scaled_artifact_modifier_majesty_effect = yes
				add_scaled_artifact_modifier_combat_effect = yes
			}
		}
		scope:owner = {
			remove_variable = adventure_artifact_location
			remove_variable = adventure_artifact_hunter
		}
	}
}

# Shahmarah
create_artifact_shahmaran_heart_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		get_random_artifact_quality_and_wealth_effect = yes
		if = { #If we have set the location we use it for the materials
			limit = { exists = scope:location }
			scope:location = { title_province = { add_to_list = artifact_material_sources } }
		}

		scope:owner = {
			# Create the artifact
			create_artifact = {
				name = artifact_shahmaran_heart_name
				creator = scope:owner
				description = placeholder
				visuals = small_box
				type = shahmaran_heart
				modifier = artifact_shahmaran_heart_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}
			}
		}
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}
		scope:newly_created_artifact = {
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_shahmaran_heart_description

			add_artifact_aspect_modifier_effect = { NAME = blood VALUE = 3 }

			random_list = {
				10 = {		
					add_scaled_artifact_modifier_prestige_effect = yes
					add_2_scaled_artifact_modifier_rulership_effect = yes
					add_scaled_artifact_modifier_scholarship_effect = yes
					add_scaled_artifact_modifier_grandeur_small_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_prestige_effect = yes
					add_2_scaled_artifact_modifier_majesty_effect = yes
					add_scaled_artifact_modifier_scholarship_effect = yes
					add_scaled_artifact_modifier_grandeur_small_effect = yes
				}
			}
		}
		remove_variable = artifact_origin_location
	}
}

# Simurghs
create_artifact_simurgh_feathers_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes
		# Get artifact quality, wealth, and materials
		if = { #If we have set the location we use it for the materials
			limit = { exists = scope:location }
			scope:location = { title_province = { add_to_list = artifact_material_sources } }
		}

		scope:owner = {
			# Create the artifact
			create_artifact = {
				name = artifact_simurgh_feathers_name
				creator = scope:owner
				description = placeholder
				visuals = riches
				type = simurgh_feathers
				modifier = artifact_simurgh_feathers_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}
			}
		}
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}
		scope:newly_created_artifact = {
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_simurgh_feathers_description

			add_artifact_aspect_modifier_effect = { NAME = fire VALUE = 3 }

			random_list = {
				10 = {		
					add_scaled_artifact_modifier_prestige_effect = yes
					add_2_scaled_artifact_modifier_rulership_effect = yes
					add_scaled_artifact_modifier_scholarship_effect = yes
					add_scaled_artifact_modifier_grandeur_small_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_prestige_effect = yes
					add_2_scaled_artifact_modifier_majesty_effect = yes
					add_scaled_artifact_modifier_scholarship_effect = yes
					add_scaled_artifact_modifier_grandeur_small_effect = yes
				}
			}
		}
		remove_variable = artifact_origin_location
	}
}

## Animal Toxin Generator
create_artifact_animal_toxin_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	save_scope_value_as = { name = legendary value = $LEGENDARY$ }
	scope:owner = {
		set_variable = { name = animal_type value = $ANIMAL$ days = 5 }
		if = {
			limit = {
				OR = {
					NOT = { exists = var:animal_type }
					var:animal_type ?= flag:none
				}
			}
			random_list = {
				8 = {
					hunt_activity_standard_game_effect = { PROVINCE = scope:hunter.location HUNTER = scope:hunter }
				}
				2 = {
					hunt_activity_dangerous_game_effect = { PROVINCE = scope:hunter.location }
				}
			}
		}
	}
	if = {
		limit = { exists = scope:adventurer }
		scope:adventurer = { save_scope_as = creator }
	}
	else = {
		scope:hunter = { save_scope_as = creator }
	}
	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		animal_artifact_wealth_quality_effect = yes
		get_animal_hunt_location_effect = yes
		scope:location = { add_to_list = artifact_material_sources }
		scope:owner = {
			create_artifact = {
				name = artifact_animal_toxin_name
				creator = scope:creator
				description = placeholder
				type = animal_toxin
				visuals = pocket_pouch
				modifier = artifact_animal_toxins_modifier
				save_scope_as = newly_created_artifact
				wealth = scope:wealth
				quality = scope:quality
				decaying = yes
			}
		}
		scope:newly_created_artifact = {
			set_max_durability = 60
			set_artifact_feature_group = animal_toxin_infusion
			set_artifact_description = artifact_animal_toxin_description
			set_variable = {
				name = animal_type
				value = scope:owner.var:animal_type
			}
			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}
			# Set grandeur
			add_scaled_artifact_modifier_grandeur_small_effect = yes
			hunting_magical_game_effect = yes
			if = {
				limit = { rarity = common }
				random_list = {
					50 = {
						add_artifact_aspect_modifier_effect = { NAME = nature VALUE = 1 }
					}
					50 = {
						add_artifact_aspect_modifier_effect = { NAME = death VALUE = 1 }
					}
				}
			}
			else_if = {
				limit = { rarity = masterwork }
				random_list = {
					50 = {
						add_artifact_aspect_modifier_effect = { NAME = nature VALUE = 2 }
					}
					50 = {
						add_artifact_aspect_modifier_effect = { NAME = death VALUE = 2 }
					}
				}
			}
			else_if = {
				limit = { rarity = famed }
				random_list = {
					50 = {
						add_artifact_aspect_modifier_effect = { NAME = nature VALUE = 3 }
					}
					50 = {
						add_artifact_aspect_modifier_effect = { NAME = death VALUE = 3 }
					}
				}
			}
			else_if = {
				limit = { rarity = illustrious }
				random_list = {
					50 = {
						add_artifact_aspect_modifier_effect = { NAME = nature VALUE = 4 }
					}
					50 = {
						add_artifact_aspect_modifier_effect = { NAME = death VALUE = 4 }
					}
				}
			}

			random_list = {
				10 = {		
					add_scaled_artifact_modifier_intrigue_effect = yes
				}
				10 = {
					add_2_scaled_artifact_modifier_intrigue_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_scholarship_effect = yes
				}
			}
		}
		scope:owner = {
			remove_variable = adventure_artifact_location
			remove_variable = adventure_artifact_hunter
		}
	}
}

## Rock Giant/Elemental Gems
create_artifact_animal_gem_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	save_scope_value_as = { name = legendary value = $LEGENDARY$ }
	scope:owner = {
		set_variable = { name = animal_type value = $ANIMAL$ days = 5 }
		if = {
			limit = {
				OR = {
					NOT = { exists = var:animal_type }
					var:animal_type ?= flag:none
				}
			}
			random_list = {
				8 = {
					hunt_activity_standard_game_effect = { PROVINCE = scope:hunter.location HUNTER = scope:hunter }
				}
				2 = {
					hunt_activity_dangerous_game_effect = { PROVINCE = scope:hunter.location }
				}
			}
		}
	}
	if = {
		limit = { exists = scope:adventurer }
		scope:adventurer = { save_scope_as = creator }
	}
	else = {
		scope:hunter = { save_scope_as = creator }
	}
	hidden_effect_new_object = {
		# Get artifact quality, location, and animal
		animal_artifact_wealth_quality_effect = yes
		get_animal_hunt_location_effect = yes
		scope:location = { add_to_list = artifact_material_sources }
		scope:owner = {
			create_artifact = {
				name = artifact_animal_gem_name
				creator = scope:owner
				description = placeholder
				type = animal_gem
				visuals = diamond
				modifier = artifact_animal_gem_modifier
				save_scope_as = newly_created_artifact
				wealth = scope:wealth
				quality = scope:quality
			}
		}
		scope:newly_created_artifact = {
			set_max_durability = 60
			set_artifact_feature_group = animal_gem_infusion
			set_artifact_description = artifact_animal_gem_description

			# Set grandeur
			add_scaled_artifact_modifier_grandeur_small_effect = yes
			add_scaled_artifact_modifier_prestige_effect = yes
			hunting_magical_game_effect = yes
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			}
			remove_artifact_modifier = artifact_placeholder_modifier
			set_variable = {
				name = animal_type
				value = scope:owner.var:animal_type
			}
			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}
			hunt_animal_artifact_modifier_selection_effect = yes
			if = {
				limit = { scope:legendary = yes }
				set_variable = { name = legendary }
				add_scaled_artifact_modifier_majesty_effect = yes
				add_scaled_artifact_modifier_combat_effect = yes
			}
		}
		scope:owner = {
			remove_variable = adventure_artifact_location
			remove_variable = adventure_artifact_hunter
		}
	}
}

# Wild Hunt Unique Trophy
create_artifact_wild_hunt_helmet_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	$LOCATION$ = { save_scope_as = location }


	hidden_effect_new_object = {
		# Get artifact quality, wealth, materials, and decorations
		get_random_artifact_quality_and_wealth_effect = yes

		scope:owner = {
			create_artifact = {
				name = artifact_wild_hunt_name
				creator = scope:owner
				description = placeholder
				visuals = crown
				type = wild_hunt_helmet
				modifier = artifact_wild_hunt_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}
			}
		}
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}
		scope:newly_created_artifact = {
			set_artifact_description = artifact_wild_hunt_description

			random_list = {
				25 = {
					add_scaled_artifact_modifier_majesty_effect = yes
					add_scaled_artifact_modifier_dynasty_prestige_effect = yes
				}
			}
		}
		remove_variable = artifact_origin_location
	}		
}

# Gargoyle Unique Trophy
create_artifact_gargoyle_effect = {
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	save_scope_value_as = { name = legendary value = $LEGENDARY$ }
	scope:owner = {
		set_variable = { name = animal_type value = $ANIMAL$ days = 5 }
		if = {
			limit = {
				OR = {
					NOT = { exists = var:animal_type }
					var:animal_type ?= flag:none
				}
			}
			random_list = {
				8 = {
					hunt_activity_standard_game_effect = { PROVINCE = scope:hunter.location HUNTER = scope:hunter }
				}
				2 = {
					hunt_activity_dangerous_game_effect = { PROVINCE = scope:hunter.location }
				}
			}
		}
	}
	if = {
		limit = { exists = scope:adventurer }
		scope:adventurer = { save_scope_as = creator }
	}
	else = {
		scope:hunter = { save_scope_as = creator }
	}
	hidden_effect_new_object = {
		# Get artifact quality, location, and animal
		animal_artifact_wealth_quality_effect = yes
		get_animal_hunt_location_effect = yes
		scope:location = { add_to_list = artifact_material_sources }
		scope:owner = {
			create_artifact = {
				name = artifact_gargoyle_name
				creator = scope:owner
				description = placeholder
				visuals = pocket_figurine
				type = gargoyle_figure
				modifier = artifact_gargoyle_hunt_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
			}
		}
		scope:newly_created_artifact = {
			set_artifact_description = artifact_gargoyle_description

			add_artifact_aspect_modifier_effect = { NAME = stone VALUE = 3 }

			random_list = {
				25 = {
					add_scaled_artifact_modifier_majesty_effect = yes
					add_scaled_artifact_modifier_intrigue_effect = yes
				}
			}
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			}
			remove_artifact_modifier = artifact_placeholder_modifier
			set_variable = {
				name = animal_type
				value = scope:owner.var:animal_type
			}
			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}
			hunt_animal_artifact_modifier_selection_effect = yes
			if = {
				limit = { scope:legendary = yes }
				set_variable = { name = legendary }
				add_scaled_artifact_modifier_majesty_effect = yes
				add_scaled_artifact_modifier_combat_effect = yes
			}
		}
		scope:owner = {
			remove_variable = adventure_artifact_location
			remove_variable = adventure_artifact_hunter
		}
	}		
}

# Iye Crystal Trophy
create_artifact_iye_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	$LOCATION$ = { save_scope_as = location }


	hidden_effect_new_object = {
		# Get artifact quality, wealth, materials, and decorations
		get_random_artifact_quality_and_wealth_effect = yes

		scope:owner = {
			create_artifact = {
				name = artifact_iye_name
				creator = scope:owner
				description = placeholder
				visuals = diamond
				type = iye_crystal
				modifier = artifact_iye_hunt_modifier
				wealth = 90
				quality = 90
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}
			}
		}
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}
		scope:newly_created_artifact = {
			set_artifact_description = artifact_iye_description

			add_artifact_aspect_modifier_effect = { NAME = light VALUE = 3 }

			random_list = {
				25 = {
					add_2_scaled_artifact_modifier_intrigue_effect = yes
				}
			}
		}
		remove_variable = artifact_origin_location
	}		
}

# Hunt Wall Skull Trophies
create_artifact_hunt_wall_skull_effect = {
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, location, and animal
		get_random_artifact_quality_and_wealth_effect = yes

		scope:owner = {
			create_artifact = {	
				name = artifact_hunt_wall_skull_name
				description = placeholder
				creator = scope:owner
				visuals = animal_trophy
				type = animal_skull
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}					
			}
		}
		scope:newly_created_artifact = {
			set_artifact_description = artifact_hunt_wall_skull_description
			# Set grandeur
			add_scaled_artifact_modifier_grandeur_small_effect = yes
			# Set prestige
			add_scaled_artifact_modifier_minor_prestige_effect = yes
			hunting_magical_game_effect = yes
			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
			add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			}
			remove_artifact_modifier = artifact_placeholder_modifier
		}
	}
}

# Sea Monster Unique Trophy
create_artifact_seamonster_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$HUNTER$ = { save_scope_as = hunter }
	$LOCATION$ = { save_scope_as = location }


	hidden_effect_new_object = {
		# Get artifact quality, wealth, materials, and decorations
		get_random_artifact_quality_and_wealth_effect = yes

		scope:owner = {
			create_artifact = {
				name = artifact_seamonster_name
				creator = scope:owner
				description = placeholder
				visuals = medium_box
				type = seamonster_treasure
				modifier = artifact_seamonster_hunt_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}
			}
		}
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}
		scope:newly_created_artifact = {
			set_artifact_description = artifact_seamonster_description

			random_list = {
				10 = {		
					add_scaled_artifact_modifier_prestige_effect = yes
					add_2_scaled_artifact_modifier_rulership_effect = yes
					add_scaled_artifact_modifier_scholarship_effect = yes
					add_scaled_artifact_modifier_grandeur_small_effect = yes
				}
				10 = {
					add_scaled_artifact_modifier_prestige_effect = yes
					add_2_scaled_artifact_modifier_majesty_effect = yes
					add_scaled_artifact_modifier_scholarship_effect = yes
					add_scaled_artifact_modifier_grandeur_small_effect = yes
				}
			}
		}
		remove_variable = artifact_origin_location
	}		
}

################
#SACRIFICAL DAGGERS

generate_sacrifical_dagger_age_effect = {
	random_list = {
		7 = {
			set_variable = {
				name = dagger_age
				value = {
					value = 0
					add = {
						integer_range = {
							min = 1
							max = 299
						}
					}
				}
			}
		}
		10 = {
			set_variable = {
				name = dagger_age
				value = {
					value = 0
					add = {
						integer_range = {
							min = 300
							max = 599
						}
					}
				}
			}
		}
		# Chaos of the Seventh Century
		15 = {
			set_variable = {
				name = dagger_age
				value = {
					value = 0
					add = {
						integer_range = {
							min = 600
							max = 750
						}
					}
				}
			}
		}
		# Golden Age
		50 = {
			set_variable = {
				name = dagger_age
				value = {
					value = 0
					add = {
						integer_range = {
							min = 751
							max = 1050
						}
					}
				}
			}
		}
		# Decline of the Empire
		25 = {
			set_variable = {
				name = dagger_age
				value = {
					value = 0
					add = {
						integer_range = {
							min = 1051
							max = 1200
						}
					}
				}
			}
		}
	}
}
create_artifact_sacrificial_dagger_effect = {
	# Get the character that discovered the artifact.
	$OWNER$ = { save_scope_as = owner }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, and materials
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		scope:owner = {
			create_artifact = {	
				name = artifact_sacrifical_dagger_name
				description = placeholder
				visuals = dagger
				type = dagger
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = discovered
				}
			}
		}
		generate_sacrifical_dagger_age_effect = yes
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}
		scope:newly_created_artifact = {
			get_artifact_feature_references_effect = yes
			get_sword_decoration_effect = yes
			set_artifact_feature_group = sacrifical_decoration
			set_artifact_description = artifact_sacrifical_dagger_description

			# Set grandeur
			add_scaled_artifact_modifier_prowess_effect  = yes
			artifact_magical_infusion_effect = yes
			
			if = {
				limit = { rarity = common }
				add_artifact_aspect_modifier_effect = { NAME = blood VALUE = 1 }
			}
			else_if = {
				limit = { rarity = masterwork }
				add_artifact_aspect_modifier_effect = { NAME = blood VALUE = 2 }
			}
			else_if = {
				limit = { rarity = famed }
				add_artifact_aspect_modifier_effect = { NAME = blood VALUE = 3 }
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_aspect_modifier_effect = { NAME = blood VALUE = 4 }
			}
			random_list = {
				20 = {
					add_2_scaled_artifact_modifier_intrigue_effect = yes
				}
				20 = {
					add_2_scaled_artifact_modifier_combat_effect = yes
				}
				20 = {
					add_scaled_artifact_modifier_minor_prestige_effect = yes
				}
				20 = {
					add_scaled_artifact_modifier_devotion_effect = yes
				}
				5 = {
					trigger = { rarity = common }
				}
			}
			remove_artifact_modifier = artifact_placeholder_modifier
		}
		remove_variable = dagger_age # Not needed anymore
		remove_variable = artifact_origin_location
	}	
}

###########
# WEAPONS #
###########

create_artifact_aelfir_weapon_effect = {
	# Get the character the artifact is being made for.
	# If scope:adventurer exists this will result in the history entry reading that the weapon was discovered instead of made.
	$OWNER$ = { save_scope_as = owner }
	$CREATOR$ = { save_scope_as = smith }
	if = {
		limit = { NOT = { exists = scope:location } }
		$CREATOR$ = { location = { save_scope_as = location } }
	}
	save_temporary_scope_value_as = {
		name = weapon_type_is_set
		value = $SET_WEAPON_TYPE$
	}
	if = { #Any existing dummy character gets turned into the smith
		limit = {
			exists = scope:dummy_gender
			scope:smith = scope:dummy_gender
		}
		clear_saved_scope = smith
		clear_saved_scope = dummy_gender
	}

	hidden_effect_new_object = {
		if = {
			limit = {
				scope:weapon_type_is_set = flag:no
			}
			if = {
				limit = {
					exists = scope:smith
				}
				set_weapon_artifact_type_effect = {
					BASE_SCOPE = scope:smith
					NO_TYPE = no
				}
				scope:smith = {
					var:artifact_weapon_type = { save_scope_as = weapon_type }
					remove_variable = artifact_weapon_type
				}
			}
			else = {
				set_weapon_artifact_type_effect = {
					BASE_SCOPE = scope:owner
					NO_TYPE = no
				}
				scope:owner = {
					var:artifact_weapon_type = { save_scope_as = weapon_type }
					remove_variable = artifact_weapon_type
				}
			}
		}
		else = {
			scope:weapon_type_is_set = { save_scope_as = weapon_type }
		}
		# Get artifact quality and wealth.
		random_list = {
			4 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Get the type of weapon to forge. Defaults to sword if an invalid type is provided.
		# GH TODO: Add other weapon types once we get the models for them
		if = {
			limit = { always = yes }
			if = {
				limit = {
					scope:host ?= $OWNER$
					scope:activity ?= { has_activity_type = activity_tournament }
					NOT = { $OWNER$ = { has_character_flag = event_4500_happening } }
				}
				random_list = {
					1 = {
						tournament_contest_weapon_prize_effect = { VISUALS = longsword TYPE = sword }
					}
					1 = {
						tournament_contest_weapon_prize_effect = { VISUALS = sword TYPE = sword }
					}
				}
			}
			else = {
				if = {
					limit = { scope:newly_created_artifact = { rarity = illustrious } }
					create_artifact = {
						name = artifact_sword_name
						description = placeholder # Will be re-generated once decorations are added in the post-creation effects.
						visuals = gh_aelfir_sword_gold_visuals
						type = sword
						modifier = artifact_prowess_1_modifier
						wealth = scope:wealth
						quality = scope:quality
						save_scope_as = newly_created_artifact
						history = { type = created_before_history }
					}
				}
				else = {
					create_artifact = {
						name = artifact_sword_name
						description = placeholder # Will be re-generated once decorations are added in the post-creation effects.
						visuals = gh_aelfir_sword_bare_visuals
						type = sword
						modifier = artifact_prowess_1_modifier
						wealth = scope:wealth
						quality = scope:quality
						save_scope_as = newly_created_artifact
						history = { type = created_before_history }
					}
				}
			}

			scope:newly_created_artifact = {
				set_artifact_feature = GH_blade_metal_unknown_dark
				get_sword_decoration_effect = yes
				get_artifact_feature_references_effect = yes
				set_artifact_description = artifact_sword_description
			}
		}

		scope:newly_created_artifact = {
			add_artifact_history = {
				type = discovered
				location = scope:location
				actor = scope:smith
				recipient = scope:owner
			}
			# Prowess from weapon rarity
			add_scaled_artifact_modifier_prowess_effect = yes

			if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
					OR = {
						has_artifact_feature_group = blade_decoration
						has_artifact_feature_group = hilt_decoration
						has_artifact_feature_group = shaft_decoration
						has_artifact_feature_group = head_decoration
						scope:weapon_type = flag:artifact_weapon_type_dagger
					}
				}
				if = {
					limit = { scope:weapon_type = flag:artifact_weapon_type_dagger }
					add_2_scaled_artifact_modifier_intrigue_effect = yes
				}
				else = {
					add_2_scaled_artifact_modifier_combat_effect = yes
				}
			}
			else_if = {
				limit = {
					OR = {
						rarity = common
						rarity = masterwork
					}
					OR = {
						has_artifact_feature_group = blade_decoration
						has_artifact_feature_group = hilt_decoration
						has_artifact_feature_group = shaft_decoration
						has_artifact_feature_group = head_decoration
						scope:weapon_type = flag:artifact_weapon_type_dagger
					}
				}
				if = {
					limit = { scope:weapon_type = flag:artifact_weapon_type_dagger }
					add_scaled_artifact_modifier_intrigue_effect = yes
				}
				else = {
					add_scaled_artifact_modifier_combat_effect = yes
				}
			}
			else_if = {
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
					# No decorations
				}
				if = {
					limit = { scope:weapon_type = flag:artifact_weapon_type_dagger }
					add_scaled_artifact_modifier_intrigue_effect = yes
					add_artifact_modifier = artifact_prowess_no_decorations_high_tier_modifier
				}
				else = {
					add_scaled_artifact_modifier_combat_effect = yes
					add_artifact_modifier = artifact_prowess_no_decorations_high_tier_modifier
				}
			}
			else_if = {
				limit = {
					rarity = masterwork
					# No decorations
				}
				if = {
					limit = { scope:weapon_type = flag:artifact_weapon_type_dagger }
					add_scaled_artifact_modifier_intrigue_effect = yes
					add_artifact_modifier = artifact_prowess_no_decorations_modifier
				}
				else = {
					add_artifact_modifier = artifact_prowess_no_decorations_medium_tier_modifier
				}
			}
			else = {
				add_artifact_modifier = artifact_prowess_no_decorations_modifier
			}

			# Save the quality and wealth of this artifact in case we need to reference it later.
			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}
		}
	}
}

###################
# MAGIC MODIFIERS #
###################

# These can be used in a random effect block or individually for preset modifier bonuses
add_artifact_magic_resistance_modifier_effect = {
	add_to_variable_list = {
		name = artifact_magic_resistance_modifier_list
		target = flag:magic_resistance
	}
	set_variable = {
		name = artifact_magic_resistance
		value = $VALUE$
	}
}

add_artifact_magic_regeneration_modifier_effect = {
	add_to_variable_list = {
		name = artifact_magic_regeneration_modifier_list
		target = flag:magic_regeneration
	}
	set_variable = {
		name = artifact_magic_regeneration
		value = $VALUE$
	}
}

add_artifact_magic_overwhelmation_modifier_effect = {
	add_to_variable_list = {
		name = artifact_magic_overwhelmation_modifier_list
		target = flag:magic_overwhelmation
	}
	set_variable = {
		name = artifact_magic_overwhelmation
		value = $VALUE$
	}
}

add_artifact_aspect_modifier_effect = {
	if = {
		limit = { NOT = { $VALUE$ = 0 } }
		custom_description = {
			text = gain_$NAME$_artifact_modifier
			value = $VALUE$
			
			add_to_variable_list = {
				name = artifact_aspect_modifier_list
				target = flag:$NAME$
			}
			if = {
				limit = { 
					NOT = { exists = var:$NAME$ }
				}
				set_variable = {
					name = $NAME$
					value = $VALUE$
				}
			}
			else = {
				change_variable = {
					name = $NAME$
					add = $VALUE$
				}
			}
		}
	}
}

remove_artifact_aspect_modifier_effect = {
	remove_list_variable = {
		name = artifact_aspect_modifier_list
		target = flag:$NAME$
	}
	remove_variable = $NAME$
}

add_artifact_extended_baseline_modifier_effect = {
	if = {
		limit = { NOT = { $VALUE$ = 0 } }
		custom_description = {
			text = gain_extended_baseline_artifact_modifier
			value = $VALUE$
			
			if = {
				limit = { 
					NOT = { exists = var:extended_baseline }
				}
				set_variable = {
					name = extended_baseline
					value = $VALUE$
				}
			}
			else = {
				change_variable = {
					name = extended_baseline
					add = $VALUE$
				}
			}
		}
	}
}

remove_artifact_extended_baseline_modifier_effect = {
	remove_variable = extended_baseline
}

random_artifact_magic_resistance_modifier_effect = {
	if = {
		limit = { rarity = common }
		add_artifact_magic_resistance_modifier_effect = { VALUE = 5 }
	}
	else_if = {
		limit = { rarity = masterwork }
		add_artifact_magic_resistance_modifier_effect = { VALUE = 10 }
	}
	else_if = {
		limit = { rarity = famed }
		add_artifact_magic_resistance_modifier_effect = { VALUE = 15 }
	}
	else_if = {
		limit = { rarity = illustrious }
		add_artifact_magic_resistance_modifier_effect = { VALUE = 20 }
	}
}

random_artifact_magic_regeneration_modifier_effect = {
	if = {
		limit = { rarity = common }
		add_artifact_magic_regeneration_modifier_effect = { VALUE = 3 }
	}
	else_if = {
		limit = { rarity = masterwork }
		add_artifact_magic_regeneration_modifier_effect = { VALUE = 6 }
	}
	else_if = {
		limit = { rarity = famed }
		add_artifact_magic_regeneration_modifier_effect = { VALUE = 9 }
	}
	else_if = {
		limit = { rarity = illustrious }
		add_artifact_magic_regeneration_modifier_effect = { VALUE = 12 }
	}
}

random_artifact_magic_overwhelmation_modifier_effect = {
	if = {
		limit = { rarity = common }
		add_artifact_magic_overwhelmation_modifier_effect = { VALUE = 3 }
	}
	else_if = {
		limit = { rarity = masterwork }
		add_artifact_magic_overwhelmation_modifier_effect = { VALUE = 6 }
	}
	else_if = {
		limit = { rarity = famed }
		add_artifact_magic_overwhelmation_modifier_effect = { VALUE = 9 }
	}
	else_if = {
		limit = { rarity = illustrious }
		add_artifact_magic_overwhelmation_modifier_effect = { VALUE = 12 }
	}
}

gh_apply_enchantment_effect = { # Application of the desired (or random) weapon enchantment
	if = {
		limit = {
			exists = scope:smith
			NOT = { exists = scope:adventurer }
		}
		scope:smith = {
			if = {
				limit = { exists = var:chosen_weapon_enchantment }
				if = {
					limit = { NOT = { this = flag:none } }
					switch = {
						trigger = scope:smith.var:chosen_weapon_enchantment
						flag:perdition = { gh_apply_enchantment_perdition_effect = yes }
					}
				}
				remove_variable = chosen_weapon_enchantment
			}
		}
	}
	else = {
		random_list = {
			10 = {}
			1 = {
				trigger = { scope:newly_created_artifact = { NOT = { rarity = common } } }
				modifier = {
					scope:newly_created_artifact = { rarity = famed }
					add = 4
				}
				modifier = {
					scope:newly_created_artifact = { rarity = illustrious }
					add = 9
				}
				gh_pick_and_apply_random_enchantment_effect = yes
			}
		}
	}
}

gh_pick_and_apply_random_enchantment_effect = {
	if = { ## GH TODO: Implement more enchantments and make the effect into a random list
		limit = { gh_enchantment_perdition_trigger = yes }
		gh_apply_enchantment_perdition_effect = yes
	}
}

gh_apply_enchantment_perdition_effect = { # Perdition Enchantment
	scope:newly_created_artifact = {
		if = {
			limit = { rarity = illustrious }
			random_list = {
				1 = {
					add_artifact_modifier = artifact_enemy_hard_casualty_modifier_11_modifier
					add_artifact_modifier = artifact_dread_baseline_add_4_modifier
				}
				3 = {
					add_artifact_modifier = artifact_enemy_hard_casualty_modifier_10_modifier
					add_artifact_modifier = artifact_dread_baseline_add_3_modifier
				}
				1 = {
					add_artifact_modifier = artifact_enemy_hard_casualty_modifier_9_modifier
					add_artifact_modifier = artifact_dread_baseline_add_2_modifier
				}
			}
		}
		else_if = {
			limit = { rarity = famed }
			random_list = {
				1 = {
					add_artifact_modifier = artifact_enemy_hard_casualty_modifier_10_modifier
					add_artifact_modifier = artifact_dread_baseline_add_3_modifier
				}
				3 = {
					add_artifact_modifier = artifact_enemy_hard_casualty_modifier_9_modifier
					add_artifact_modifier = artifact_dread_baseline_add_2_modifier
				}
				1 = {
					add_artifact_modifier = artifact_enemy_hard_casualty_modifier_8_modifier
					add_artifact_modifier = artifact_dread_baseline_add_1_modifier
				}
			}
		}
		else_if = {
			limit = { rarity = masterwork }
			random_list = {
				1 = {
					add_artifact_modifier = artifact_enemy_hard_casualty_modifier_9_modifier
					add_artifact_modifier = artifact_dread_baseline_add_2_modifier
				}
				3 = {
					add_artifact_modifier = artifact_enemy_hard_casualty_modifier_9_modifier
					add_artifact_modifier = artifact_dread_baseline_add_1_modifier
				}
				1 = {
					add_artifact_modifier = artifact_enemy_hard_casualty_modifier_8_modifier
					add_artifact_modifier = artifact_dread_baseline_add_1_modifier
				}
			}
		}
		else_if = {
			limit = { rarity = common }
			random_list = {
				1 = {
					add_artifact_modifier = artifact_enemy_hard_casualty_modifier_9_modifier
					add_artifact_modifier = artifact_dread_baseline_add_1_modifier
				}
				3 = { add_artifact_modifier = artifact_enemy_hard_casualty_modifier_8_modifier }
				1 = { add_artifact_modifier = artifact_enemy_hard_casualty_modifier_7_modifier }
			}
		}
		set_artifact_description = perdition_enchantment_desc
	}
}

###################
# STAFFS		  #
###################


create_artifact_staff_effect = {
	# Get the character the artifact is for
	$OWNER$ = { save_scope_as = owner }
	$LOCATION$ = { save_scope_as = location }
	# Create the spell
	#generate_battle_magic_spell_effect = yes

	hidden_effect_new_object = {
		get_artifact_quality_effect = yes
		get_artifact_wealth_effect = yes

		if = {
			limit = { exists = scope:adventurer }
			create_artifact = {
				name = artifact_staff_name
				description = placeholder #will be re-generated
				visuals = staff
				type = staff
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:adventurer
					recipient = scope:owner
					type = created
				}
			}
		}
		else = {
			create_artifact = {
				name = artifact_staff_name
				description = placeholder #will be re-generated
				visuals = staff
				type = staff
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:owner
					recipient = scope:owner
					type = created
				}
			}
		}
		set_variable = {
			name = artifact_origin_location
			value = scope:location
		}

		scope:newly_created_artifact = {
			set_artifact_feature_group = staff_characteristic
			set_artifact_feature_group = staff_material
			set_artifact_feature_group = staff_focus_characteristic
			set_artifact_feature_group = staff_decoration
			set_artifact_description = artifact_staff_description

			if = {
				limit = {
					OR = {
						rarity = illustrious
						rarity = famed
					}
				}
				add_scaled_artifact_modifier_prowess_effect = yes
				add_scaled_artifact_modifier_combat_effect = yes
				add_spell_to_artifact_effect = {
					SPELL = scope:new_spell_scope
					ACQUISITION_TYPE = equipped
				}
				set_artifact_as_magical = yes
			}
			else_if = {
				limit = {
					OR = {
						rarity = common
						rarity = masterwork
					}
				}
				add_spell_to_artifact_effect = {
					SPELL = scope:new_spell_scope
					ACQUISITION_TYPE = equipped
				}
				add_scaled_artifact_modifier_prowess_effect = yes
			}
			else = {
				add_artifact_modifier = artifact_prowess_no_decorations_modifier
			}
	
			# Save the quality and wealth of this artifact in case we need to 	reference it later. 
			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}
		}
	}
	remove_variable = artifact_origin_location
}


# FOGGED EFFECTS
flag_as_fogged_artifact = {
	set_variable = {
		name = fogged_artifact
		value = yes
	}
}

generate_fogged_artifact_inspiration = { #For Adventures with Inspiration Owners
	scope:this_artifact = {
		set_artifact_name = fogged_artifact_inspiration_name
		set_artifact_description = fogged_artifact_inspiration_desc
		add_scaled_artifact_modifier_fogged_effect = yes
		flag_as_fogged_artifact = yes
	}
}

generate_fogged_artifact = { #For Player Generated Artifacts
	scope:newly_created_artifact = {
		set_artifact_name = fogged_artifact_name
		set_artifact_description = fogged_artifact_desc
		add_scaled_artifact_modifier_fogged_effect = yes
		flag_as_fogged_artifact = yes
	}
}

add_scaled_artifact_modifier_fogged_effect = {
	if = {
		limit = {
			rarity = famed
		}
		random_list = {
			5 = {
				add_artifact_modifier = artifact_fogged_1_modifier
			}
			5 = {
				add_artifact_modifier = artifact_fogged_2_modifier
			}
			5 = {
				add_artifact_modifier = artifact_fogged_3_modifier
			}
			5 = {
				add_artifact_modifier = artifact_fogged_4_modifier
			}
			5 = {
				add_artifact_modifier = artifact_fogged_5_modifier
			}
		}
		add_artifact_aspect_modifier_effect = { NAME = ethereal VALUE = 1 }
	}
	if = {
		limit = {
			rarity = illustrious
		}
		random_list = {
			5 = {
				add_artifact_modifier = artifact_fogged_6_modifier
			}
			5 = {
				add_artifact_modifier = artifact_fogged_7_modifier
			}
			5 = {
				add_artifact_modifier = artifact_fogged_8_modifier
			}
			5 = {
				add_artifact_modifier = artifact_fogged_9_modifier
			}
			5 = {
				add_artifact_modifier = artifact_fogged_10_modifier
			}
		}
		add_artifact_aspect_modifier_effect = { NAME = ethereal VALUE = 2 }
	}
}

################################
# PROCEDURAL BOOKS - GRIMOIRES #
################################

create_artifact_arcana_general_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			17 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}
		
		# Fallback if no location set
		if = {
			limit = { NOT = { exists = scope:location } }
			$OWNER$.location = { save_scope_as = location }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:arcana
			SET_TOPIC = flag:arcana_general
		}
		
		# If discovered on an adventure, generate an author
		if = {
			limit = { exists = scope:location }
			create_character = {
				age = { 20 65 }
				random_traits = yes
				gender_female_chance = {
					if = {
						limit = {
							scope:location.faith = { has_doctrine_parameter = clergy_must_be_male }
						}
						add =  0
					}
					else_if = {
						limit = {
							scope:location.faith = { has_doctrine_parameter = clergy_must_be_female }
						}
						add =  100
					}
					else = {
						add = 50
					}
				}
				dynasty = none
				faith = scope:location.faith
				culture = scope:location.culture
				location = scope:location
				save_scope_as = author
			}
		}
		
		scope:newly_created_artifact = {
			set_variable = {
				name = author
				value = scope:author
			}
			if = {
				limit = { exists = scope:location }
				set_variable = {
					name = writing_culture
					value = scope:location.culture
				}
			}
			random_list = {
				1 = {
					trigger = { rarity = masterwork }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 2 }
				}
				1 = {
					trigger = { rarity = masterwork }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 3 }
				}
				1 = {
					trigger = { rarity = famed }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 4 }
				}
				1 = {
					trigger = { rarity = famed }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 5 }
				}
				1 = {
					trigger = { rarity = illustrious }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 6 }
				}
				1 = {
					trigger = { rarity = illustrious }
					add_random_magic_knowledge_entries_relevant_to_culture_effect = { CULTURE = scope:location.culture COUNT = 7 }
				}
			}
			random_in_list = {
				variable = knowledge_entry_list
				prev = { set_variable = { name = namesake_knowledge_entry value = prev } }
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_arcana_magic_school_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			17 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Fallback if no location set
		if = {
			limit = { NOT = { exists = scope:location } }
			$OWNER$.location = { save_scope_as = location }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:arcana
			SET_TOPIC = flag:arcana_magic_school
		}
		
		# If discovered on an adventure, generate an author
		if = {
			limit = { exists = scope:location }
			create_character = {
				age = { 20 65 }
				random_traits = yes
				gender_female_chance = {
					if = {
						limit = {
							scope:location.faith = { has_doctrine_parameter = clergy_must_be_male }
						}
						add =  0
					}
					else_if = {
						limit = {
							scope:location.faith = { has_doctrine_parameter = clergy_must_be_female }
						}
						add =  100
					}
					else = {
						add = 50
					}
				}
				dynasty = none
				faith = scope:location.faith
				culture = scope:location.culture
				location = scope:location
				save_scope_as = author
			}
		}
		
		scope:newly_created_artifact = {
			set_variable = {
				name = author
				value = scope:author
			}
			random_list = {
				1 = {
					trigger = { rarity = masterwork }
					add_random_spell_knowledge_entries_from_culture_magic_school_effect = { CULTURE = scope:location.culture COUNT = 2 }
				}
				1 = {
					trigger = { rarity = masterwork }
					add_random_spell_knowledge_entries_from_culture_magic_school_effect = { CULTURE = scope:location.culture COUNT = 3 }
				}
				1 = {
					trigger = { rarity = famed }
					add_random_spell_knowledge_entries_from_culture_magic_school_effect = { CULTURE = scope:location.culture COUNT = 4 }
					random = {
						chance = 25
						assign_magic_school_knowledge_entry_effect = { MAGIC_SCHOOL = scope:newly_created_artifact.var:magic_school }
					}
				}
				1 = {
					trigger = { rarity = famed }
					add_random_spell_knowledge_entries_from_culture_magic_school_effect = { CULTURE = scope:location.culture COUNT = 5 }
					random = {
						chance = 25
						assign_magic_school_knowledge_entry_effect = { MAGIC_SCHOOL = scope:newly_created_artifact.var:magic_school }
					}
				}
				1 = {
					trigger = { rarity = illustrious }
					add_random_spell_knowledge_entries_from_culture_magic_school_effect = { CULTURE = scope:location.culture COUNT = 6 }
					random = {
						chance = 50
						assign_magic_school_knowledge_entry_effect = { MAGIC_SCHOOL = scope:newly_created_artifact.var:magic_school }
					}
				}
				1 = {
					trigger = { rarity = illustrious }
					add_random_spell_knowledge_entries_from_culture_magic_school_effect = { CULTURE = scope:location.culture COUNT = 7 }
					random = {
						chance = 50
						assign_magic_school_knowledge_entry_effect = { MAGIC_SCHOOL = scope:newly_created_artifact.var:magic_school }
					}
				}
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

# GH TODO: Use this for procedural grimoires
## Mayikprolollan Trove Books
#create_artifact_random_mayikprolollan_trove_book_effect = {
#	if = {
#		limit = { NOT = { exists = scope:owner } }
#		save_scope_as = owner
#	}
#	# First, determine the quality of the work
#	get_random_artifact_quality_and_wealth_effect = yes
#	set_variable = {
#		name = wealth
#		value = scope:wealth
#	}
#	# Determine the age of the original work
#	generate_mayikprolollan_book_original_age_effect = yes
#	# Pick the subject and topic
#	random_list = {
#		1 = {
#			set_variable = { name = book_artifact_subject value = flag:secret_histories }
#			set_variable = { name = book_artifact_topic value = flag:secret_histories_chronicle }
#		}
#		1 = {
#			trigger = {
#				exists = var:book_original_age
#				var:book_original_age >= 500
#			}
#			generate_date_range_effect = {  
#				NAME = date_range
#				MIN_YEAR = 1
#				MAX_YEAR = var:book_original_age
#				MIN_LENGTH = 30
#				MAX_LENGTH = 300
#			}
#			set_variable = { name = book_artifact_subject value = flag:secret_histories }
#			set_variable = { name = book_artifact_topic value = flag:secret_histories_secret_society }
#		}
#		1 = {
#			set_variable = { name = book_artifact_subject value = flag:secret_histories }
#			set_variable = { name = book_artifact_topic value = flag:secret_histories_cultural_legends }
#			set_variable = book_needs_topic_culture
#		}
#	}
#	# Create the artifact
#	create_artifact = {
#		name = placeholder
#		description = placeholder
#		type = book
#		visuals = book
#		wealth = scope:wealth
#		quality = scope:quality
#		modifier = artifact_placeholder_modifier
#		save_scope_as = newly_created_artifact
#	}
#	scope:newly_created_artifact = {
#		set_artifact_feature_group = book_topic
#		set_artifact_feature_group = book_title
#		set_variable = mayikprolollan_trove_item
#		# Grab various random pieces of data that may come useful when generating flavor for the book.
#		# These won't necessarily always need to be used
#		set_variable = {
#			name = book_original_age
#			value = prev.var:book_original_age
#		}
#		# Determine the culture of the original text
#		random_culture_global = {
#			limit = {
#				GH_no_writing_culture_trigger = no
#				has_cultural_era_or_later = culture_era_early_medieval
#			}
#			weight = {
#				base = 0
#				modifier = {
#					add = 5
#					culture_number_of_counties > 0
#				}
#				modifier = {
#					add = 10
#					culture_number_of_counties > 5
#				}
#				modifier = {
#					add = 15
#					culture_number_of_counties > 10
#				}
#				modifier = {
#					add = 20
#					culture_number_of_counties > 20
#				}
#				# Since the Mayikprolollan is Aversarian, Aversarian books will be intristically more likely
#				modifier = {
#					add = 20
#					has_cultural_pillar = heritage_aversarian
#				}
#			}
#			save_scope_as = book_original_culture
#			prev = {
#				set_variable = {
#					name = book_original_culture
#					value = prev
#				}
#			}
#		}
#		random_county = {
#			limit = {
#				trigger_if = {
#					limit = {  
#						scope:book_original_culture = { has_cultural_pillar = heritage_sjalvolki }
#						exists = empire
#					}
#					OR = {
#						empire = title:e_easternkatraddia
#						empire = title:e_easternkatraddia90707
#					}
#				}
#				trigger_else = {
#					culture = scope:book_original_culture
#				}
#			}
#			prev = {
#				set_variable = {
#					name = book_origin_county
#					value = prev
#				}
#			}
#			save_scope_as = book_origin_county
#		}
#		random_county = {
#			limit = {
#				squared_distance = {
#					target = scope:book_origin_county
#					value <= medium_adventure_max_length
#				}
#			}
#			prev = {
#				set_variable = {
#					name = book_topic_county
#					value = prev
#				}
#				remove_variable = book_needs_topic_culture
#			}
#			save_scope_as = book_topic_county
#		}
#		# Set authorship type
#		random_list = {
#			20 = {
#				# Author unknown
#				set_variable = {
#					name = authorship_type
#					value = flag:unknown_author
#				}
#			}
#			10 = {
#				# Author writing under pseudonym
#				set_variable = {
#					name = authorship_type
#					value = flag:pseudonym_author
#				}
#			}
#			5 = {
#				# Pseudo-Author (Author claiming to be some other, known author)
#				set_variable = {
#					name = authorship_type
#					value = flag:pseudo_author
#				}
#			}
#			65 = {
#				# Known author
#				set_variable = {
#					name = authorship_type
#					value = flag:known_author
#				}
#			}
#		}
#		# Pick the author's faith
#		scope:book_original_culture = {
#			random_culture_county = {
#				faith = { save_scope_as = book_original_faith }
#			}
#		}
#		# Create the author
#		#To create the peasant
#		create_character = {
#			age = { 20 65 }
#			random_traits = yes
#			gender_female_chance = 20
#			dynasty = none
#			faith = scope:book_original_faith
#			culture = scope:book_original_culture
#			location = scope:book_origin_county.title_province
#			save_scope_as = author
#		}
#		set_variable = {
#			name = author
#			value = scope:author
#		}
#		# Generate the description for the book
#		set_artifact_description = gh_artifact_mayikprolollan_trove_book_description
#		# Generate the updated title - final title for the book
#		set_artifact_name = artifact_book_title
#		# Apply modifiers
#		remove_artifact_modifier = artifact_placeholder_modifier
#		if = {
#			limit = {
#				exists = prev.var:book_artifact_subject
#				prev.var:book_artifact_subject = flag:secret_histories
#			}
#			add_scaled_artifact_modifier_intrigue_effect = yes
#			add_scaled_artifact_modifier_scholarship_effect = yes
#		}
#	}
#	# Cleanup
#	scope:author = {
#		death = {
#			death_reason = death_vanished 
#		}
#	}
#	remove_variable = wealth
#	remove_variable = book_original_age
#	remove_variable = book_artifact_subject
#	remove_variable = book_artifact_topic
#	if = {
#		limit = { exists = var:date_range_lower_year }
#		remove_variable = date_range_lower_year
#	}
#	if = {
#		limit = { exists = var:date_range_upper_year }
#		remove_variable = date_range_upper_year
#	}
#}

################################
# HISTORICAL BOOKS - RELIGIOUS #
################################

create_artifact_religious_scripture_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	save_scope_value_as = {
		name = book_uses_template
		value = flag:religious
	}
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:learning
			SET_TOPIC = flag:religious
		}
		
		scope:newly_created_artifact = { 
			set_variable = {
				name = faith_override
				value = $FAITH$
			}
			# Some faiths have a very large scripture
			if = {
				limit = {
					OR = {
						$FAITH$.religion = religion:wardenism_religion
					}
				}
				set_artifact_feature = book_topic_learning_religious_big
				# Massive books are hard to come by, even without fancy illustrations, covers or calligraphy
				if = {
					limit = {
						OR = {
							rarity = common
							rarity = masterwork
						}
					}
					set_artifact_rarity = famed
				}
			}
			set_artifact_feature = book_title_learning_religious
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_the_godherja_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:learning
			SET_TOPIC = flag:religious
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:the_godherja
			}
			initialize_godherja_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

#############################################
# HISTORICAL BOOKS - NON (AND SEMI) FICTION #
#############################################

create_artifact_dragon_tale_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:diplomacy
			SET_TOPIC = flag:no
		}
		
		scope:newly_created_artifact = {
			set_variable = {
				name = historical_book
				value = flag:dragon_tale
			}
			random_list = {
				1 = {
					trigger = { exists = scope:location }
					set_variable = {
						name = writing_culture
						value = scope:location.culture
					}
				}
				1 = {
					set_variable = {
						name = writing_culture
						value = culture:westernimperial
					}
				}
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
			
			add_scaled_artifact_modifier_prestige_effect = yes
			add_scaled_artifact_modifier_combat_effect = yes
		}
	}
}

create_artifact_womanknights_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:diplomacy
			SET_TOPIC = flag:no
		}
		
		scope:newly_created_artifact = {
			set_variable = {
				name = historical_book
				value = flag:womanknights
			}
			random_list = {
				1 = {
					trigger = { exists = scope:location }
					set_variable = {
						name = writing_culture
						value = scope:location.culture
					}
				}
				1 = {
					set_variable = {
						name = writing_culture
						value = culture:carsavisians
					}
				}
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
			
			add_scaled_artifact_modifier_prestige_effect = yes
			add_scaled_artifact_modifier_combat_effect = yes
		}
	}
}

##################################
# HISTORICAL BOOKS - TRAVELOGUES #
##################################

create_artifact_seventy_seven_cities_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:diplomacy
			SET_TOPIC = flag:no
		}
		
		scope:newly_created_artifact = {
			set_variable = {
				name = historical_book
				value = flag:seventy_seven_cities
			}
			random_list = {
				1 = {
					trigger = { exists = scope:location }
					set_variable = {
						name = writing_culture
						value = scope:location.culture
					}
				}
				1 = {
					set_variable = {
						name = writing_culture
						value = culture:westernimperial
					}
				}
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_pocket_guide_to_aversaria_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }

	hidden_effect_new_object = {
		random_list = {
			12 = { set_artifact_rarity_masterwork = yes }
			7 = { set_artifact_rarity_masterwork = yes }
			1 = { set_artifact_rarity_famed = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:stewardship
			SET_TOPIC = flag:stewardship_rule
		}

		scope:newly_created_artifact = {
			set_variable = {
				name = historical_book
				value = flag:pocket_guide_to_aversaria
			}
			random_list = {
				1 = {
					trigger = { exists = scope:location }
					set_variable = {
						name = writing_culture
						value = scope:location.culture
					}
				}
				1 = {
					set_variable = {
						name = writing_culture
						value = culture:westernimperial
					}
				}
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

####################
# BOTANY & ZOOLOGY #
####################

create_artifact_manswelbestiarium_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }

	hidden_effect_new_object = {
		random_list = {
			12 = { set_artifact_rarity_masterwork = yes }
			7 = { set_artifact_rarity_masterwork = yes }
			1 = { set_artifact_rarity_famed = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:hunter
			SET_TOPIC = flag:hunter
		}

		scope:newly_created_artifact = {
			set_variable = {
				name = historical_book
				value = flag:manswelbestiarium
			}
			random_list = {
				1 = {
					trigger = { exists = scope:location }
					set_variable = {
						name = writing_culture
						value = scope:location.culture
					}
				}
				1 = {
					set_variable = {
						name = writing_culture
						value = culture:carsavisians
					}
				}
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

################################
# HISTORICAL BOOKS - GRIMOIRES #
################################

#################
# Runic Scrolls #
#################

create_artifact_runic_scroll_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact = {	
			name = placeholder # Will be regenerated in the post-creation effects
			description = placeholder # Will be regenerated in the post-creation effects
			visuals = scroll
			type = runic_scroll
			modifier = artifact_monthly_learning_lifestyle_xp_1_modifier
			save_scope_as = newly_created_artifact
			wealth = scope:wealth
			quality = scope:quality
		}
		scope:newly_created_artifact = { 
			add_scaled_artifact_modifier_majesty_effect = yes
			random_list = {
				1 = {
					set_variable = { name = writing_culture value = culture:towerlander_aelfir_culture }
				}
				1 = {
					trigger = { scope:location ?= { geographical_region = world_sarradon } }
					set_variable = { name = writing_culture value = culture:sarradonian_desert_aelfir_culture }
				}
			}
			scope:location.culture ?= {
				random_in_list = {
					variable = magic_school_list
					var:magic_school = {
						random_in_list = {
							variable = spell_list
							save_temporary_scope_as = grimoire_spell_to_assign
							scope:newly_created_artifact = {
								assign_spell_knowledge_entry_effect = { SPELL = scope:grimoire_spell_to_assign }
								set_variable = { name = namesake_knowledge_entry value = scope:new_knowledge_entry_scope }
								#add_artifact_aspect_modifier_effect = { NAME = scope:grimoire_spell_to_assign.var:primary_aspect VALUE = X }
							}
						}
					}
				}
			}
			#set_artifact_feature = book_ink_blood
			set_artifact_name = artifact_runic_scroll_name
			set_artifact_description = artifact_runic_scroll_description
		}
	}
}

#################
# Magical Scrolls #
#################
create_artifact_magical_scroll_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Create the artifact
	create_artifact = {	
		name = placeholder # Will be regenerated in the post-creation effects
		description = placeholder # Will be regenerated in the post-creation effects
		visuals = scroll
		type = magical_scroll
		modifier = artifact_monthly_learning_lifestyle_xp_1_modifier
		save_scope_as = newly_created_artifact
		wealth = scope:wealth
		quality = scope:quality
	}
	scope:newly_created_artifact = { 
		add_scaled_artifact_modifier_majesty_effect = yes
		scope:location.culture ?= {
			random_in_list = {
				variable = magic_school_list
				var:magic_school = {
					random_in_list = {
						variable = spell_list
						save_temporary_scope_as = grimoire_spell_to_assign
						scope:newly_created_artifact = {
							assign_spell_knowledge_entry_effect = { SPELL = scope:grimoire_spell_to_assign }
							set_variable = { name = namesake_knowledge_entry value = scope:new_knowledge_entry_scope }
							#add_artifact_aspect_modifier_effect = { NAME = scope:grimoire_spell_to_assign.var:primary_aspect VALUE = X }
						}
					}
				}
			}
		}
		#set_artifact_feature = book_ink_blood
		set_artifact_name = artifact_magical_scroll_name
		set_artifact_description = artifact_magical_scroll_description
	}
}



####################
# Arcana - General #
####################

create_artifact_contents_of_silver_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:arcana
			SET_TOPIC = flag:arcana_general
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:contents_of_silver
			}
			random_list = {
				1 = {
					trigger = { exists = scope:location }
					set_variable = {
						name = writing_culture
						value = scope:location.culture
					}
				}
				1 = {
					set_variable = {
						name = writing_culture
						value = culture:carsavisians
					}
				}
			}
			add_scaled_artifact_modifier_minor_prestige_effect = yes
			add_scaled_artifact_modifier_monthly_arcana_lifestyle_xp_mult_effect = yes
			initialize_contents_of_silver_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_wisemans_friend_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:arcana
			SET_TOPIC = flag:arcana_general
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:wisemans_friend
			}
			if = {
				limit = { exists = scope:location }
				random_list = {
					1 = {
						set_variable = {
							name = writing_culture
							value = scope:location.culture
						}
					}
					1 = {
						set_variable = {
							name = writing_culture
							value = culture:carsavisians
						}
					}
				}
			}
			add_scaled_artifact_modifier_minor_prestige_effect = yes
			initialize_wisemans_friend_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_greyfen_codex_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		set_artifact_rarity_famed = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:arcana
			SET_TOPIC = flag:arcana_general
		}
		scope:newly_created_artifact = { 
			set_variable = { name = historical_unique_artifact value = yes }
			set_variable = greyfen_codex
			set_variable = {
				name = historical_book
				value = flag:greyfen_codex
			}
			if = {
				limit = { exists = scope:location }
				set_variable = {
					name = writing_culture
					value = culture:etrandanexi
				}
			}
			add_scaled_artifact_modifier_minor_prestige_effect = yes
			initialize_greyfen_codex_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

#########
# Blood #
#########

create_artifact_aeltheniax_anatomy_vol_1_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:blood
			SET_TOPIC = flag:blood_medicine
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:aeltheniax_anatomy_vol_1
			}
			random_list = {
				1 = {
					trigger = { exists = scope:location }
					set_variable = {
						name = writing_culture
						value = scope:location.culture
					}
				}
				1 = {
					set_variable = {
						name = writing_culture
						value = culture:westernimperial
					}
				}
			}
			add_scaled_artifact_modifier_aspect_effect = { ASPECT = blood }
			initialize_aeltheniax_anatomy_vol_1_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_aeltheniax_anatomy_vol_2_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_famed = yes }
			3 = { set_artifact_rarity_illustrious = yes }
		}

		set_variable = { name = quality value = scope:quality }
		set_variable = { name = wealth value = scope:wealth }

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:blood
			SET_TOPIC = flag:blood_medicine
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:aeltheniax_anatomy_vol_2
			}
			random_list = {
				1 = {
					trigger = { exists = scope:location }
					set_variable = {
						name = writing_culture
						value = scope:location.culture
					}
				}
				1 = {
					set_variable = {
						name = writing_culture
						value = culture:westernimperial
					}
				}
			}
			initialize_aeltheniax_anatomy_vol_2_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_azure_tablet_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:blood
			SET_TOPIC = flag:blood_medicine
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:azure_tablet
			}
			random_list = {
				1 = {
					trigger = { exists = scope:location }
					set_variable = {
						name = writing_culture
						value = scope:location.culture
					}
				}
				1 = {
					set_variable = {
						name = writing_culture
						value = culture:westernimperial
					}
				}
			}
			add_scaled_artifact_modifier_aspect_effect = { ASPECT = blood }
			initialize_azure_tablet_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_on_the_triune_blood_of_man_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:blood
			SET_TOPIC = flag:blood_medicine
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:on_the_triune_blood_of_man
			}
			random_list = {
				1 = {
					trigger = { exists = scope:location }
					set_variable = {
						name = writing_culture
						value = scope:location.culture
					}
				}
				1 = {
					set_variable = {
						name = writing_culture
						value = culture:westernimperial
					}
				}
			}
			add_scaled_artifact_modifier_aspect_effect = { ASPECT = blood }
			initialize_on_the_triune_blood_of_man_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

##########
# Nature #
##########

create_artifact_songwood_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}
		
		set_variable = { name = quality value = scope:quality }
		set_variable = { name = wealth value = scope:wealth }

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:nature
			SET_TOPIC = flag:nature_folklore
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:songwood
			}
			if = {
				limit = { exists = scope:location }
				random_list = {
					1 = {
						set_variable = {
							name = writing_culture
							value = scope:location.culture
						}
					}
					1 = {
						set_variable = {
							name = writing_culture
							value = culture:carsavisians
						}
					}
				}
			}
			add_scaled_artifact_modifier_majesty_effect = yes
			initialize_songwood_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

#########
# Dream #
#########

create_artifact_the_voyagers_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			9 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:dream
			SET_TOPIC = flag:dream_architecture
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:the_voyagers
			}
			if = {
				limit = { exists = scope:location }
				random_list = {
					1 = {
						set_variable = {
							name = writing_culture
							value = scope:location.culture
						}
					}
					1 = {
						set_variable = {
							name = writing_culture
							value = culture:tasurmad
						}
					}
				}
			}
			add_scaled_artifact_modifier_majesty_effect = yes
			initialize_the_voyagers_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_clarifications_on_the_ivory_sea_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			9 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:dream
			SET_TOPIC = flag:dream_wakeless
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:clarifications_on_the_ivory_sea
			}
			if = {
				limit = { exists = scope:location }
				random_list = {
					1 = {
						set_variable = {
							name = writing_culture
							value = scope:location.culture
						}
					}
					1 = {
						set_variable = {
							name = writing_culture
							value = culture:amsari
						}
					}
				}
			}
			add_scaled_artifact_modifier_majesty_effect = yes
			initialize_clarifications_on_the_ivory_sea_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_neverending_dream_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		random_list = {
			7 = { set_artifact_rarity_masterwork = yes }
			2 = { set_artifact_rarity_famed = yes }
			1 = { set_artifact_rarity_illustrious = yes }
		}

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:dream
			SET_TOPIC = flag:dream_journal
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:neverending_dream
			}
			if = {
				limit = { exists = scope:location }
				random_list = {
					1 = {
						set_variable = {
							name = writing_culture
							value = scope:location.culture
						}
					}
					1 = {
						set_variable = {
							name = writing_culture
							value = culture:westernimperial
						}
					}
				}
			}
			add_scaled_artifact_modifier_majesty_effect = yes
			initialize_neverending_dream_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_transcripts_of_contention_of_rajmun_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:arcana
			SET_TOPIC = flag:arcana_ethics
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:transcripts_of_contention_of_rajmun
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_epic_of_talab_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:celestial
			SET_TOPIC = flag:celestial_star_lore
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:epic_of_talab
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_high_chants_of_stargazers_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:celestial
			SET_TOPIC = flag:celestial_star_lore
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:high_chants_of_stargazers
			}
			initialize_star_gazers_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_splenderous_mirror_turned_inwards_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:blood
			SET_TOPIC = flag:blood_medicine
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:splenderous_mirror_turned_inwards
			}
			initialize_splendorous_mirrors_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_the_dancers_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:blood
			SET_TOPIC = flag:blood_play
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:the_dancers
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_the_hippoxiad_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:blood
			SET_TOPIC = flag:blood_play
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:the_hippoxiad
			}
			if = {
				limit = { exists = scope:location }
				random_list = {
					1 = {
						set_variable = {
							name = writing_culture
							value = scope:location.culture
						}
					}
					1 = {
						set_variable = {
							name = writing_culture
							value = culture:westernimperial
						}
					}
				}
			}
			initialize_hippoxiad_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_sound_of_veins_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:blood
			SET_TOPIC = flag:blood_poetry
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:sound_of_veins
			}
			initialize_sound_of_veins_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_testament_to_yunusfur_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:fire
			SET_TOPIC = flag:fire_sacrifice
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:testament_to_yunusfur
			}
			initialize_testament_to_yunusfur_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_arl_janvreeps_series_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:nature
			SET_TOPIC = flag:nature_folklore
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:arl_janvreeps_series
			}
			if = {
				limit = { exists = scope:location }
				random_list = {
					1 = {
						set_variable = {
							name = writing_culture
							value = scope:location.culture
						}
					}
					1 = {
						set_variable = {
							name = writing_culture
							value = culture:konijkmener
						}
					}
				}
			}
			initialize_world_tree_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_songs_of_the_sea_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:water
			SET_TOPIC = flag:water_folklore
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:songs_of_the_sea
			}
			initialize_songs_of_the_sea_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_alkan_tabbot_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:water
			SET_TOPIC = flag:water_folklore
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:alkan_tabbot
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_owl_dissections_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:air
			SET_TOPIC = flag:air_ornithology
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:owl_dissections
			}
			initialize_owl_dissections_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_musings_on_flight_patterns_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:air
			SET_TOPIC = flag:air_ornithology
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:musings_on_flight_patterns
			}
			initialize_musings_on_flight_patterns_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_sanasamadta_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:air
			SET_TOPIC = flag:air_poetry
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:sanasamadta
			}
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_stony_affair_at_viridue_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:stone
			SET_TOPIC = flag:stone_play
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:stony_affair_at_viridue
			}
			initialize_stony_affair_at_viridue_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_lessons_on_oejeynican_burials_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:death
			SET_TOPIC = flag:death_funerary_rites
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:lessons_on_oejeynican_burials
			}
			initialize_on_funerary_rites_of_oejeynica_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_kassidius_diagrams_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:ethereal
			SET_TOPIC = flag:ethereal_soul_theory
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:kassidius_diagrams
			}
			initialize_kassidius_diagrams_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_lonely_spirit_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:ethereal
			SET_TOPIC = flag:ethereal_soul_theory
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:lonely_spirit
			}
			initialize_lonely_spirit_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_book_of_kurush_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:ethereal
			SET_TOPIC = flag:ethereal_fog
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:book_of_kurush
			}
			initialize_the_voyagers_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_journal_of_waymaster_germaine_dellecroix_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:ice
			SET_TOPIC = flag:ice_wards
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:journal_of_waymaster_germaine_dellecroix
			}
			initialize_germaines_journal_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_the_lost_cities_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:dark
			SET_TOPIC = flag:dark_shades
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:the_lost_cities
			}
			initialize_the_lost_cities_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_book_of_forbidden_names_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:dark
			SET_TOPIC = flag:dark_entities
		}
		scope:newly_created_artifact = { 
			set_variable = {
				name = historical_book
				value = flag:book_of_forbidden_names
			}
			initialize_the_voyagers_knowledge_entries_effect = yes
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_historical_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_historical_title
		}
	}
}

create_artifact_skull_of_the_purest_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		if = {
			limit = { 
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					template = gh_book_skull_of_the_purest_template
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					template = gh_book_skull_of_the_purest_template
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_skull_of_the_purest
			set_artifact_feature = book_title_skull_of_the_purest
			set_artifact_feature = book_subject_learning
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_scaled_artifact_modifier_prestige_effect = yes
			add_scaled_artifact_modifier_scholarship_effect = yes
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_masenmalik_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		create_artifact_book_effect = {
			OWNER = scope:owner
			CREATOR = scope:owner
			SET_SUBJECT = flag:intrigue
			SET_TOPIC = flag:masenmalik
		}
		scope:newly_created_artifact = { 
			set_artifact_feature = book_title_masenmalik
			add_artifact_modifier = artifact_masenmalik_modifier
			initialize_masen_malik_knowledge_entries_effect = yes
		}
	}
}

create_artifact_kam_gutaran_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_kam_gutaran
			set_artifact_feature = book_title_kam_gutaran
			set_artifact_feature = book_subject_diplomacy
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_scaled_artifact_modifier_prestige_effect = yes
			add_scaled_artifact_modifier_rulership_effect = yes
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_bookofmaps_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_bookofmaps
			set_artifact_feature = book_title_bookofmaps
			set_artifact_feature = book_subject_diplomacy
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_bookofmaps_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}

}

create_artifact_grimoireofmethinoire_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_grimoireofmethinoire
			set_artifact_feature = book_title_grimoireofmethinoire
			set_artifact_feature = book_subject_alchemy
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_grimoireofmethinoire_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_burntgrimoire_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_burntgrimoire
			set_artifact_feature = book_title_burntgrimoire
			set_artifact_feature = book_subject_alchemy
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_burntgrimoire_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_afynehestoree_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_afynehestoree
			set_artifact_feature = book_title_afynehestoree
			set_artifact_feature = book_subject_stewardship
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_afynehestoree_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_amazingslaves_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_amazingslaves
			set_artifact_feature = book_title_amazingslaves
			set_artifact_feature = book_subject_stewardship
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_amazingslaves_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_fraternityofmagi_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_fraternityofmagi
			set_artifact_feature = book_title_fraternityofmagi
			set_artifact_feature = book_subject_mystic
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_fraternityofmagi_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_aversariancookinginformational_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_aversariancookinginformational
			set_artifact_feature = book_title_aversariancookinginformational
			set_artifact_feature = book_subject_herbalist
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_aversariancookinginformational_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_marcherswhatdoweknow_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_marcherswhatdoweknow
			set_artifact_feature = book_title_marcherswhatdoweknow
			set_artifact_feature = book_subject_martial
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_marcherswhatdoweknow_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_mightmagibuxommaiden_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}


		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_mightmagibuxommaiden
			set_artifact_feature = book_title_mightmagibuxommaiden
			set_artifact_feature = book_subject_deviant
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_mightmagibuxommaiden_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_fiftyshades_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_fiftyshades
			set_artifact_feature = book_title_fiftyshades
			set_artifact_feature = book_subject_deviant
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_fiftyshades_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_adabyssianreport_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_adabyssianreport
			set_artifact_feature = book_title_adabyssianreport
			set_artifact_feature = book_subject_intrigue
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_adabyssianreport_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_taleofsirkoeveux_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}


		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_taleofsirkoeveux
			set_artifact_feature = book_title_taleofsirkoeveux
			set_artifact_feature = book_subject_learning
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_taleofsirkoeveux_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_imperialcivilwar_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_imperialcivilwar
			set_artifact_feature = book_title_imperialcivilwar
			set_artifact_feature = book_subject_martial
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_imperialcivilwar_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_nameofthewindknockoff_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_nameofthewindknockoff
			set_artifact_feature = book_title_nameofthewindknockoff
			set_artifact_feature = book_subject_relationship
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_nameofthewindknockoff_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_tragedyinoejeynica_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_tragedyinoejeynica
			set_artifact_feature = book_title_tragedyinoejeynica
			set_artifact_feature = book_subject_learning
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_tragedyinoejeynica_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_sarradoniansteps_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_sarradoniansteps
			set_artifact_feature = book_title_sarradoniansteps
			set_artifact_feature = book_subject_learning
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_sarradoniansteps_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_chivalriccode_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_chivalriccode
			set_artifact_feature = book_title_chivalriccode
			set_artifact_feature = book_subject_blademaster
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_chivalriccode_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_griffonbestiary_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_griffonbestiary
			set_artifact_feature = book_title_griffonbestiary
			set_artifact_feature = book_subject_animals
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_griffonbestiary_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_lasthippogriff_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_lasthippogriff
			set_artifact_feature = book_title_lasthippogriff
			set_artifact_feature = book_subject_mystical_animal
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_lasthippogriff_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_howtomaimadragon_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_howtomaimadragon
			set_artifact_feature = book_title_howtomaimadragon
			set_artifact_feature = book_subject_mystical_animal
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_howtomaimadragon_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_loveanddeathinasiupoli_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_loveanddeathinasiupoli
			set_artifact_feature = book_title_loveanddeathinasiupoli
			set_artifact_feature = book_subject_intrigue
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_loveanddeathinasiupoli_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_silastavroaliveordead_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_silastavroaliveordead
			set_artifact_feature = book_title_silastavroaliveordead
			set_artifact_feature = book_subject_lunatic
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_silastavroaliveordead_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_howtoreadabook_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_howtoreadabook
			set_artifact_feature = book_title_howtoreadabook
			set_artifact_feature = book_subject_language_manual
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_howtoreadabook_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_purelifefifth_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_purelifefifth
			set_artifact_feature = book_title_purelifefifth
			set_artifact_feature = book_subject_learning
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_purelifefifth_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_purebodyfifth_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_purebodyfifth
			set_artifact_feature = book_title_purebodyfifth
			set_artifact_feature = book_subject_learning
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_purebodyfifth_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_puremindfifth_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_puremindfifth
			set_artifact_feature = book_title_puremindfifth
			set_artifact_feature = book_subject_learning
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_puremindfifth_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_purelifefirst_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_purelifefirst
			set_artifact_feature = book_title_purelifefirst
			set_artifact_feature = book_subject_mystic
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_purelifefirst_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_purebodyfirst_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_purebodyfirst
			set_artifact_feature = book_title_purebodyfirst
			set_artifact_feature = book_subject_mystic
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_purebodyfirst_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_puremindfirst_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_puremindfirst
			set_artifact_feature = book_title_puremindfirst
			set_artifact_feature = book_subject_mystic
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_puremindfirst_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_travelsofsaintkatharitos_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_travelsofsaintkatharitos
			set_artifact_feature = book_title_travelsofsaintkatharitos
			set_artifact_feature = book_subject_learning
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_travelsofsaintkatharitos_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_hundredtrials_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_hundredtrials
			set_artifact_feature = book_title_hundredtrials
			set_artifact_feature = book_subject_learning
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_hundredtrials_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_bookofremedies_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_bookofremedies
			set_artifact_feature = book_title_bookofremedies
			set_artifact_feature = book_subject_medicine
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_bookofremedies_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_saintslawbook_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_saintslawbook
			set_artifact_feature = book_title_saintslawbook
			set_artifact_feature = book_subject_stewardship
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_saintslawbook_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_rendingthechains_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_rendingthechains
			set_artifact_feature = book_title_rendingthechains
			set_artifact_feature = book_subject_martial
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_rendingthechains_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_calystojournal_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {	
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_calystojournal
			set_artifact_feature = book_title_calystojournal
			set_artifact_feature = book_subject_stewardship
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_calystojournal_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_eosianswordcharter_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_eosianswordcharter
			set_artifact_feature = book_title_eosianswordcharter
			set_artifact_feature = book_subject_blademaster
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_eosianswordcharter_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_dangerofathousandstars_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_dangerofathousandstars
			set_artifact_feature = book_title_dangerofathousandstars
			set_artifact_feature = book_subject_mystic
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_dangerofathousandstars_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_bannediyrossipoetry_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_bannediyrossipoetry
			set_artifact_feature = book_title_bannediyrossipoetry
			set_artifact_feature = book_subject_torturer
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_bannediyrossipoetry_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_aeladaxostoaeliadias_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_aeladaxostoaeliadias
			set_artifact_feature = book_title_aeladaxostoaeliadias
			set_artifact_feature = book_subject_learning
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_aeladaxostoaeliadias_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}

create_artifact_compiledworksofvenodau_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_compiledworksofvenodau
            set_artifact_feature = book_title_compiledworksofvenodau
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_compiledworksofvenodau_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_pillarsofaversaria_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_pillarsofaversaria
            set_artifact_feature = book_title_pillarsofaversaria
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_pillarsofaversaria_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_ontheoriginofmankind_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_ontheoriginofmankind
            set_artifact_feature = book_title_ontheoriginofmankind
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_ontheoriginofmankind_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_ataleoftwocities_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_ataleoftwocities
            set_artifact_feature = book_title_ataleoftwocities
            set_artifact_feature = book_subject_martial
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_ataleoftwocities_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_parthenaxiada_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_parthenaxiada
            set_artifact_feature = book_title_parthenaxiada
            set_artifact_feature = book_subject_martial
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_parthenaxiada_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_edgeoftheworld_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_edgeoftheworld
            set_artifact_feature = book_title_edgeoftheworld
            set_artifact_feature = book_subject_martial
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_edgeoftheworld_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_ninetysixtasks_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_ninetysixtasks
            set_artifact_feature = book_title_ninetysixtasks
            set_artifact_feature = book_subject_relationship
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_ninetysixtasks_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_natureofmatter_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_natureofmatter
            set_artifact_feature = book_title_natureofmatter
            set_artifact_feature = book_subject_mystic
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_natureofmatter_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_ruleofmany_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_ruleofmany
            set_artifact_feature = book_title_ruleofmany
            set_artifact_feature = book_subject_stewardship
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_ruleofmany_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_thedragonandthescorpion_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_thedragonandthescorpion
            set_artifact_feature = book_title_thedragonandthescorpion
            set_artifact_feature = book_subject_empire
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_thedragonandthescorpion_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_arakkariacwar_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_arakkariacwar
            set_artifact_feature = book_title_arakkariacwar
            set_artifact_feature = book_subject_diplomacy
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_arakkariacwar_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_lostpolis_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_lostpolis
            set_artifact_feature = book_title_lostpolis
            set_artifact_feature = book_subject_intrigue
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_lostpolis_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_masenmalik_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_masenmalik
            set_artifact_feature = book_title_masenmalik
            set_artifact_feature = book_subject_intrigue
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_masenmalik_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_mawtalmunininguide_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_mawtalmunininguide
            set_artifact_feature = book_title_mawtalmunininguide
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_mawtalmunininguide_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_expeditiontothenorth_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_expeditiontothenorth
            set_artifact_feature = book_title_expeditiontothenorth
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_expeditiontothenorth_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_howtheendbegan_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_howtheendbegan
            set_artifact_feature = book_title_howtheendbegan
            set_artifact_feature = book_subject_mystic
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_howtheendbegan_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_refutation_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_refutation
            set_artifact_feature = book_title_refutation
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_refutation_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_inquiryintothefog_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_inquiryintothefog
            set_artifact_feature = book_title_inquiryintothefog
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_inquiryintothefog_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_clockworkcity_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_clockworkcity
            set_artifact_feature = book_title_clockworkcity
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_clockworkcity_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_annalsofblank_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_annalsofblank
            set_artifact_feature = book_title_annalsofblank
            set_artifact_feature = book_subject_intrigue
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_annalsofblank_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_whenaervalbleed_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_whenaervalbleed
            set_artifact_feature = book_title_whenaervalbleed
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_whenaervalbleed_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_treatiseofgoodpractice_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_treatiseofgoodpractice
            set_artifact_feature = book_title_treatiseofgoodpractice
            set_artifact_feature = book_subject_mystic
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_treatiseofgoodpractice_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_chevalienknightinoraispol_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_chevalienknightinoraispol
            set_artifact_feature = book_title_chevalienknightinoraispol
            set_artifact_feature = book_subject_diplomacy
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_chevalienknightinoraispol_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_witchbreakerhero_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_witchbreakerhero
            set_artifact_feature = book_title_witchbreakerhero
            set_artifact_feature = book_subject_diplomacy
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_witchbreakerhero_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_sjalvolkipoetry_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_sjalvolkipoetry
            set_artifact_feature = book_title_sjalvolkipoetry
            set_artifact_feature = book_subject_hunter
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_sjalvolkipoetry_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_bookofthefallen_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_bookofthefallen
            set_artifact_feature = book_title_bookofthefallen
            set_artifact_feature = book_subject_martial
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_bookofthefallen_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_jacotwaldisse_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_jacotwaldisse
            set_artifact_feature = book_title_jacotwaldisse
            set_artifact_feature = book_subject_martial
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_jacotwaldisse_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_delenelbook_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_delenelbook
            set_artifact_feature = book_title_delenelbook
            set_artifact_feature = book_subject_relationship
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_delenelbook_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_redlandsadventure_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_redlandsadventure
            set_artifact_feature = book_title_redlandsadventure
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
			#get_artifact_feature_references_effect = yes  
			#add_artifact_modifier = redlandsadventure_modifier # GH URGENT: Add missing_artifact modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_fourlodges_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_fourlodges
            set_artifact_feature = book_title_fourlodges
            set_artifact_feature = book_subject_empire
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
			#get_artifact_feature_references_effect = yes
			#add_artifact_modifier = fourlodges_modifier # GH URGENT: Add missing_artifact modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_journalofseekers_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_journalofseekers
            set_artifact_feature = book_title_journalofseekers
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
			#get_artifact_feature_references_effect = yes#  
			#add_artifact_modifier = artifact_journalofseekers_modifier # GH URGENT: Add missing modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_godslaverdictations_fix_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_godslaverdictations_fix
            set_artifact_feature = book_title_godslaverdictations_fix
            set_artifact_feature = book_subject_lunatic
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
			#get_artifact_feature_references_effect = yes
			#add_artifact_modifier = godslaverdictations_fix_modifier # GH URGENT: Add missing_artifact modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_thekardwenwhatweknow_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_thekardwenwhatweknow
            set_artifact_feature = book_title_thekardwenwhatweknow
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
			#get_artifact_feature_references_effect = yes
			#add_artifact_modifier = artifact_thekardwenwhatweknow_modifier # GH URGENT: Add missing modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_dethediaxnotes_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_dethediaxnotes
            set_artifact_feature = book_title_dethediaxnotes
            set_artifact_feature = book_subject_stewardship
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_dethediaxnotes_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_dethediaxiancodex_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_dethediaxiancodex
            set_artifact_feature = book_title_dethediaxiancodex
            set_artifact_feature = book_subject_stewardship
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_dethediaxiancodex_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_bluerobetreatise_book_effect = {
    # Get the character the artifact is being made for.
    $OWNER$ = { save_scope_as = owner }
    
    hidden_effect_new_object = {
        get_random_artifact_quality_and_wealth_effect = yes
    

        # Create the artifact
        if = {
        	limit = {
        		scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
        	}
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = indian_book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }
        else = {
        	scope:owner = {
        		# Create the artifact
        		create_artifact = {
        			name = placeholder
        			description = placeholder
        			type = book
        			visuals = book
        			wealth = scope:wealth
        			quality = scope:quality
        			modifier = artifact_placeholder_modifier
        			save_scope_as = newly_created_artifact
        		}
        	}
        }

        scope:newly_created_artifact = {
            set_artifact_feature = book_topic_bluerobetreatise
            set_artifact_feature = book_title_bluerobetreatise
            set_artifact_feature = book_subject_learning
            set_artifact_feature_group = book_decoration
            set_artifact_feature_group = decoration_pattern
            get_artifact_feature_references_effect = yes
            add_artifact_modifier = artifact_bluerobetreatise_modifier
            remove_artifact_modifier = artifact_placeholder_modifier
            # Generate the updated - final description for the book
            set_artifact_description = artifact_book_description
            # Generate the updated title - final title for the book
            set_artifact_name = artifact_book_title
        }
    }
}

create_artifact_boqqarofknives_book_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_object = {
		get_random_artifact_quality_and_wealth_effect = yes

		# Create the artifact
		if = {
			limit = {
				scope:owner = { artifact_use_indian_building_visuals_trigger = yes }
			}
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = indian_book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}
		else = {
			scope:owner = {
				# Create the artifact
				create_artifact = {
					name = placeholder
					description = placeholder
					type = book
					visuals = book
					wealth = scope:wealth
					quality = scope:quality
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
				}
			}
		}

		scope:newly_created_artifact = {
			set_artifact_feature = book_topic_boqqarofknives
			set_artifact_feature = book_title_boqqarofknives
			set_artifact_feature = book_subject_intrigue
			set_artifact_feature_group = book_decoration
			set_artifact_feature_group = decoration_pattern
			get_artifact_feature_references_effect = yes
			add_artifact_modifier = artifact_boqqarofknives_modifier
			remove_artifact_modifier = artifact_placeholder_modifier
			# Generate the updated - final description for the book
			set_artifact_description = artifact_book_description
			# Generate the updated title - final title for the book
			set_artifact_name = artifact_book_title
		}
	}
}












# Random Book
create_random_gh_historical_book_effect = {
	random_list = {
		1 = { create_artifact_seventy_seven_cities_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_pocket_guide_to_aversaria_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_skull_of_the_purest_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_kam_gutaran_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_dragon_tale_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_bookofmaps_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_grimoireofmethinoire_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_burntgrimoire_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_afynehestoree_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_amazingslaves_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_fraternityofmagi_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_aversariancookinginformational_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_marcherswhatdoweknow_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_mightmagibuxommaiden_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_fiftyshades_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_adabyssianreport_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_taleofsirkoeveux_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_imperialcivilwar_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_nameofthewindknockoff_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_tragedyinoejeynica_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_sarradoniansteps_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_chivalriccode_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_griffonbestiary_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_lasthippogriff_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_howtomaimadragon_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_loveanddeathinasiupoli_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_silastavroaliveordead_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_howtoreadabook_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_purelifefifth_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_purebodyfifth_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_puremindfifth_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_purelifefirst_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_purebodyfirst_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_puremindfirst_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_travelsofsaintkatharitos_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_hundredtrials_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_bookofremedies_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_saintslawbook_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_rendingthechains_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_calystojournal_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_eosianswordcharter_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_dangerofathousandstars_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_bannediyrossipoetry_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_aeladaxostoaeliadias_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_compiledworksofvenodau_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_pillarsofaversaria_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_ontheoriginofmankind_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_ataleoftwocities_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_parthenaxiada_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_edgeoftheworld_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_ninetysixtasks_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_natureofmatter_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_ruleofmany_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_thedragonandthescorpion_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_arakkariacwar_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_lostpolis_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_masenmalik_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_mawtalmunininguide_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_expeditiontothenorth_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_howtheendbegan_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_refutation_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_inquiryintothefog_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_clockworkcity_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_annalsofblank_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_whenaervalbleed_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_treatiseofgoodpractice_book_effect = { OWNER = $OWNER$ } }
		#1 = { create_artifact_chevalienknightinoraispol_book_effect = { OWNER = $OWNER$ } }
		#1 = { create_artifact_witchbreakerhero_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_sjalvolkipoetry_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_bookofthefallen_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_jacotwaldisse_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_delenelbook_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_redlandsadventure_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_fourlodges_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_journalofseekers_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_godslaverdictations_fix_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_thekardwenwhatweknow_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_manswelbestiarium_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_womanknights_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_dethediaxnotes_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_dethediaxiancodex_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_bluerobetreatise_book_effect = { OWNER = $OWNER$ } }
		1 = { create_artifact_boqqarofknives_book_effect = { OWNER = $OWNER$ } }
	}
}

create_adventure_reward_book_effect = {
	random_list = {
		3 = {
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:faith_override.religion ?= scope:location.faith.religion
					}
				}
				add = -2
			}
			create_artifact_religious_scripture_book_effect = { OWNER = $OWNER$ FAITH = scope:location.faith } 
		}
		3 = {
			create_artifact_arcana_general_book_effect = { OWNER = $OWNER$ } 
		}
		3 = {
			create_artifact_arcana_magic_school_book_effect = { OWNER = $OWNER$ } 
		}
		5 = {
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_marcher
						any_parent_culture_or_above = { has_cultural_pillar = heritage_marcher }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:wisemans_friend
						rarity = masterwork
					}
				}
				add = -3
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:wisemans_friend
						rarity = famed
					}
				}
				add = -4
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:wisemans_friend
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_marcher
						any_parent_culture_or_above = { has_cultural_pillar = heritage_marcher }
					}
				}
			}
			create_artifact_wisemans_friend_book_effect = { OWNER = $OWNER$ } 
		}
		3 = {
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_marcher
						any_parent_culture_or_above = { has_cultural_pillar = heritage_marcher }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:contents_of_silver
						rarity = masterwork
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:contents_of_silver
						rarity = famed
					}
				}
				add = -3
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:contents_of_silver
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location.culture ?= {
						OR = {
							has_cultural_pillar = heritage_marcher
							any_parent_culture_or_above = { has_cultural_pillar = heritage_marcher }
						}
					}
				}
			}
			create_artifact_contents_of_silver_book_effect = { OWNER = $OWNER$ }
		}
		2 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_aversarian
						any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:seventy_seven_cities
						rarity = masterwork
					}
				}
				add = -1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:seventy_seven_cities
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:seventy_seven_cities
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						OR = {
							geographical_region = world_greater_aversaria
							geographical_region = world_sarradon
						}
					}
				}
				trigger_if = {
					limit = { exists = var:adventure_type }
					NOT = { var:adventure_type = flag:magic_lore_quest }
				}
			}
			create_artifact_seventy_seven_cities_book_effect = { OWNER = $OWNER$ } 
		}
		5 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_aversarian
						any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:aeltheniax_anatomy_vol_1
						rarity = masterwork
					}
				}
				add = -4
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:aeltheniax_anatomy_vol_1
						rarity = famed
					}
				}
				add = -5
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:aeltheniax_anatomy_vol_1
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						OR = {
							culture = { has_cultural_pillar = heritage_aversarian }
							culture = { any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian } }
							geographical_region = world_greater_aversaria
							geographical_region = world_sarradon
						}
					}
				}
			}
			create_artifact_aeltheniax_anatomy_vol_1_book_effect = { OWNER = $OWNER$ } 
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_aversarian
						any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:aeltheniax_anatomy_vol_2
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:aeltheniax_anatomy_vol_2
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						OR = {
							culture = { has_cultural_pillar = heritage_aversarian }
							culture = { any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian } }
							geographical_region = world_greater_aversaria
							geographical_region = world_sarradon
						}
					}
				}
			}
			create_artifact_aeltheniax_anatomy_vol_2_book_effect = { OWNER = $OWNER$ } 
		}
		3 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_aversarian
						any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:azure_tablet
						rarity = masterwork
					}
				}
				add = -4
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:azure_tablet
						rarity = famed
					}
				}
				add = -5
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:azure_tablet
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						OR = {
							culture = { has_cultural_pillar = heritage_aversarian }
							culture = { any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian } }
							geographical_region = world_greater_aversaria
							geographical_region = world_sarradon
						}
					}
				}
			}
			create_artifact_azure_tablet_book_effect = { OWNER = $OWNER$ } 
		}
		3 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_aversarian
						any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:azure_tablet
						rarity = masterwork
					}
				}
				add = -4
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:azure_tablet
						rarity = famed
					}
				}
				add = -5
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:azure_tablet
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						OR = {
							culture = { has_cultural_pillar = heritage_aversarian }
							culture = { any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian } }
							geographical_region = world_greater_aversaria
							geographical_region = world_sarradon
						}
					}
				}
			}
			create_artifact_on_the_triune_blood_of_man_book_effect = { OWNER = $OWNER$ } 
		}
		3 = {
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_marcher
						any_parent_culture_or_above = { has_cultural_pillar = heritage_marcher }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:songwood
						rarity = masterwork
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:songwood
						rarity = famed
					}
				}
				add = -3
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:songwood
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location.culture ?= {
						OR = {
							has_cultural_pillar = heritage_marcher
							any_parent_culture_or_above = { has_cultural_pillar = heritage_marcher }
						}
					}
				}
			}
			create_artifact_songwood_book_effect = { OWNER = $OWNER$ } 
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_sarradon }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:the_voyagers
						rarity = famed
					}
				}
				add = -1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:the_voyagers
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						geographical_region = world_sarradon
					}
				}
			}
			create_artifact_the_voyagers_book_effect = { OWNER = $OWNER$ } 
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_sarradon }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:testament_to_yunusfur
						rarity = famed
					}
				}
				add = -1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:testament_to_yunusfur
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						geographical_region = world_sarradon
					}
				}
			}
			create_artifact_testament_to_yunusfur_book_effect = { OWNER = $OWNER$ } 
		}
		2 = {
			modifier = {
				scope:location ?= { geographical_region = world_ws_amsari }
				add = 1
			}
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_zarasadari
						any_parent_culture_or_above = { has_cultural_pillar = heritage_zarasadari }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:clarifications_on_the_ivory_sea
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:clarifications_on_the_ivory_sea
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						geographical_region = world_western_sarradon
					}
				}
			}
			create_artifact_clarifications_on_the_ivory_sea_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_aversarian
						any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:neverending_dream
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:neverending_dream
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						OR = {
							culture = { has_cultural_pillar = heritage_aversarian }	# Book is based on Apti legends, but written by Aversarians
							culture = { any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian } }
							geographical_region = world_greater_aversaria
						}
					}
				}
			}
			create_artifact_neverending_dream_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_aversarian
						any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:the_hippoxiad
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:the_hippoxiad
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						OR = {
							culture = { has_cultural_pillar = heritage_aversarian }	# Book is based on Apti legends, but written by Aversarians
							culture = { any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian } }
							geographical_region = world_greater_aversaria
						}
					}
				}
			}
			create_artifact_the_hippoxiad_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				scope:location.culture ?= {
					OR = {
						has_cultural_pillar = heritage_aversarian
						any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian }
					}
				}
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:songs_of_the_sea
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:songs_of_the_sea
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						OR = {
							culture = { has_cultural_pillar = heritage_aversarian }# Book is based on Islander legends, but written by Aversarians
							culture = { any_parent_culture_or_above = { has_cultural_pillar = heritage_aversarian } }
							geographical_region = world_greater_aversaria
						}
					}
				}
			}
			create_artifact_songs_of_the_sea_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_ga_kashirya }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:transcripts_of_contention_of_rajmun
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:transcripts_of_contention_of_rajmun
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_ga_kashirya
					}
				}
			}
			create_artifact_transcripts_of_contention_of_rajmun_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_sarradon }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:epic_of_talab
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:epic_of_talab
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_sarradon
					}
				}
			}
			create_artifact_epic_of_talab_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:high_chants_of_stargazers
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:high_chants_of_stargazers
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_greater_aversaria
					}
				}
			}
			create_artifact_high_chants_of_stargazers_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_sarradon }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:splenderous_mirror_turned_inwards
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:splenderous_mirror_turned_inwards
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_sarradon
					}
				}
			}
			create_artifact_splenderous_mirror_turned_inwards_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:sound_of_veins
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:sound_of_veins
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_greater_aversaria
					}
				}
			}
			create_artifact_sound_of_veins_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_ga_marcher_kingdoms }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:arl_janvreeps_series
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:arl_janvreeps_series
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
						geographical_region = world_greater_aversaria
					}
				}
			}
			create_artifact_arl_janvreeps_series_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:owl_dissections
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:owl_dissections
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_greater_aversaria
					}
				}
			}
			create_artifact_owl_dissections_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:musings_on_flight_patterns
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:musings_on_flight_patterns
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_greater_aversaria
					}
				}
			}
			create_artifact_musings_on_flight_patterns_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_ga_kashirya }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:stony_affair_at_viridue
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:stony_affair_at_viridue
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_ga_kashirya
					}
				}
			}
			create_artifact_stony_affair_at_viridue_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_ga_marcher_kingdoms }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:lessons_on_oejeynican_burials
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:lessons_on_oejeynican_burials
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_ga_marcher_kingdoms
					}
				}
			}
			create_artifact_lessons_on_oejeynican_burials_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:kassidius_diagrams
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:kassidius_diagrams
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_greater_aversaria
					}
				}
			}
			create_artifact_kassidius_diagrams_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:lonely_spirit
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:lonely_spirit
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_greater_aversaria
					}
				}
			}
			create_artifact_lonely_spirit_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_ga_marcher_kingdoms }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:journal_of_waymaster_germaine_dellecroix
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:journal_of_waymaster_germaine_dellecroix
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_ga_marcher_kingdoms
					}
				}
			}
			create_artifact_journal_of_waymaster_germaine_dellecroix_book_effect = { OWNER = $OWNER$ }
		}
		1 = {
			modifier = {
				scope:location ?= { geographical_region = world_greater_aversaria }
				add = 1
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:the_lost_cities
						rarity = famed
					}
				}
				add = -2
			}
			modifier = {
				$OWNER$ = {
					any_character_artifact = {
						var:historical_book ?= flag:the_lost_cities
						rarity = illustrious
					}
				}
				add = -10
			}
			trigger = {
				trigger_if = {
					limit = { exists = scope:location }
					scope:location = {
							geographical_region = world_greater_aversaria
					}
				}
			}
			create_artifact_the_lost_cities_book_effect = { OWNER = $OWNER$ }
		}
	}
}


# Misc
create_artifact_skull_effect = {
	$OWNER$ = { save_scope_as = owner }
	$DESKULLED$ = { save_scope_as = killed }

	get_random_artifact_quality_and_wealth_effect = yes

	create_artifact = {
		name = placeholder
		description = placeholder
		type = skull
		visuals = skull_visuals
		wealth = scope:wealth
		quality = scope:quality
		modifier = artifact_placeholder_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_artifact_feature_group = bone_constitution
		add_scaled_artifact_modifier_grandeur_small_effect = yes
		add_scaled_artifact_modifier_minor_prestige_effect = yes
		if = {
			limit = {
				rarity = illustrious
			}
			add_artifact_modifier = artifact_dread_baseline_add_2_modifier
		}
		else_if = {
			limit = {
				rarity = famed
			}
			add_artifact_modifier = artifact_dread_baseline_add_1_modifier
		}
		remove_artifact_modifier = artifact_placeholder_modifier
		set_artifact_description = artifact_pedestal_human_skull_description
		set_artifact_name = artifact_skull_title
	}
}

## Ice Sculpture

create_artifact_ice_sculpture_effect = {
	$OWNER$ = { save_scope_as = owner }
	$VICTIM$ = { save_scope_as = victim }
	hidden_effect_new_object = {
		get_artifact_quality_effect = yes
		save_scope_value_as = {#The quality should be adjusted based on the victims rank
			name = quality
			value = {
				add = scope:quality
				add = {
					value = scope:inter_in_ice_prisoner_scope.highest_held_title_tier
					multiply = 25
				}
				add = {
					value = scope:owner.var:magic_lvl
					multiply = 20
				}
			}
		}
		save_scope_value_as = {
			name = wealth
			value = {
				add = scope:quality
				multiply = 0.25
				round = yes
			}
		}
		if = {#The resulting sculpture should match the gender of the victim
			limit = {
				scope:inter_in_ice_prisoner_scope = { is_female = yes }
			}
			save_scope_value_as = {
				name = victim_fm
				value = flag:female
			}
		}
		else = {
			save_scope_value_as = {
				name = victim_fm
				value = flag:male
			}
		}

		scope:owner = {
			create_artifact = {	
				name = artifact_ice_sculpture_name
				creator = scope:owner
				description = placeholder
				visuals = gh_ice_sculpture
				type = ice_sculpture
				modifier = artifact_placeholder_modifier
				save_scope_as = newly_created_artifact
				wealth = scope:wealth
				quality = scope:quality
				#decaying = no
			}
		}
		scope:newly_created_artifact = {
			if = {#Give the victim a description depending on their reaction to being frozen in ice
				limit = {
					scope:inter_in_ice_prisoner_scope = {
						ai_boldness >= high_positive_boldness
					}
				}
				set_artifact_description =  artifact_ice_sculpture_description.brave
			}
			else_if = {
				limit = {
					scope:inter_in_ice_prisoner_scope = {
						ai_boldness < high_positive_boldness
						ai_boldness > high_negative_boldness
					}
				}
				set_artifact_description =  artifact_ice_sculpture_description.neutral
			}
			else_if = {
				limit = {
					scope:inter_in_ice_prisoner_scope = {
						ai_boldness <= high_negative_boldness
					}
				}
				set_artifact_description =  artifact_ice_sculpture_description.craven
			}
			#Add epitaph
			if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_cenware_trigger = yes } }
				set_artifact_description = daukeni_sjalvolki_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_aeschraes_trigger = yes } }
				set_artifact_description = westernimperial_aeschraes_aagiokrata_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_hecaeda_trigger = yes } }
				set_artifact_description = easternimperial_aironoian_aagiokrata_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_black_sun_trigger = yes } }
				set_artifact_description = apokiakas_aversarinas_aagiokratia_23.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_legan_dethas_trigger = yes } }
				set_artifact_description = apokiakas_militant_cliques_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_rene_den_va_seignon_trigger = yes } }
				set_artifact_description = voyagen_lifepath_8.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_sirras_trigger = yes } }
				set_artifact_description = scusstari_iyrossi_aagiokrata_13.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_gorassos_trigger = yes } }
				set_artifact_description = southernimperial_aversarian_gorassos_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_cois_trigger = yes } }
				set_artifact_description = westernimperial_omitilos_aagiokrata_2.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_rhesus_trigger = yes } }
				set_artifact_description = westernimperial_omitilos_aagiokrata_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_benouet_den_va_seignon_trigger = yes } }
				set_artifact_description = voyagen_lifepath_7.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_harthah_trigger = yes } }
				set_artifact_description = tasurmad_harthahi_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_giant_layer_trigger = yes } }
				set_artifact_description = curgerski_sjalvolki_2.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_ulfirx_mad_dog_trigger = yes } }
				set_artifact_description = vrodkin_sjalvolki_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_dexios_trigger = yes } }
				set_artifact_description = centralislander_aversarinas_aagiokrata_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_sigrun_axe_in_the_hand_trigger = yes } }
				set_artifact_description = caemansi_sjalvolki_14.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_cormag_fenrus_trigger = yes } }
				set_artifact_description = fenvir_sjalvolki_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_iordanes_trigger = yes } }
				set_artifact_description = southernimperial_aversarinas_aagiokrata_30.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_it_is_i_megistos_trigger = yes } }
				set_artifact_description = southernimperial_manikos_aagiokrata_1.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_aderi_trigger = yes } }
				set_artifact_description = kawoch_mogowai_9.epitaph
			}
			else_if = {
				limit = { scope:inter_in_ice_prisoner_scope = { character_fridge_trigger = yes } }
				set_artifact_description = easternimperial_aversarinas_aagiokrata_7.epitaph
			}
			add_scaled_artifact_modifier_grandeur_small_effect = yes
			add_scaled_artifact_modifier_prestige_effect = yes
			add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			remove_artifact_modifier = artifact_placeholder_modifier
		}
	}
}

# Mounts

get_mount_artifact_quality_effect = {
	if = {
		limit = {
			exists = scope:aspect_level_value
		}
		save_scope_value_as = {
			name = quality
			value = {
				value = 1

				add = {
					value = scope:aspect_level_value
					multiply = 10
				}
			}
		}
	}
}

get_mount_artifact_wealth_effect = {
	if = {
		limit = {
			exists = scope:aspect_level_value
		}
		save_scope_value_as = {
			name = wealth
			value = {
				value = 1

				add = {
					value = scope:aspect_level_value
					multiply = 10
				}
			}
		}
	}
}

# griffon

create_artifact_griffon_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_masterwork = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_mountgriffon_name
		description = artifact_mountgriffon_desc
		visuals = gh_familiar_griffon
		type = mount
		template = general_unique_template
		wealth = scope:wealth
		quality = scope:quality
		modifier = artifact_griffon_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}
	
	create_character = {
		save_scope_as = familiar_character
		template = griffon_adult_character_template
		employer = scope:owner
	}
	
	scope:newly_created_artifact = {
		save_scope_as = familiar_artifact
		set_variable = {
			name = familiar_character
			value = scope:familiar_character
		}
		equip_artifact_to_owner = yes
	}

	scope:familiar_character = {
		set_variable = {
			name = familiar_artifact
			value = scope:familiar_artifact
		}
		create_story = story_cycle_griffon_mount
	}
	
	scope:owner = {
		add_to_variable_list = {
			name = mount_list
			target = scope:familiar_character
		}
		hidden_effect = {
			set_relation_familiar = scope:familiar_character
		}
		custom_tooltip = gain_griffon_familiar.tt
	}
}

create_artifact_golem_effect = {
	# Get the character the artifact is made for
	$OWNER$ = { save_scope_as = owner }

	hidden_effect_new_object = {
		get_mount_artifact_quality_effect = yes
		get_mount_artifact_wealth_effect = yes

		scope:owner = {
			create_artifact = {
				name = artifact_mountgreatergolem_name
				description = artifact_mountgreatergolem_desc
				visuals = gh_mount_golem
				type = mount
				template = general_unique_template
				wealth = scope:wealth
				quality = scope:quality
				max_durability = 50
				save_scope_as = newly_created_artifact
				modifier = artifact_golem_modifier 
			}
		}

		scope:newly_created_artifact = {
			if = {
				limit = {
					OR = {
						rarity = illustrious
						rarity = famed
					}

				}
			}
			if = {
				limit = { rarity = common }
				add_artifact_modifier = artifact_monthly_prestige_gain_per_dread_add_1_modifier
				random_list = {
					20 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_1_modifier
					}
					15 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_2_modifier
					}
					5 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_3_modifier
					}
				}
			}
			else_if = {
				limit = { rarity = masterwork }
				add_artifact_modifier = artifact_monthly_prestige_gain_per_dread_add_2_modifier
				random_list = {
					20 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_4_modifier
					}
					15 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_5_modifier
					}
					5 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_6_modifier
					}
				}
			}
			else_if = {
				limit = { rarity = famed }
				add_artifact_modifier = artifact_monthly_prestige_gain_per_dread_add_3_modifier
				random_list = {
					20 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_7_modifier
					}
					15 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_8_modifier
					}
					5 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_9_modifier
					}
				}
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_modifier = artifact_monthly_prestige_gain_per_dread_add_4_modifier
				random_list = {
					20 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_10_modifier
					}
					15 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_11_modifier
					}
					5 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_12_modifier
					}
				}
			}
		}
	}
}

create_artifact_fogbeast_effect = {
	# Get the character the artifact is made for
	$OWNER$ = { save_scope_as = owner }

	hidden_effect_new_object = {
		get_mount_artifact_quality_effect = yes
		get_mount_artifact_wealth_effect = yes

		scope:owner = {
			create_artifact = {
				name = artifact_mountamiablefogbeast_name
				description = artifact_mountamiablefogbeast_desc
				visuals = gh_mount_fogbeast
				type = mount
				template = general_unique_template
				wealth = scope:wealth
				quality = scope:quality
				max_durability = 50
				save_scope_as = newly_created_artifact
				modifier = artifact_fogbeast_modifier 
			}
		}

		scope:newly_created_artifact = {
			if = {
				limit = {
					OR = {
						rarity = illustrious
						rarity = famed
					}

				}
			}
			if = {
				limit = { rarity = common }
				add_artifact_modifier = artifact_monthly_prestige_gain_per_dread_add_1_modifier
				random_list = {
					20 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_1_modifier
					}
					15 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_2_modifier
					}
					5 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_3_modifier
					}
				}
			}
			else_if = {
				limit = { rarity = masterwork }
				add_artifact_modifier = artifact_monthly_prestige_gain_per_dread_add_2_modifier
				random_list = {
					20 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_4_modifier
					}
					15 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_5_modifier
					}
					5 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_6_modifier
					}
				}
			}
			else_if = {
				limit = { rarity = famed }
				add_artifact_modifier = artifact_monthly_prestige_gain_per_dread_add_3_modifier
				random_list = {
					20 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_7_modifier
					}
					15 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_8_modifier
					}
					5 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_9_modifier
					}
				}
			}
			else_if = {
				limit = { rarity = illustrious }
				add_artifact_modifier = artifact_monthly_prestige_gain_per_dread_add_4_modifier
				random_list = {
					20 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_10_modifier
					}
					15 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_11_modifier
					}
					5 = {
						add_artifact_modifier = artifact_hard_casualty_modifier_12_modifier
					}
				}
			}
		}
	}
}

create_artifact_thumb_ring_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$SMITH$ = { save_scope_as = goldsmith }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, materials, and decorations
		get_artifact_quality_effect = yes
		get_artifact_wealth_effect = yes
		if = { #Any existing dummy character gets turned into the goldsmith
			limit = {
				exists = scope:dummy_gender
				scope:goldsmith = scope:dummy_gender
			}
			clear_saved_scope = goldsmith
			clear_saved_scope = dummy_gender
		}
		# Create the artifact
		if = {
			limit = { exists = scope:adventurer }
			create_artifact = { # Create an artifact from an adventure inspiration
				name = artifact_thumb_ring_name
				description = placeholder
				visuals = thumb_ring
				type = thumb_ring
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:adventurer
					recipient = root
					type = discovered
				}
			}
		}
		else_if = {
			limit = {
				scope:host ?= $OWNER$
				scope:activity ?= { has_activity_type = activity_tournament }
			}
			create_artifact = { # Create an artifact as a tournament prize
				name = artifact_thumb_ring_name
				creator = scope:host
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				visuals = thumb_ring
				type = thumb_ring
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				history = {
					type = prize_created
					recipient = scope:host
				}
				save_scope_as = newly_created_artifact
			}
		}
		else_if = {
			limit = { exists = scope:goldsmith }
			create_artifact = { # Create an artifact from a goldsmith inspiration
				name = artifact_thumb_ring_name
				creator = scope:goldsmith
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				visuals = thumb_ring
				type = thumb_ring
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
			}
		}
		else = {
			create_artifact = { # Fallback
				name = artifact_thumb_ring_name
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				visuals = thumb_ring
				type = thumb_ring
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = { type = created_before_history }
			}
		}

		scope:newly_created_artifact = {
			# Finish generating decorations and update description
			if = {
				limit = {
					OR = {
						has_artifact_feature = thumb_ring_decoration_adornment
						has_artifact_feature = thumb_ring_decoration_centerpiece_and_adornment
					}
				}
				set_artifact_feature_group = thumb_ring_adornment
			}
			if = {
				limit = {
					OR = {
						has_artifact_feature = thumb_ring_decoration_centerpiece
						has_artifact_feature = thumb_ring_decoration_centerpiece_and_adornment
					}
				}
				set_artifact_feature_group = thumb_ring_centerpiece
			}
			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_thumb_ring_description

			# Add artifact modifiers
			add_scaled_artifact_modifier_minor_prowess_effect = yes
			add_scaled_artifact_modifier_minor_prestige_effect = yes
			add_scaled_artifact_modifier_dynasty_prestige_effect = yes
			if = { # Generic combat bonus for famed and above artifacts
				limit = {
					OR = {
						rarity = famed
						rarity = illustrious
					}
				}
				add_scaled_artifact_modifier_combat_effect = yes
			}
			if = { # Thematic MAA bonuses for illustrious artifacts
				limit = { rarity = illustrious }
				random_list = {
					20 = {
						add_artifact_modifier = artifact_archers_screen_add_3_modifier
						add_artifact_modifier = artifact_archer_cavalry_screen_add_3_modifier
					}
					5 = {
						add_artifact_modifier = artifact_archers_screen_add_4_modifier
						add_artifact_modifier = artifact_archer_cavalry_screen_add_4_modifier
					}
				}
			}

			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}
		}
	}
}

###############
# MASK - for Olteni

set_chosen_likeness_feature_effect = { # Set mask likeness features and add relevant extra modifiers
	if = { # None
		limit = { scope:smith.var:chosen_mask_likeness = flag:none }
		add_scaled_artifact_modifier_prestige_effect = yes
		add_scaled_artifact_modifier_dynasty_prestige_effect = yes

	}
	else_if = { # Otached
		limit = { scope:smith.var:chosen_mask_likeness = flag:otached }
		set_artifact_feature = oltenic_mask_base_human
		set_artifact_feature = oltenic_mask_visage_human_otached
		add_scaled_artifact_modifier_rulership_effect = yes
	}
	else_if = { # Ayran
		limit = { scope:smith.var:chosen_mask_likeness = flag:ayran }
		set_artifact_feature = oltenic_mask_base_human
		set_artifact_feature = oltenic_mask_visage_human_ayran
		add_scaled_artifact_modifier_majesty_effect = yes
	}
	else_if = {
		limit = { scope:smith.var:chosen_mask_likeness = flag:kusan }
		set_artifact_feature = oltenic_mask_base_human
		set_artifact_feature = oltenic_mask_visage_human_kusan
		random_list = {
			10 = { add_scaled_artifact_modifier_stress_gain_effect = yes }
			10 = { add_scaled_artifact_modifier_attractiveness_effect = yes }
			10 = { add_scaled_artifact_modifier_minor_prowess_effect = yes }
			10 = { add_scaled_artifact_modifier_stress_gain_effect = yes }
		}
	}
	else_if = {
		limit = { scope:smith.var:chosen_mask_likeness = flag:ayar }
		set_artifact_feature = oltenic_mask_base_human
		set_artifact_feature = oltenic_mask_visage_human_ayar
		add_scaled_artifact_modifier_income_effect = yes
	}
	else_if = {
		limit = { scope:smith.var:chosen_mask_likeness = flag:ioa }
		set_artifact_feature = oltenic_mask_base_human
		set_artifact_feature = oltenic_mask_visage_human_ioa
		add_scaled_artifact_modifier_vassal_opinion_effect = yes
	}
	else_if = {
		limit = { scope:smith.var:chosen_mask_likeness = flag:baytor }
		set_artifact_feature = oltenic_mask_base_human
		set_artifact_feature = oltenic_mask_visage_human_baytor
		random_list = {
			10 = { add_scaled_artifact_modifier_combat_effect  = yes }
			10 = { add_scaled_artifact_modifier_minor_prowess_effect = yes }
			10 = { add_scaled_artifact_modifier_archer_cavalry_screen_add_effect = yes }
		}
	}
	else_if = {
		limit = { scope:smith.var:chosen_mask_likeness = flag:mogha }
		set_artifact_feature = oltenic_mask_base_human
		set_artifact_feature = oltenic_mask_visage_human_mogha
		add_scaled_artifact_modifier_minor_prowess_effect = yes
	}
	else_if = {
		limit = { scope:smith.var:chosen_mask_likeness = flag:ogotei }
		set_artifact_feature = oltenic_mask_base_human
		set_artifact_feature = oltenic_mask_visage_human_ogotei
		add_scaled_artifact_modifier_knight_effect = yes
	}
	else_if = {
		limit = { scope:smith.var:chosen_mask_likeness = flag:korsakai }
		set_artifact_feature = oltenic_mask_base_human
		set_artifact_feature = oltenic_mask_visage_human_korsakai
		add_scaled_artifact_modifier_ruler_opinion_effect = yes
	}
	else_if = {
		limit = { scope:smith.var:chosen_mask_likeness = flag:toragei }
		set_artifact_feature = oltenic_mask_base_human
		set_artifact_feature = oltenic_mask_visage_human_toragei
		add_scaled_artifact_modifier_acceptance_effect = yes
	}
}

set_chosen_material_feature_effect = { # Set mask material features and add relevant extra modifiers
	if = { # Bloodcrystal
		limit = { scope:smith.var:chosen_mask_material = flag:bloodcrystal }
		set_artifact_feature = oltenic_mask_material_bloodcrystal
		add_artifact_modifier = artifact_health_penalty_8_modifier
		random_list = {
			30 = { add_artifact_aspect_modifier_effect = { NAME = blood VALUE = 4 } }
			20 = { add_artifact_aspect_modifier_effect = { NAME = blood VALUE = 5 } }
			10 = { add_artifact_aspect_modifier_effect = { NAME = blood VALUE = 6 } }
		}
		random_list = {
			10 = { random_artifact_magic_regeneration_modifier_effect = yes }
			10 = { random_artifact_magic_overwhelmation_modifier_effect = yes }
		}
	}
}

create_artifact_oltenic_mask_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	$SMITH$ = { save_scope_as = smith }
	$LOCATION$ = { save_scope_as = location }

	hidden_effect_new_object = {
		# Get artifact quality, wealth, materials, and decorations
		get_artifact_quality_effect = yes
		get_artifact_wealth_effect = yes
		scope:location = { add_to_list = artifact_material_sources }
		# Create the artifact
		if = {
			limit = { exists = scope:adventurer }
			create_artifact = { # Create an artifact from an adventure inspiration
				name = artifact_oltenic_mask_name
				description = placeholder
				type = oltenic_mask
				visuals = oltenic_mask
				template = olteni_mask_template
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = {
					location = scope:location
					actor = scope:adventurer
					recipient = root
					type = discovered
				}
			}
		}
		else_if = {
			limit = {
				scope:host ?= $OWNER$
				scope:activity ?= { has_activity_type = activity_tournament }
			}
			create_artifact = { # Create an artifact as a tournament prize
				name = artifact_oltenic_mask_name
				creator = scope:host
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				type = oltenic_mask
				visuals = oltenic_mask
				template = olteni_mask_template
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				history = {
					type = prize_created
					recipient = scope:host
				}
				save_scope_as = newly_created_artifact
			}
		}
		else_if = {
			limit = { exists = scope:smith }
			create_artifact = { # Create an artifact from a smith inspiration
				name = artifact_oltenic_mask_name
				creator = scope:smith
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				type = oltenic_mask
				visuals = oltenic_mask
				template = olteni_mask_template
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
			}
		}
		else = {
			create_artifact = { # Fallback
				name = artifact_oltenic_mask_name
				description = placeholder # Will be updated in the post-creation effects after decorations are assigned.
				type = oltenic_mask
				visuals = oltenic_mask
				template = olteni_mask_template
				modifier = artifact_placeholder_modifier
				wealth = scope:wealth
				quality = scope:quality
				save_scope_as = newly_created_artifact
				history = { type = created_before_history }
			}
		}

		scope:newly_created_artifact = { # Finish generating decorations and update description
			set_artifact_feature_group = oltenic_mask_base
			set_artifact_feature_group = oltenic_mask_material

			if = {
				limit = { has_artifact_feature = oltenic_mask_base_human }
				set_artifact_feature_group = oltenic_mask_gender
				set_artifact_feature_group = oltenic_mask_visage_human
				set_artifact_feature_group = oltenic_mask_expression
			}
			else_if = {
				limit = { has_artifact_feature = oltenic_mask_base_bestial }
				set_artifact_feature_group = oltenic_mask_visage_bestial
				set_artifact_feature_group = oltenic_mask_expression
			}
			else = { set_artifact_feature_group = oltenic_mask_visage_other }

			random_list = {
				40 = {
					trigger = { ep1_extravagant_artifact_decorations_trigger = yes }
					set_artifact_feature_group = oltenic_mask_detail_type
					set_artifact_feature_group = oltenic_mask_detail
					set_artifact_feature_group = oltenic_mask_detail_paint_color
					set_artifact_feature_group = oltenic_mask_addon
					set_artifact_feature_group = decoration_material_gem
				}
				30 = {
					trigger = {	ep1_advanced_artifact_decorations_trigger = yes }
					random_list = {
						40 = {
							set_artifact_feature_group = oltenic_mask_addon
							set_artifact_feature_group = decoration_material_gem
						}
						20 = {
							set_artifact_feature_group = oltenic_mask_detail_type
							set_artifact_feature_group = oltenic_mask_detail
							set_artifact_feature_group = oltenic_mask_detail_paint_color
							set_artifact_feature_group = oltenic_mask_addon
							set_artifact_feature_group = decoration_material_gem
						}
						10 = {
							set_artifact_feature_group = oltenic_mask_detail_type
							set_artifact_feature_group = oltenic_mask_detail
							set_artifact_feature_group = oltenic_mask_detail_paint_color
						}
					}
				}
				20 = {
					trigger = {	ep1_simple_artifact_decorations_trigger = yes }
					random_list = {
						80 = {
							set_artifact_feature_group = oltenic_mask_detail_type
							set_artifact_feature_group = oltenic_mask_detail
							set_artifact_feature_group = oltenic_mask_detail_paint_color
						}
						20 = {
							set_artifact_feature_group = oltenic_mask_addon
							set_artifact_feature_group = decoration_material_gem
						}
					}
				}
				10 = { # No decoration
					trigger = {	ep1_no_artifact_decorations_trigger = yes }
				}
			}

			if = { # Fetch appropriate owner's relation, if necessary
				limit = { has_artifact_feature = oltenic_mask_visage_human_parent }
				scope:owner = {
					random_parent = {
						even_if_dead = yes
						limit = { is_alive = no }
						weight = {
							base = 0
							modifier = {
								add = 100
								trigger_if = {
									limit = { is_female = yes }
									scope:newly_created_artifact = { has_artifact_feature = oltenic_mask_gender_female }
								}
								trigger_else = { scope:newly_created_artifact = { has_artifact_feature = oltenic_mask_gender_male } }
							}
						}
						scope:newly_created_artifact = {
							set_variable = {
								name = mask_likeness
								value = prev
							}
						}
					}
				}
			}
			else_if = {
				limit = { has_artifact_feature = oltenic_mask_visage_human_child }
				scope:owner = {
					random_child = {
						even_if_dead = yes
						limit = { is_alive = no }
						weight = {
							base = 0
							modifier = {
								add = 100
								trigger_if = {
									limit = { is_female = yes }
									scope:newly_created_artifact = { has_artifact_feature = oltenic_mask_gender_female }
								}
								trigger_else = { scope:newly_created_artifact = { has_artifact_feature = oltenic_mask_gender_male } }
							}
						}
						scope:newly_created_artifact = {
							set_variable = {
								name = mask_likeness
								value = prev
							}
						}
					}
				}
			}
			else_if = {
				limit = { has_artifact_feature = oltenic_mask_visage_human_sibling }
				scope:owner = {
					random_sibling = {
						even_if_dead = yes
						limit = { is_alive = no }
						weight = {
							base = 0
							modifier = {
								add = 100
								trigger_if = {
									limit = { is_female = yes }
									scope:newly_created_artifact = { has_artifact_feature = oltenic_mask_gender_female }
								}
								trigger_else = { scope:newly_created_artifact = { has_artifact_feature = oltenic_mask_gender_male } }
							}
						}
						scope:newly_created_artifact = {
							set_variable = {
								name = mask_likeness
								value = prev
							}
						}
					}
				}
			}
			else_if = {
				limit = { has_artifact_feature = oltenic_mask_visage_human_spouse }
				scope:owner = {
					random_spouse = {
						even_if_dead = yes
						limit = { is_alive = no }
						scope:newly_created_artifact = {
							set_variable = {
								name = mask_likeness
								value = prev
							}
						}
					}
				}
			}
			else_if = {
				limit = { has_artifact_feature = oltenic_mask_visage_human_twin_faces }
				scope:owner = {
					random_sibling = {
						even_if_dead = yes
						limit = { is_twin_of = prev }
						scope:newly_created_artifact = {
							set_variable = {
								name = mask_likeness
								value = prev
							}
						}
					}
				}
			}

			if = { # Fetch pre-determined mask likeness, if necessary
				limit = { scope:smith = { has_variable = chosen_mask_likeness } }
				set_chosen_likeness_feature_effect = yes
				scope:smith = { remove_variable = chosen_mask_likeness }
			}

			if = { # Fetch pre-determined mask material, if necessary
				limit = { scope:smith = { has_variable = chosen_mask_material } }
				set_chosen_material_feature_effect = yes
				scope:smith = { remove_variable = chosen_mask_material }
			}

			get_artifact_feature_references_effect = yes
			set_artifact_description = artifact_oltenic_mask_description

			if = { # Add artifact modifiers
				limit = { rarity = illustrious }
				add_scaled_artifact_modifier_minor_prowess_effect = yes
				add_scaled_artifact_modifier_minor_prestige_effect = yes
				add_scaled_artifact_modifier_majesty_effect = yes
				add_scaled_artifact_modifier_rulership_effect = yes
				random_list = {
					10 = { add_scaled_artifact_modifier_devotion_effect = yes }
					10 = { add_scaled_artifact_modifier_combat_effect = yes }
					10 = { add_scaled_artifact_modifier_archer_cavalry_screen_add_effect = yes }
				}
			}
			else_if = {
				limit = { rarity = famed }
				add_scaled_artifact_modifier_minor_prowess_effect = yes
				add_scaled_artifact_modifier_minor_prestige_effect = yes
				add_scaled_artifact_modifier_majesty_effect = yes
				random_list = {
					10 = { add_scaled_artifact_modifier_rulership_effect = yes }
					10 = { add_scaled_artifact_modifier_devotion_effect = yes }
					10 = { add_scaled_artifact_modifier_combat_effect = yes }
					10 = { add_scaled_artifact_modifier_archer_cavalry_screen_add_effect = yes }
				}
			}
			else_if = {
				limit= { rarity = masterwork }
				add_scaled_artifact_modifier_minor_prowess_effect = yes
				add_scaled_artifact_modifier_minor_prestige_effect = yes
				add_scaled_artifact_modifier_majesty_effect = yes
				random_list = {
					10 = { add_scaled_artifact_modifier_rulership_effect = yes }
					10 = { add_scaled_artifact_modifier_devotion_effect = yes }
					10 = { add_scaled_artifact_modifier_combat_effect = yes }
					10 = { add_scaled_artifact_modifier_archer_cavalry_screen_add_effect = yes }
				}
			}
			else_if = {
				limit= { rarity = common }
				add_scaled_artifact_modifier_minor_prowess_effect = yes
				add_scaled_artifact_modifier_minor_prestige_effect = yes
				random_list = {
					10 = { add_scaled_artifact_modifier_majesty_effect = yes }
					10 = { add_scaled_artifact_modifier_rulership_effect = yes }
					10 = { add_scaled_artifact_modifier_devotion_effect = yes }
					10 = { add_scaled_artifact_modifier_combat_effect = yes }
					10 = { add_scaled_artifact_modifier_archer_cavalry_screen_add_effect = yes }
				}
			}

			set_variable = {
				name = quality
				value = scope:quality
			}
			set_variable = {
				name = wealth
				value = scope:wealth
			}
		}
	}
}

add_scaled_artifact_modifier_magic_focused_vassal_opinion_effect = {
	if = {
		limit = { rarity = common }
		add_artifact_modifier = artifact_magic_focused_vassal_opinion_1_modifier
	}
	else_if = {
		limit = { rarity = masterwork }
		add_artifact_modifier = artifact_magic_focused_vassal_opinion_2_modifier
	}
	else_if = {
		limit = { rarity = famed }
		add_artifact_modifier = artifact_magic_focused_vassal_opinion_3_modifier
	}
	else_if = {
		limit = { rarity = illustrious }
		add_artifact_modifier = artifact_magic_focused_vassal_opinion_4_modifier
	}
}