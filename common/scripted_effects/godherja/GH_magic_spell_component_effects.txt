# THIS IS A GENERATED FILE.
#
# Source template:
# added_folders/templates/common/scripted_effects/godherja/GH_magic_spell_component_effects.txt.jinja
#
# Please avoid manually editing this file: your changes WILL be overwritten when it gets regenerated.
# Instead, edit the source template and/or variables, then run render_templates.bat .

###########################
# SPELL COMPONENT EFFECTS #
###########################

initialize_global_ingredient_list_effect = {
	create_ingredient_effect = { NAME = rockleaf RARITY = common PRICE = common_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = stress_gain TARGET = target SCALED_BY = flag:stone THRESHOLD = -1 NEGATE = yes }
	add_spell_effect_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_mind_fog_modifier TARGET = target SCALED_BY = flag:dream THRESHOLD = -1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	create_ingredient_effect = { NAME = black_laudanum RARITY = rare PRICE = rare_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = stress_gain TARGET = target SCALED_BY = flag:dream THRESHOLD = -2 NEGATE = yes }
	add_spell_effect_tag_to_last_created_ingredient_scripted_effect = { NAME = death_effect TARGET = target SCALED_BY = flag:dream THRESHOLD = 1 }
	add_variable_to_last_created_spell_effect_tag = { VARIABLE_TYPE = spell_effect_chance VALUE = 2 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = dream VALUE = 3 }
	create_ingredient_effect = { NAME = sanguine_nectar RARITY = rare PRICE = rare_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = stress_gain TARGET = target SCALED_BY = flag:blood THRESHOLD = -3 NEGATE = yes }
	add_spell_effect_tag_to_last_created_ingredient_scripted_effect = { NAME = stress_loss TARGET = target SCALED_BY = flag:blood THRESHOLD = -2 }
	add_spell_effect_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_mind_fog_modifier TARGET = target SCALED_BY = flag:blood THRESHOLD = -1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = blood VALUE = 3 }
	create_ingredient_effect = { NAME = deathcap RARITY = common PRICE = common_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_health_loss_modifier TARGET = target SCALED_BY = flag:death THRESHOLD = -1 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = death VALUE = 1 }
	create_ingredient_effect = { NAME = ancient_yew_needles RARITY = uncommon PRICE = uncommon_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_health_loss_modifier TARGET = target SCALED_BY = flag:nature THRESHOLD = -1 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = nature VALUE = 1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = blood VALUE = 1 }
	create_ingredient_effect = { NAME = mud_hemlock RARITY = uncommon PRICE = uncommon_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_health_loss_modifier TARGET = target SCALED_BY = flag:water THRESHOLD = -2 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = nature VALUE = 1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = water VALUE = 1 }
	create_ingredient_effect = { NAME = sunset_oleander RARITY = rare PRICE = rare_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_health_loss_modifier TARGET = target SCALED_BY = flag:nature THRESHOLD = -2 NEGATE = no }
	add_spell_effect_tag_to_last_created_ingredient_scripted_effect = { NAME = death_effect TARGET = target SCALED_BY = flag:death THRESHOLD = 0 }
	add_variable_to_last_created_spell_effect_tag = { VARIABLE_TYPE = spell_effect_chance VALUE = 10 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = death VALUE = 2 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = nature VALUE = 1 }
	create_ingredient_effect = { NAME = ojyczanyz_sorrow RARITY = very_rare PRICE = very_rare_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_health_loss_modifier TARGET = target SCALED_BY = flag:death THRESHOLD = -1 NEGATE = no }
	add_spell_effect_tag_to_last_created_ingredient_scripted_effect = { NAME = stress_gain TARGET = target SCALED_BY = flag:ethereal THRESHOLD = -3 }
	add_spell_effect_tag_to_last_created_ingredient_scripted_effect = { NAME = add_trait_depressed_1 TARGET = target SCALED_BY = flag:ethereal THRESHOLD = -1 }
	add_variable_to_last_created_spell_effect_tag = { VARIABLE_TYPE = spell_effect_chance VALUE = 2 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = ethereal VALUE = 2 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = death VALUE = 2 }
	create_ingredient_effect = { NAME = ambergris RARITY = rare PRICE = rare_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_viagra_modifier TARGET = target SCALED_BY = flag:water THRESHOLD = -2 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = water VALUE = 2 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	create_ingredient_effect = { NAME = lovers_hawthorn RARITY = uncommon PRICE = uncommon_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_viagra_modifier TARGET = target SCALED_BY = flag:blood THRESHOLD = 0 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_virility_opinion_modifier TARGET = target SCALED_BY = flag:nature THRESHOLD = 2 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = nature VALUE = 1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = blood VALUE = 1 }
	create_ingredient_effect = { NAME = gum_khenemhati RARITY = common PRICE = common_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_health_resistance_gain_modifier TARGET = target SCALED_BY = flag:none THRESHOLD = -1 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = nature VALUE = 1 }
	create_ingredient_effect = { NAME = coffee_damotica RARITY = uncommon PRICE = uncommon_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_stress_loss_mult_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = 0 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_stewardship_gain_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = 0 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = fire VALUE = 1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = nature VALUE = 1 }
	create_ingredient_effect = { NAME = cinnamon RARITY = uncommon PRICE = uncommon_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_monthly_income_gain_mult_modifier TARGET = target SCALED_BY = flag:nature THRESHOLD = -1 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = fire VALUE = 1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = nature VALUE = 1 }
	create_ingredient_effect = { NAME = vanilla RARITY = rare PRICE = rare_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_virility_opinion_modifier TARGET = target SCALED_BY = flag:water THRESHOLD = -1 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_virility_opinion_modifier TARGET = target SCALED_BY = flag:nature THRESHOLD = -1 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = water VALUE = 2 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = nature VALUE = 1 }
	create_ingredient_effect = { NAME = wyrm_egg RARITY = uncommon PRICE = uncommon_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_prowess_gain_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = -1 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = fire VALUE = 2 }
	create_ingredient_effect = { NAME = purified_mote_of_everflame RARITY = very_rare PRICE = very_rare_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_trait_synergy_wrathful TARGET = target SCALED_BY = flag:fire THRESHOLD = -1 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_dry_terrain_advantage_magic_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = -1 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_county_modifier_decimate_defense_county_magic_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = -1 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = fire VALUE = 4 }
	create_ingredient_effect = { NAME = devils_horn_coral RARITY = uncommon PRICE = uncommon_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_sailing_magic_disadvantage_magic_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = -2 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_water_magic_disadvantage_magic_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = -2 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_health_loss_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = 0 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = fire VALUE = 1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = water VALUE = 1 }
	create_ingredient_effect = { NAME = volcanic_salts RARITY = uncommon PRICE = uncommon_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_health_gain_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = 0 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_health_resistance_gain_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = 0 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_stewardship_gain_modifier TARGET = target SCALED_BY = flag:stone THRESHOLD = 0 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = fire VALUE = 1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	create_ingredient_effect = { NAME = dragon_scale RARITY = rare PRICE = rare_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_health_resistance_gain_modifier TARGET = target SCALED_BY = flag:stone THRESHOLD = -1 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_prowess_gain_modifier TARGET = target SCALED_BY = flag:fire THRESHOLD = 0 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = fire VALUE = 2 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	create_ingredient_effect = { NAME = flawless_diamond RARITY = very_rare PRICE = very_rare_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_county_modifier_fort_creation_county_magic_modifier TARGET = target SCALED_BY = flag:stone THRESHOLD = -2 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_county_modifier_long_term_fort_creation_county_magic_modifier TARGET = target SCALED_BY = flag:stone THRESHOLD = -2 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 4 }
	create_ingredient_effect = { NAME = kharadan_salt RARITY = uncommon PRICE = uncommon_ingredient_cost }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = stress_gain TARGET = target SCALED_BY = flag:stone THRESHOLD = 0 NEGATE = yes }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = stress_gain TARGET = target SCALED_BY = flag:ice THRESHOLD = 0 NEGATE = yes }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_stress_loss_mult_modifier TARGET = target SCALED_BY = flag:stone THRESHOLD = 0 NEGATE = no }
	add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = { NAME = add_character_modifier_magic_stress_loss_mult_modifier TARGET = target SCALED_BY = flag:ice THRESHOLD = 0 NEGATE = no }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = ice VALUE = 1 }
	create_ingredient_effect = { NAME = ash_ward RARITY = uncommon PRICE = uncommon_ingredient_cost }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = nature VALUE = 1 }
	add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	
	### PLANTS
	
	#Thunder-Scarred Bark - I choose capacitor_2, because it felt less battery than Wratcrystals.
	#create_ingredient_effect = { NAME = thunder_scarred_bark RARITY =  PRICE = }
	#add_tag_to_last_created_ingredient_effect = { NAME = arcane_destabilizer_2 }
	#add_tag_to_last_created_ingredient_effect = { NAME = capacitor_2 }
	#add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = air VALUE = 2 }
	
	## Poisons
	
	#Last Sigh - apparently the most toxic thing known to man.
	# create_ingredient_effect = { NAME = last_sigh RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = poison_3 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = death VALUE = 3 }
	
	# Seeds of Cyrat Strangler Fig - metaphorically strangles the mind (sedative), destabilizes, and is still full of vital force
	# create_ingredient_effect = { NAME = strangler_fig_seeds RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = sedative_3 }
	# add_tag_to_last_created_ingredient_effect = { NAME = arcane_destabilizer_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = water VALUE = 2 }

	##Hallucinogens
	# Moss Pearl - it was meant to be hallucinogen. I dunno if you want to make it just stress thing, or have separate hallucinogen tag for mixed magic
	# create_ingredient_effect = { NAME = moss_pearl RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = arcane_stabilizer_1 }
	# add_tag_to_last_created_ingredient_effect = { NAME = hallucinogen_1}
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = nature VALUE = 1 }

	
	### FUNGI
	
	### ANIMAL/CREATURE/HUMAN PARTS
	
	#Ancient Fingerbones
	# create_ingredient_effect = { NAME = ancient_fingerbone RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = arcane_destabilizer_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = death VALUE = 2 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = blood VALUE = 1 }
	
	#Cerebrospinalis Concentrate - 'Transfers pain from one person to another, giving them stress', 'Stressor for just characters, stress reliever for sadistic characters.'
	# create_ingredient_effect = { NAME = cerebrospinalis_concentrate RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = transfer_stress_1 }
	# add_tag_to_last_created_ingredient_effect = { NAME = stress_if_nice_2 }
	# add_tag_to_last_created_ingredient_effect = { NAME = destress_if_bad_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = blood VALUE = 1 }
	
	#Cockatrice Eyes
	# create_ingredient_effect = { NAME = cockatrice_eye RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = arcane_stabilizer_2 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = celestial VALUE = 1 }
	
	#Charged Cockatrice Eyes - maybe make them not appear next to each other?, or make some sort of special Charged tick?, because they share big part of loc and would look bad next to each other 
	# create_ingredient_effect = { NAME = cockatrice_eye_charged RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = arcane_stabilizer_2 }
	# add_tag_to_last_created_ingredient_effect = { NAME = injury_chance_1 }
	# add_tag_to_last_created_ingredient_effect = { NAME = blind_chance_1 }	
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 3 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = celestial VALUE = 3 }
	
	# Dragon-Eater Snail - probably around Aversarian Isles - it is meant to be a little toxic while handling, giving illness
	# create_ingredient_effect = { NAME = dragon_eater_snail RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = toxic_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = dark VALUE = 2 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = water VALUE = 1 }
	
	#Golem Pebbles - is so foul when used in concoctions that gives stress
	# create_ingredient_effect = { NAME = golem_pebbles RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = stress_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	
	#Fuligin Bone Shards
	# create_ingredient_effect = { NAME = fuligin_bone_shard RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = dangerous_backfires_2 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = death VALUE = 1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = fire VALUE = 1 }
	
	#Petrified Dragon Scale - I imagine that "Can cause users to become so enraged they mindlessly attack those around them, or find themselves free of all stress and worries" should also clear e.g. Melancholic.
	# create_ingredient_effect = { NAME = petrified_dragon_scale RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = enrage_chance_1 }
	# add_tag_to_last_created_ingredient_effect = { NAME = bliss_chance_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = fire VALUE = 1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	
	# Snakestone - from Kashirya
	# create_ingredient_effect = { NAME = snakestone RARITY = PRICE = }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = light VALUE = 1 }
	
	#Slime of the Herder Toad
	# create_ingredient_effect = { NAME = slime_herder_toad RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = aphrodisiac_3 }
	# add_tag_to_last_created_ingredient_effect = { NAME = adds_years_of_fertility_2 }
	# add_tag_to_last_created_ingredient_effect = { NAME = repulsive_3 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = water VALUE = 1 }

	#Scryer's Cone
	# create_ingredient_effect = { NAME = scryers_cone RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = poison_3 }
	# add_tag_to_last_created_ingredient_effect = { NAME = poison_2 }
	# add_tag_to_last_created_ingredient_effect = { NAME = sap_health_prowess_perm_1 }
	# add_tag_to_last_created_ingredient_effect = { NAME = divination_good_2 }
	# add_tag_to_last_created_ingredient_effect = { NAME = divination_good_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = water VALUE = 1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	
	# Tower Lizard's Gland - from Kemsar; it serves as a magic battery of sort, lightening the Magic cost.
	# create_ingredient_effect = { NAME = tower_lizards_gland RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = capacitor_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = light VALUE = 1 }

	
	### MINERALS/METALS/ETC
	
	# Guguwrāt Crystal - from Kashirya; I added capacitor, because it has magic battery vibes :) I added injury chance & destabilizer, because damn unstable things.
	# create_ingredient_effect = { NAME = guguwrat_crystal RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = arcane_destabilizer_2 }
	# add_tag_to_last_created_ingredient_effect = { NAME = injury_chance_2 }
	# add_tag_to_last_created_ingredient_effect = { NAME = capacitor_3 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = air VALUE = 3 }
	
	#Haemium Pellets - last one is "moderately strong poison", and I dunno what that corresponds with.
	# create_ingredient_effect = { NAME = haemium_pellet_low RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = arcane_stabilizer_1 }
	# add_tag_to_last_created_ingredient_effect = { NAME = healthy_ingredient_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = blood VALUE = 1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = metal VALUE = 1 }
	# create_ingredient_effect = { NAME = haemium_pellet_middling RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = arcane_stabilizer_2 }
	# add_tag_to_last_created_ingredient_effect = { NAME = unhealthy_2 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = blood VALUE = 2 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = metal VALUE = 1 }
	# create_ingredient_effect = { NAME = haemium_pellet_potent RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = arcane_stabilizer_3 }
	# add_tag_to_last_created_ingredient_effect = { NAME = poison_2 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = blood VALUE = 3 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = metal VALUE = 1 }

	#Magic-Binding Powder - it should be usable only with healing spell like Mending. - rids the body of Overcharge and greatly alleviates symptoms of Exposure Sickness. - it has significant chance of healing physical magic mutations by ridding body of excessive magic - it has chance (a high learning test?, just 15%? or 30%) of downgrading your Magic Potency
 
	# create_ingredient_effect = { NAME = magic_binding_powder RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = overcharge_lower_3 }
	# add_tag_to_last_created_ingredient_effect = { NAME = physical_mutation_heal_chance_2 }
	# add_tag_to_last_created_ingredient_effect = { NAME = magic_potency_lower_chance_1 }

	
	# Orichalc Sliver - it causes insomnia (that gives stress), and some chance of injury
	# create_ingredient_effect = { NAME = orichalc_sliver RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = stress_1 }
	# add_tag_to_last_created_ingredient_effect = { NAME = light_injury_chance_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = light VALUE = 3 }
	
	# Sarradonian Crystaline Powder - "small-ish (15%?) chance each use to give you cancer in 5 years."
	# create_ingredient_effect = { NAME = sarradonian_crystalline_powder RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = arcane_stabilizer_1 }
	# add_tag_to_last_created_ingredient_effect = { NAME = cancer_chance_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = stone VALUE = 1 }
	
	### WINES, MIXTURES, AND EVERYTHING BOTTLED
	## WINES
	# Cloudy Perequine / Dreamwine - can give trait (temperance, content, calm) - probably better off as one effect in loc, but I felt better having these as separate and reusable effects
	# create_ingredient_effect = { NAME = dreamwine RARITY = PRICE = }
	# add_tag_to_last_created_ingredient_effect = { NAME = temperate_chance_1 }
	# add_tag_to_last_created_ingredient_effect = { NAME = content_chance_1 }
	# add_tag_to_last_created_ingredient_effect = { NAME = calm_chance_1 }
	# add_ingredient_aspect_to_last_created_ingredient_effect = { ASPECT = dream VALUE = 1 }

	
}
create_herbal_solution_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = herbal_solution_spell_component REQUIRED = $REQUIRED$ }
	scope:herbal_solution_spell_component_scope ?= {
		if = {
			limit = {
				OR = {
					exists = prev.var:stone
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:rockleaf }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:dream
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:black_laudanum }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:blood
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:sanguine_nectar }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:nature
					exists = prev.var:blood
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:ancient_yew_needles }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:nature
					exists = prev.var:water
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:mud_hemlock }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:death
					exists = prev.var:nature
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:sunset_oleander }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:ethereal
					exists = prev.var:death
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:ojyczanyz_sorrow }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:water
					exists = prev.var:stone
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_viagra_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:ambergris }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:nature
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_monthly_income_gain_mult_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:cinnamon }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:water
					exists = prev.var:nature
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_virility_opinion_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_virility_opinion_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:vanilla }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:stone
					exists = prev.var:ice
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stress_loss_mult_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stress_loss_mult_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:kharadan_salt }
		}
		add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
	}
	
	# Delete the spell component in case no valid ingredients were found
	if = {
		limit = {
			scope:herbal_solution_spell_component_scope ?= { NOT = { has_variable_list = spell_component_ingredient_list } }
		}
		remove_list_variable = {
			name = spell_component_list
			target = scope:herbal_solution_spell_component_scope
		}
		scope:herbal_solution_spell_component_scope = { end_story = yes }
	}
}
create_incense_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = incense_spell_component REQUIRED = $REQUIRED$ }
	scope:incense_spell_component_scope ?= {
		if = {
			limit = {
				OR = {
					exists = prev.var:nature
					exists = prev.var:blood
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:ancient_yew_needles }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:nature
					exists = prev.var:water
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:mud_hemlock }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:water
					exists = prev.var:stone
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_viagra_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:ambergris }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:nature
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stress_loss_mult_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stewardship_gain_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:coffee_damotica }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:nature
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_monthly_income_gain_mult_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:cinnamon }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:water
					exists = prev.var:nature
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_virility_opinion_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_virility_opinion_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:vanilla }
		}
		add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
	}
	
	# Delete the spell component in case no valid ingredients were found
	if = {
		limit = {
			scope:incense_spell_component_scope ?= { NOT = { has_variable_list = spell_component_ingredient_list } }
		}
		remove_list_variable = {
			name = spell_component_list
			target = scope:incense_spell_component_scope
		}
		scope:incense_spell_component_scope = { end_story = yes }
	}
}
create_powder_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = powder_spell_component REQUIRED = $REQUIRED$ }
	scope:powder_spell_component_scope ?= {
		if = {
			limit = {
				OR = {
					exists = prev.var:death
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:deathcap }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:water
					exists = prev.var:stone
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_viagra_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:ambergris }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:nature
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_resistance_gain_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:gum_khenemhati }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:nature
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stress_loss_mult_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stewardship_gain_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:coffee_damotica }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:water
					exists = prev.var:nature
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_virility_opinion_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_virility_opinion_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:vanilla }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:stone
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_gain_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_resistance_gain_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stewardship_gain_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:volcanic_salts }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:stone
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_resistance_gain_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_prowess_gain_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:dragon_scale }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:stone
					exists = prev.var:ice
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stress_loss_mult_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stress_loss_mult_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:kharadan_salt }
		}
		add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
	}
	
	# Delete the spell component in case no valid ingredients were found
	if = {
		limit = {
			scope:powder_spell_component_scope ?= { NOT = { has_variable_list = spell_component_ingredient_list } }
		}
		remove_list_variable = {
			name = spell_component_list
			target = scope:powder_spell_component_scope
		}
		scope:powder_spell_component_scope = { end_story = yes }
	}
}
create_libation_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = libation_spell_component REQUIRED = $REQUIRED$ }
	scope:libation_spell_component_scope ?= {
		if = {
			limit = {
				OR = {
					exists = prev.var:dream
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:black_laudanum }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:blood
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:sanguine_nectar }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:nature
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stress_loss_mult_modifier } }
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stewardship_gain_modifier } }
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:coffee_damotica }
		}
		add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
	}
	
	# Delete the spell component in case no valid ingredients were found
	if = {
		limit = {
			scope:libation_spell_component_scope ?= { NOT = { has_variable_list = spell_component_ingredient_list } }
		}
		remove_list_variable = {
			name = spell_component_list
			target = scope:libation_spell_component_scope
		}
		scope:libation_spell_component_scope = { end_story = yes }
	}
}
create_sedative_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = sedative_spell_component REQUIRED = $REQUIRED$ }
	scope:sedative_spell_component_scope ?= {
		if = {
			limit = {
				OR = {
					exists = prev.var:stone
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:rockleaf }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:dream
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:black_laudanum }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:blood
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:sanguine_nectar }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:stone
					exists = prev.var:ice
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:kharadan_salt }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:stone
					exists = prev.var:ice
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:kharadan_salt }
		}
		add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
	}
	
	# Delete the spell component in case no valid ingredients were found
	if = {
		limit = {
			scope:sedative_spell_component_scope ?= { NOT = { has_variable_list = spell_component_ingredient_list } }
		}
		remove_list_variable = {
			name = spell_component_list
			target = scope:sedative_spell_component_scope
		}
		scope:sedative_spell_component_scope = { end_story = yes }
	}
}
create_poison_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = poison_spell_component REQUIRED = $REQUIRED$ }
	scope:poison_spell_component_scope ?= {
		if = {
			limit = {
				OR = {
					exists = prev.var:death
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:deathcap }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:nature
					exists = prev.var:blood
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:ancient_yew_needles }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:nature
					exists = prev.var:water
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:mud_hemlock }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:death
					exists = prev.var:nature
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:sunset_oleander }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:ethereal
					exists = prev.var:death
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:ojyczanyz_sorrow }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:water
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:devils_horn_coral }
		}
		add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
	}
	
	# Delete the spell component in case no valid ingredients were found
	if = {
		limit = {
			scope:poison_spell_component_scope ?= { NOT = { has_variable_list = spell_component_ingredient_list } }
		}
		remove_list_variable = {
			name = spell_component_list
			target = scope:poison_spell_component_scope
		}
		scope:poison_spell_component_scope = { end_story = yes }
	}
}
create_aphrodisiac_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = aphrodisiac_spell_component REQUIRED = $REQUIRED$ }
	scope:aphrodisiac_spell_component_scope ?= {
		if = {
			limit = {
				OR = {
					exists = prev.var:water
					exists = prev.var:stone
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:ambergris }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:nature
					exists = prev.var:blood
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:lovers_hawthorn }
		}
		add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
	}
	
	# Delete the spell component in case no valid ingredients were found
	if = {
		limit = {
			scope:aphrodisiac_spell_component_scope ?= { NOT = { has_variable_list = spell_component_ingredient_list } }
		}
		remove_list_variable = {
			name = spell_component_list
			target = scope:aphrodisiac_spell_component_scope
		}
		scope:aphrodisiac_spell_component_scope = { end_story = yes }
	}
}
create_medication_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = medication_spell_component REQUIRED = $REQUIRED$ }
	scope:medication_spell_component_scope ?= {
		if = {
			limit = {
				OR = {
					exists = prev.var:nature
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:gum_khenemhati }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:stone
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:volcanic_salts }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:stone
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:volcanic_salts }
		}
		if = {
			limit = {
				OR = {
					exists = prev.var:fire
					exists = prev.var:stone
				}
			}
			add_spell_component_ingredient_effect = { INGREDIENT = global_var:dragon_scale }
		}
		add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
	}
	
	# Delete the spell component in case no valid ingredients were found
	if = {
		limit = {
			scope:medication_spell_component_scope ?= { NOT = { has_variable_list = spell_component_ingredient_list } }
		}
		remove_list_variable = {
			name = spell_component_list
			target = scope:medication_spell_component_scope
		}
		scope:medication_spell_component_scope = { end_story = yes }
	}
}

create_randomized_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = $NAME$ REQUIRED = $REQUIRED$ }
	scope:$NAME$_scope ?= {
		random_list = {
			pick = $PICK$
			0 = {
				limit = {
					OR = {
						exists = prev.var:stone
					}
				}
				modifier = {
					add = 1
					exists = prev.var:stone
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:rockleaf }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:dream
					}
				}
				modifier = {
					add = 1
					exists = prev.var:dream
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:black_laudanum }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:blood
					}
				}
				modifier = {
					add = 1
					exists = prev.var:blood
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:sanguine_nectar }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:death
					}
				}
				modifier = {
					add = 1
					exists = prev.var:death
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:deathcap }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:nature
						exists = prev.var:blood
					}
				}
				modifier = {
					add = 1
					exists = prev.var:nature
				}
				modifier = {
					add = 1
					exists = prev.var:blood
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:ancient_yew_needles }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:nature
						exists = prev.var:water
					}
				}
				modifier = {
					add = 1
					exists = prev.var:nature
				}
				modifier = {
					add = 1
					exists = prev.var:water
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:mud_hemlock }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:death
						exists = prev.var:nature
					}
				}
				modifier = {
					add = 1
					exists = prev.var:death
				}
				modifier = {
					add = 1
					exists = prev.var:nature
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:sunset_oleander }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:ethereal
						exists = prev.var:death
					}
				}
				modifier = {
					add = 1
					exists = prev.var:ethereal
				}
				modifier = {
					add = 1
					exists = prev.var:death
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:ojyczanyz_sorrow }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:water
						exists = prev.var:stone
					}
				}
				modifier = {
					add = 1
					exists = prev.var:water
				}
				modifier = {
					add = 1
					exists = prev.var:stone
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_viagra_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:ambergris }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:nature
						exists = prev.var:blood
					}
				}
				modifier = {
					add = 1
					exists = prev.var:nature
				}
				modifier = {
					add = 1
					exists = prev.var:blood
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_viagra_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_virility_opinion_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:lovers_hawthorn }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:nature
					}
				}
				modifier = {
					add = 1
					exists = prev.var:nature
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_resistance_gain_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:gum_khenemhati }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:fire
						exists = prev.var:nature
					}
				}
				modifier = {
					add = 1
					exists = prev.var:fire
				}
				modifier = {
					add = 1
					exists = prev.var:nature
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stress_loss_mult_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stewardship_gain_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:coffee_damotica }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:fire
						exists = prev.var:nature
					}
				}
				modifier = {
					add = 1
					exists = prev.var:fire
				}
				modifier = {
					add = 1
					exists = prev.var:nature
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_monthly_income_gain_mult_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:cinnamon }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:water
						exists = prev.var:nature
					}
				}
				modifier = {
					add = 1
					exists = prev.var:water
				}
				modifier = {
					add = 1
					exists = prev.var:nature
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_virility_opinion_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_virility_opinion_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:vanilla }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:fire
					}
				}
				modifier = {
					add = 1
					exists = prev.var:fire
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_prowess_gain_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:wyrm_egg }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:fire
					}
				}
				modifier = {
					add = 1
					exists = prev.var:fire
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_trait_synergy_wrathful } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_dry_terrain_advantage_magic_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_county_modifier_decimate_defense_county_magic_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:purified_mote_of_everflame }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:fire
						exists = prev.var:water
					}
				}
				modifier = {
					add = 1
					exists = prev.var:fire
				}
				modifier = {
					add = 1
					exists = prev.var:water
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_sailing_magic_disadvantage_magic_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_water_magic_disadvantage_magic_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:devils_horn_coral }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:fire
						exists = prev.var:stone
					}
				}
				modifier = {
					add = 1
					exists = prev.var:fire
				}
				modifier = {
					add = 1
					exists = prev.var:stone
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_gain_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_resistance_gain_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stewardship_gain_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:volcanic_salts }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:fire
						exists = prev.var:stone
					}
				}
				modifier = {
					add = 1
					exists = prev.var:fire
				}
				modifier = {
					add = 1
					exists = prev.var:stone
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_resistance_gain_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_prowess_gain_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:dragon_scale }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:stone
					}
				}
				modifier = {
					add = 1
					exists = prev.var:stone
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_county_modifier_fort_creation_county_magic_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_county_modifier_long_term_fort_creation_county_magic_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:flawless_diamond }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:stone
						exists = prev.var:ice
					}
				}
				modifier = {
					add = 1
					exists = prev.var:stone
				}
				modifier = {
					add = 1
					exists = prev.var:ice
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:stress_gain } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stress_loss_mult_modifier } }
				}
				modifier = {
					add = 5
					prev = { spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_stress_loss_mult_modifier } }
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:kharadan_salt }
			}
			0 = {
				limit = {
					OR = {
						exists = prev.var:nature
						exists = prev.var:stone
					}
				}
				modifier = {
					add = 1
					exists = prev.var:nature
				}
				modifier = {
					add = 1
					exists = prev.var:stone
				}
				add_spell_component_ingredient_effect = { INGREDIENT = global_var:ash_ward }
			}
		}
		add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
	}
}

generate_procedural_spell_component_list_effect = {
	while = {
		count = $COUNT$
		random_list = {
			1 = {
				trigger = {
					trigger_if = {
						limit = { has_variable_list = spell_component_list }
						NOT = {
							any_in_list = {
								variable = spell_component_list
								var:spell_component_name ?= flag:herbal_solution_spell_component
							}
						}
					}
					OR = {
						exists = var:stone
						exists = var:dream
						exists = var:blood
						exists = var:nature
						exists = var:water
						exists = var:death
						exists = var:ethereal
						exists = var:fire
						exists = var:ice
					}
				}
				create_herbal_solution_spell_component_effect = { REWARD_TYPE = inherits_aspects REWARD_AMOUNT = 0 REQUIRED = no }
			}
			1 = {
				trigger = {
					trigger_if = {
						limit = { has_variable_list = spell_component_list }
						NOT = {
							any_in_list = {
								variable = spell_component_list
								var:spell_component_name ?= flag:incense_spell_component
							}
						}
					}
					OR = {
						exists = var:nature
						exists = var:blood
						exists = var:water
						exists = var:stone
						exists = var:fire
					}
				}
				create_incense_spell_component_effect = { REWARD_TYPE = inherits_aspects REWARD_AMOUNT = 0 REQUIRED = no }
			}
			1 = {
				trigger = {
					trigger_if = {
						limit = { has_variable_list = spell_component_list }
						NOT = {
							any_in_list = {
								variable = spell_component_list
								var:spell_component_name ?= flag:powder_spell_component
							}
						}
					}
					OR = {
						exists = var:death
						exists = var:water
						exists = var:stone
						exists = var:nature
						exists = var:fire
						exists = var:ice
					}
				}
				create_powder_spell_component_effect = { REWARD_TYPE = inherits_aspects REWARD_AMOUNT = 0 REQUIRED = no }
			}
			1 = {
				trigger = {
					trigger_if = {
						limit = { has_variable_list = spell_component_list }
						NOT = {
							any_in_list = {
								variable = spell_component_list
								var:spell_component_name ?= flag:libation_spell_component
							}
						}
					}
					OR = {
						exists = var:dream
						exists = var:blood
						exists = var:fire
						exists = var:nature
					}
				}
				create_libation_spell_component_effect = { REWARD_TYPE = inherits_aspects REWARD_AMOUNT = 0 REQUIRED = no }
			}
			1 = {
				trigger = {
					trigger_if = {
						limit = { has_variable_list = spell_component_list }
						NOT = {
							any_in_list = {
								variable = spell_component_list
								var:spell_component_name ?= flag:sedative_spell_component
							}
						}
					}
					OR = {
						spell_has_tag_trigger = { NAME = flag:stress_gain }
					}
					OR = {
						exists = var:stone
						exists = var:dream
						exists = var:blood
						exists = var:ice
					}
				}
				create_sedative_spell_component_effect = { REWARD_TYPE = inherits_aspects REWARD_AMOUNT = 0 REQUIRED = no }
			}
			1 = {
				trigger = {
					trigger_if = {
						limit = { has_variable_list = spell_component_list }
						NOT = {
							any_in_list = {
								variable = spell_component_list
								var:spell_component_name ?= flag:poison_spell_component
							}
						}
					}
					OR = {
						spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_loss_modifier }
					}
					OR = {
						exists = var:death
						exists = var:nature
						exists = var:blood
						exists = var:water
						exists = var:ethereal
						exists = var:fire
					}
				}
				create_poison_spell_component_effect = { REWARD_TYPE = inherits_aspects REWARD_AMOUNT = 0 REQUIRED = no }
			}
			1 = {
				trigger = {
					trigger_if = {
						limit = { has_variable_list = spell_component_list }
						NOT = {
							any_in_list = {
								variable = spell_component_list
								var:spell_component_name ?= flag:aphrodisiac_spell_component
							}
						}
					}
					OR = {
						spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_viagra_modifier }
					}
					OR = {
						exists = var:water
						exists = var:stone
						exists = var:nature
						exists = var:blood
					}
				}
				create_aphrodisiac_spell_component_effect = { REWARD_TYPE = inherits_aspects REWARD_AMOUNT = 0 REQUIRED = no }
			}
			1 = {
				trigger = {
					trigger_if = {
						limit = { has_variable_list = spell_component_list }
						NOT = {
							any_in_list = {
								variable = spell_component_list
								var:spell_component_name ?= flag:medication_spell_component
							}
						}
					}
					OR = {
						spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_gain_modifier }
						spell_has_tag_trigger = { NAME = flag:add_character_modifier_magic_health_resistance_gain_modifier }
					}
					OR = {
						exists = var:fire
						exists = var:stone
						exists = var:nature
					}
				}
				create_medication_spell_component_effect = { REWARD_TYPE = inherits_aspects REWARD_AMOUNT = 0 REQUIRED = no }
			}
		}
	}
}

################
# NONGENERATED #
################

create_ingredient_effect = {
	random_ruler = { #Create an empty story container
		create_story = {
			type = story_generic_storage
			save_scope_as = new_ingredient_scope
		}
	}
	if = { #Go into the new component's scope
		limit = { exists = scope:new_ingredient_scope }
		set_global_variable = {
			name = $NAME$
			value = scope:new_ingredient_scope
		}
		add_to_global_variable_list = { #List of all ingredients
			name = global_ingredient_list
			target = scope:new_ingredient_scope
		}
		scope:new_ingredient_scope = {
			set_variable = {
				name = ingredient_name
				value = flag:$NAME$
			}
			set_variable = {
				name = ingredient_rarity
				value = flag:ingredient_rarity_$RARITY$
			}
			set_variable = {
				name = ingredient_price
				value = $PRICE$
			}
		}
	}
}

add_spell_tag_to_last_created_ingredient_effect = {
	scope:new_ingredient_scope ?= {
		add_spell_tag_to_last_created_spell_scripted_effect = { NAME = $NAME$ }
	}
}

add_spell_effect_tag_to_last_created_ingredient_scripted_effect = {
	scope:new_ingredient_scope ?= {
		create_spell_effect_tag_scripted_effect = { NAME = $NAME$ TARGET = $TARGET$ SCALED_BY = $SCALED_BY$ THRESHOLD = $THRESHOLD$ }
	}
}

add_spell_effect_modifier_tag_to_last_created_ingredient_scripted_effect = {
	add_spell_effect_tag_to_last_created_ingredient_scripted_effect = { NAME = $NAME$ TARGET = $TARGET$ SCALED_BY = $SCALED_BY$ THRESHOLD = $THRESHOLD$ }
	scope:new_tag ?= {
		set_variable = spell_effect_modifier
		if = {
			limit = { always = $NEGATE$ }
			set_variable = negate_spell_effect
		}
	}
	scope:new_ingredient_scope ?= {
		add_to_variable_list = {
			name = spell_effect_modifier_list
			target = scope:new_tag
		}
		if = {
			limit = { has_variable_list = standard_spell_effect_list }
			remove_list_variable = {
				name = standard_spell_effect_list
				target = scope:new_tag
			}
		}
		if = {
			limit = { has_variable_list = nonstandard_spell_effect_list }
			remove_list_variable = {
				name = nonstandard_spell_effect_list
				target = scope:new_tag
			}
		}
	}
}

add_ingredient_aspect_to_last_created_ingredient_effect = {
	if = {
		limit = { exists = scope:new_ingredient_scope }
		scope:new_ingredient_scope = {
			set_variable = {
				name = $ASPECT$
				value = $VALUE$
			}
			add_to_variable_list = {
				name = ingredient_aspect_list
				target = flag:$ASPECT$
			}
		}
	}
}

###########################
# SPELL COMPONENT EFFECTS #
###########################

#This is called from the new_spell scope. It makes a new
#Component, names it, and attatches it to the spell
create_spell_component_effect = {
	if = {
		limit = { exists = scope:$COMPONENT_NAME$_scope }
		clear_saved_scope = $COMPONENT_NAME$_scope 
	}
	random_ruler = { #Create an empty story container
		create_story = {
			type = story_generic_storage
			save_scope_as = $COMPONENT_NAME$_scope
		}
	}
	scope:$COMPONENT_NAME$_scope ?= {
		set_variable = {
			name = spell_component_name
			value = flag:$COMPONENT_NAME$
		}
		# Required for GUI trickery/localized overloading
		set_variable = {
			name = spell_component_template
			value = this
		}
		set_variable = {
			name = spell_component_parent_spell
			value = prev
		}
		if = { #Set whether or not the spell component is required for the spell
			limit = { always = $REQUIRED$ }
			set_variable = spell_component_required
		}
	}
	if = { #Have the spell save the component
		limit = { exists = scope:$COMPONENT_NAME$_scope }
		add_to_variable_list = {
			name = spell_component_list
			target = scope:$COMPONENT_NAME$_scope
		}
	}
}
#Rename the spell component
#Called from the component's scope
set_spell_component_name_effect = {
	set_variable = {
		name = spell_component_name
		value = flag:$COMPONENT_NAME$
	}
}

add_spell_component_bonus_or_cost_effect = {
	set_variable = {
		name = $TYPE$
		value = $VALUE$
	}
	magic_aspect_effect = { MODE = set_spell_component }
	# For UI purposes
	set_variable = {
		name = last_added_cost_or_bonus
		value = flag:$TYPE$
	}
	add_to_variable_list = {
		name = spell_component_cost_and_bonus_list
		target = flag:$TYPE$
	}
}

add_spell_component_input_slot_effect = {
	set_variable = {
		name = spell_component_input_slot_type
		value = flag:$TYPE$
	}
	set_variable = $TYPE$
}

add_spell_component_input_slot_modifier_effect = {
	if = {
		limit = { flag:$TYPE$ = flag:skill }
		add_to_variable_list = {
			name = spell_component_input_modifier_$TYPE$_list
			target = flag:$IDENTIFIER$_skill
		}
		set_variable = {
			name = $IDENTIFIER$_skill
			value = $VALUE$
		}
	}
	else_if = {
		limit = { flag:$TYPE$ = flag:artifact_type }
		set_variable = {
			name = $TYPE$
			value = flag:$IDENTIFIER$
		}
	}
	else = {
		add_to_variable_list = {
			name = spell_component_input_modifier_$TYPE$_list
			target = flag:$IDENTIFIER$
		}
		set_variable = {
			name = $IDENTIFIER$
			value = $VALUE$
		}
	}
}

add_spell_component_ingredient_effect = {
	set_variable = {
		name = spell_component_input_slot_type
		value = flag:ingredient_spell_component_input
	}
	add_to_variable_list = {
		name = spell_component_ingredient_list
		target = $INGREDIENT$
	}
}

####################################
# SPELL-COMPONENT-SPECIFIC EFFECTS #
####################################

create_pay_gold_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = pay_gold REQUIRED = $REQUIRED$ }
	save_scope_value_as = {
		name = cost_scope
		value = {
			value = $COST$
			multiply = -1
		}
	}
	if = {
		limit = { exists = scope:pay_gold_scope }
		scope:pay_gold_scope = {
			set_variable = toggleable
			add_spell_component_bonus_or_cost_effect = { TYPE = gold VALUE = scope:cost_scope }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

create_pay_wounds_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = pay_wounds REQUIRED = $REQUIRED$ }
	save_scope_value_as = {
		name = cost_scope
		value = {
			value = $COST$
			multiply = -1
		}
	}
	if = {
		limit = { exists = scope:pay_wounds_scope }
		scope:pay_wounds_scope = {
			set_variable = toggleable
			add_spell_component_bonus_or_cost_effect = { TYPE = wounds VALUE = scope:cost_scope }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

## Character Components 
create_sacrifice_prisoner_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = character_prisoner REQUIRED = $REQUIRED$ }
	if = {
		limit = { exists = scope:character_prisoner_scope }
		scope:character_prisoner_scope = {
			add_spell_component_input_slot_effect = { TYPE = character_spell_component_input }
			set_variable = consumes_input
			add_spell_component_input_slot_modifier_effect = { TYPE = status IDENTIFIER = imprisoned VALUE = 0 }
			add_spell_component_input_slot_modifier_effect = { TYPE = trait_group IDENTIFIER = magic_good_1 VALUE = 25 }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

add_sacrifice_prisoner_spell_component_bonus_or_cost_effect = {
	if = {
		limit = { 
			exists = scope:character_prisoner_scope
			always = no # Disabling this for now to prevent gui loc issues
		}
		scope:character_prisoner_scope = {
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

#create_sacrificer_spell_component_effect = {
#	create_spell_component_effect = { COMPONENT_NAME = character_cabal REQUIRED = $REQUIRED$ }
#	if = {
#		limit = { exists = scope:character_cabal_scope }
#		scope:character_cabal_scope = {
#			add_spell_component_input_slot_effect = { TYPE = character_spell_component_input }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = sadistic VALUE = 50 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = diligent VALUE = 25 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = callous VALUE = 25 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait_group IDENTIFIER = education_living_magic_1 VALUE = 25 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait_group IDENTIFIER = lifestyle_physician VALUE = 50 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = skill IDENTIFIER = learning VALUE = 2 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = compassionate VALUE = -50 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = lazy VALUE = -25 }
#			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
#		}
#	}
#}

#create_herbal_sacrificer_component_effect = {
#	create_spell_component_effect = { COMPONENT_NAME = character_cabal REQUIRED = $REQUIRED$ }
#	if = {
#		limit = { exists = scope:character_cabal_scope }
#		scope:character_cabal_scope = {
#			add_spell_component_input_slot_effect = { TYPE = character_spell_component_input }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = diligent VALUE = 25 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait_group IDENTIFIER = education_living_magic_1 VALUE = 20 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = lifestyle_herbalist VALUE = 50 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = skill IDENTIFIER = learning VALUE = 2 }
#			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
#		}
#	}
#}

#create_mineral_sacrificer_component_effect = {
#	create_spell_component_effect = { COMPONENT_NAME = character_cabal REQUIRED = $REQUIRED$ }
#	if = {
#		limit = { exists = scope:character_cabal_scope }
#		scope:character_cabal_scope = {
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = diligent VALUE = 25 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait_group IDENTIFIER = education_dead_magic_1 VALUE = 20 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = scholar VALUE = 20 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = stubborn VALUE = 20 }
#			add_spell_component_input_slot_modifier_effect = { TYPE = skill IDENTIFIER = learning VALUE = 2 }
#			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
#		}
#	}
#}

create_physician_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = character_cabal REQUIRED = $REQUIRED$ }
	if = {
		limit = { exists = scope:character_cabal_scope }
		scope:character_cabal_scope = {
			add_spell_component_input_slot_effect = { TYPE = character_spell_component_input }
			add_spell_component_input_slot_modifier_effect = { TYPE = trait_group IDENTIFIER = lifestyle_physician VALUE = 50 }
			add_spell_component_input_slot_modifier_effect = { TYPE = skill IDENTIFIER = learning VALUE = 2 }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

create_herbalist_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = character_cabal REQUIRED = $REQUIRED$ }
	if = {
		limit = { exists = scope:character_cabal_scope }
		scope:character_cabal_scope = {
			add_spell_component_input_slot_effect = { TYPE = character_spell_component_input }
			add_spell_component_input_slot_modifier_effect = { TYPE = trait IDENTIFIER = lifestyle_herbalist VALUE = 25 }
			add_spell_component_input_slot_modifier_effect = { TYPE = skill IDENTIFIER = stewardship VALUE = 0.25 }
			add_spell_component_input_slot_modifier_effect = { TYPE = skill IDENTIFIER = learning VALUE = 0.5 }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

create_inter_in_ice_prisoner_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = character_prisoner REQUIRED = $REQUIRED$ }
	if = {
		limit = { exists = scope:character_prisoner_scope }
		scope:character_prisoner_scope = {
			set_variable = needed_for_event
			add_spell_component_input_slot_effect = { TYPE = character_spell_component_input }
			add_spell_component_input_slot_modifier_effect = { TYPE = status IDENTIFIER = imprisoned VALUE = 0 }
			add_spell_component_input_slot_modifier_effect = { TYPE = trait_group IDENTIFIER = magic_good_1 VALUE = 5 }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }

		}
	}
}

## Artifact Components

create_sacrificial_dagger_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = sacrificial_dagger_spell_component REQUIRED = $REQUIRED$ }
	if = {
		limit = { exists = scope:sacrificial_dagger_spell_component_scope }
		scope:sacrificial_dagger_spell_component_scope = {
			add_spell_component_input_slot_effect = { TYPE = artifact_spell_component_input }
			add_spell_component_input_slot_modifier_effect = { TYPE = artifact_type IDENTIFIER = dagger VALUE = 0 }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

create_bone_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = bone_spell_component REQUIRED = $REQUIRED$ }
	if = {
		limit = { exists = scope:bone_spell_component_scope }
		scope:bone_spell_component_scope  = {
			set_variable = bone_for_crafting
			add_spell_component_input_slot_effect = { TYPE = artifact_spell_component_input }
			add_spell_component_input_slot_modifier_effect = { TYPE = artifact_type IDENTIFIER = bone VALUE = 0 }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

create_bone_sacrifice_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = bone_sacrifice_spell_component REQUIRED = $REQUIRED$ }
	if = {
		limit = { exists = scope:bone_sacrifice_spell_component_scope }
		scope:bone_sacrifice_spell_component_scope  = {
			set_variable = consumes_artifact_input
			add_spell_component_input_slot_effect = { TYPE = artifact_spell_component_input }
			add_spell_component_input_slot_modifier_effect = { TYPE = artifact_type IDENTIFIER = bone VALUE = 0 }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

create_gemstone_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = gemstone_spell_component REQUIRED = $REQUIRED$ }
	if = {
		limit = { exists = scope:gemstone_spell_component_scope }
		scope:gemstone_spell_component_scope = {
			set_variable = consumes_artifact_input
			add_spell_component_input_slot_effect = { TYPE = artifact_spell_component_input }
			add_spell_component_input_slot_modifier_effect = { TYPE = artifact_type IDENTIFIER = gemstone VALUE = 0 }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

create_aervalr_shard_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = aervalr_shard_spell_component REQUIRED = $REQUIRED$ }
	if = {
		limit = { exists = scope:aervalr_shard_spell_component_scope }
		scope:aervalr_shard_spell_component_scope = {
			set_variable = consumes_artifact_input
			add_spell_component_input_slot_effect = { TYPE = artifact_spell_component_input }
			add_spell_component_input_slot_modifier_effect = { TYPE = artifact_type IDENTIFIER = aervalr_shard VALUE = 0 }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

create_prism_spell_component_effect = {
	create_spell_component_effect = { COMPONENT_NAME = prism_spell_component REQUIRED = $REQUIRED$ }
	if = {
		limit = { exists = scope:prism_spell_component_scope }
		scope:prism_spell_component_scope = {
			add_spell_component_input_slot_effect = { TYPE = artifact_spell_component_input }
			add_spell_component_input_slot_modifier_effect = { TYPE = artifact_type IDENTIFIER = prism VALUE = 0 }
			add_spell_component_bonus_or_cost_effect = { TYPE = $REWARD_TYPE$ VALUE = $REWARD_AMOUNT$ }
		}
	}
}

