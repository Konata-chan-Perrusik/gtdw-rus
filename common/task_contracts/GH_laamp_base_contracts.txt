##################################################
# INFO
# For laamp contracts that are broadly applicable: that is, they should be able to trigger virtually anywhere and with a minimum of triggers.
# The idea is that any given laamp led by a character skilled in any one thing should always be viable — maybe through crime, maybe by demeaning themselves, but they should always have some contracts around to work with.
# But with a twist - its all that but for Godherja actually and so cooler and sexier
##################################################



##################################################
# GROUPS (for populate_task_contracts_for_area)
# 
# laamp_contracts_arcana_group
# laamp_contracts_slayer_group
# 

##################################################
# #Arcana Contracts
# gh_laamp_base_0001		Unravel a curse
# gh_laamp_base_0011		Identify an enchantment
# gh_laamp_base_0021		Speak to your employer's dead ancestor
# gh_laamp_base_0031		Cure someone of a strange poison
# gh_laamp_base_0041 		Perform minor miracles
# gh_laamp_base_0051 		Sell fake charms (Gallowsbait)
#
# #Slayer Contracts
# gh_laamp_base_1001		Slay some chaff
# gh_laamp_base_1011		Hunt a dangerous monster
# gh_laamp_base_1021		Ambush a monster inside a castle
# gh_laamp_base_1031		Capture a beast for a menagerie
# gh_laamp_base_1041 		Resolve a haunting
#
# Migration Contracts
# gh_laamp_base_9001 		Escort Refugees
# gh_laamp_base_9011 		Negotiate with Locals
# gh_laamp_base_9021 		Act as forward scouts
# gh_laamp_base_9031 		Feed the masses
# gh_laamp_base_9041 		Loot aversarian settlements (criminal)
##################################################










##################################################
# ARCANA CONTRACTS

# Unravel a curse
#gh_laamp_base_0001 = {
#	group = laamp_contracts_arcana_group
#	icon = "gfx/interface/icons/scheme_types/icon_scheme_learn_spell.dds"
#
#	travel = yes
#	use_diplomatic_range = no
#
#	weight = {
#		# Standard weights.
#		value = task_contract_weight_default_value
#		add = laamp_contracts_weight_up_learning_value
#		# Employer weights.
#		scope:employer = {
#			add = {
#				# Weight up.
#				## Traits that appreciate works of learning.
#				if = {
#					limit = { has_trait = scholar }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = theologian }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = eccentric }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = patient }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = shy }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				# Weight down.
#				## Traits that don't support these gorramned NERDS.
#				if = {
#					limit = { has_trait = gregarious }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = impatient }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = athletic }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				# Restrictions.
#				min = task_contract_weight_employer_associated_traits_min_value
#				max = task_contract_weight_employer_associated_traits_max_value
#			}
#			multiply = task_contract_weight_by_tier_value
#			# This weight is an override, so make sure it's placed at the bottom.
#			add = task_contract_weight_employer_contact_list_value
#		}
#	}
#
#	# Validity Triggers
#	valid_to_create = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = scope:employer
#			LAAMP = root
#		}
#		employer_has_treasury_to_offer_job_trigger = yes
#		valid_laamp_sensible_start_trigger = yes
#		rule_out_dramatic_laamp_employers_trigger = yes
#		NOT = {
#			scope:employer = { government_has_flag = government_is_tribal }
#		}
#	}
#	valid_to_accept = {
#		# Standard triggers.
#		valid_laamp_basic_accept_only_trigger = yes
#		valid_laamp_basic_trigger = {
#			EMPLOYER = scope:employer
#			LAAMP = root
#		}
#		scope:employer = { is_landed = yes }
#	}
#	valid_to_continue = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = root.task_contract_employer
#			LAAMP = root.task_contract_taker
#		}
#		task_contract_employer = { is_landed = yes }
#	}
#	valid_to_keep = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = root.task_contract_employer
#			LAAMP = root.task_contract_taker
#		}
#		task_contract_employer = { is_landed = yes }
#	}
#
#	on_create = {
#		scope:contract = {
#			save_scope_as = task_contract
#			set_variable = {
#				name = task_contract_employer
#				value = scope:task_contract.task_contract_employer
#			}
#			# Make our gold rewards static.
#			grab_gold_fuzz_number_effect = yes
#			set_variable = {
#				name = gold_success_qualified
#				value = task_contract_taker.task_contract_success_gold_gain_half_value
#			}
#			set_variable = {
#				name = gold_success_standard
#				value = task_contract_taker.task_contract_success_gold_gain_full_value
#			}
#			# Make sure critical values are a bit higher.
#			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
#			set_variable = {
#				name = gold_success_critical
#				value = task_contract_taker.task_contract_success_gold_gain_critical_value
#			}
#		}
#	}
#
#	# On_actions
#	on_accepted = {
#		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
#		# For easy access
#		save_scope_as = task_contract
#		task_contract_employer = { save_scope_as = employer }
#		# Trigger the first education event
#		task_contract_taker ?= { trigger_event = laamp_base_learning_contract_events.4001 }
#		# Plus, set up some variables for us.
#		## Progress tallies.
#		increment_variable_effect = {
#			VAR = score_tally
#			VAL = 0
#		}
#		increment_variable_effect = {
#			VAR = text_passages_left
#			VAL = 3
#		}
#		### Victory tiers.
#		increment_variable_effect = {
#			VAR = win_t1_threshold
#			VAL = 3 #You smooch by on the standard answer
#		}
#		increment_variable_effect = {
#			VAR = win_t2_threshold
#			VAL = 7 #You use your language/traits twice and also have a successful embellishment
#		}
#		increment_variable_effect = {
#			VAR = win_t3_threshold
#			VAL = 9 #All three embellishments are successful :yeslikethis:
#		}
#	}
#
#	# Rewards
#	task_contract_reward = {
#		success_qualified = {
#			should_print_on_complete = yes
#			effect = {
#				# Camp building extra Stewardship Rewards: +50%.
#				if = {
#					limit = {
#						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_stewardship_contract_rewards }
#					}
#					save_scope_value_as = { name = extra_reward value = flag:yes }
#				}
#				# Standard Reward.
#				else = {
#					save_scope_value_as = { name = extra_reward value = flag:no }
#				}
#				laamp_rewards_disburse_ordinary_currency_effect = {
#					GOLD = scope:task_contract.var:gold_success_qualified
#					PRESTIGE = 0
#					PIETY = 0
#					PROVISIONS = task_contract_success_provisions_gain_minor_value
#					OPINION = task_contract_opinion_reduced_reward_value
#					OPINION_TYPE = succeeded_task_contract_opinion
#					CONTACT = no
#					CONTACT_HOOK = no
#					EXTRA_REWARD = scope:extra_reward
#				}
#			}
#		}
#		success_standard = {
#			should_print_on_complete = yes
#			effect = {
#				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
#				# Camp building extra Learning Rewards: +50%.
#				if = {
#					limit = {
#						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
#					}
#					save_scope_value_as = { name = extra_reward value = flag:yes }
#				}
#				else = {
#					save_scope_value_as = { name = extra_reward value = flag:no }
#				}
#				laamp_rewards_disburse_ordinary_currency_effect = {
#					GOLD = scope:task_contract.var:gold_success_standard
#					PRESTIGE = task_contract_success_prestige_gain_half_value
#					PIETY = task_contract_success_piety_gain_half_value
#					PROVISIONS = task_contract_success_provisions_gain_minor_value
#					OPINION = task_contract_opinion_standard_reward_value
#					OPINION_TYPE = succeeded_task_contract_opinion
#					CONTACT = yes
#					CONTACT_HOOK = no
#					EXTRA_REWARD = scope:extra_reward
#				}
#			}
#		}
#		success_critical = {
#			should_print_on_complete = yes
#			effect = {
#				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
#				# Camp building extra Learning Rewards: +50%.
#				if = {
#					limit = {
#						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
#					}
#					save_scope_value_as = { name = extra_reward value = flag:yes }
#				}
#				else = {
#					save_scope_value_as = { name = extra_reward value = flag:no }
#				}
#				laamp_rewards_disburse_ordinary_currency_effect = {
#					GOLD = scope:task_contract.var:gold_success_critical
#					PRESTIGE = task_contract_success_prestige_gain_full_value
#					PIETY = task_contract_success_piety_gain_full_value
#					PROVISIONS = task_contract_success_provisions_gain_medium_value
#					OPINION = task_contract_opinion_excelled_reward_value
#					OPINION_TYPE = critically_succeeded_task_contract_opinion
#					CONTACT = yes
#					CONTACT_HOOK = yes
#					EXTRA_REWARD = scope:extra_reward
#				}
#			}
#		}
#		failure_standard = {
#			positive = no
#			should_print_on_complete = yes
#			effect = {
#				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
#				save_scope_value_as = { name = extra_reward value = flag:no }
#				# Standard Penalties.
#				laamp_rewards_disburse_ordinary_currency_effect = {
#					GOLD = 0
#					PRESTIGE = 0
#					PIETY = 0
#					PROVISIONS = task_contract_failure_provisions_gain_minor_value
#					OPINION = task_contract_opinion_standard_failure_value
#					OPINION_TYPE = failed_task_contract_opinion
#					CONTACT = no
#					CONTACT_HOOK = no
#					EXTRA_REWARD = scope:extra_reward
#				}
#			}
#		}
#	}
#}



##################################################
# SLAYER CONTRACTS

# Slay some vermin
gh_laamp_base_1001 = {
	group = laamp_contracts_slayer_group
	icon = "gfx/interface/icons/scheme_types/icon_scheme_slayer.dds"

	travel = yes
	use_diplomatic_range = no

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = laamp_contracts_weight_up_slayer_value
		add = laamp_contracts_weight_up_prowess_value
		add = laamp_contracts_weight_up_arcana_slight_value
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that are too lazy or cowardly to bother with low level monsters.
				if = {
					limit = { has_trait = impatient }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lazy }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = fickle }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = craven }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				## Traits that would rather deal with things themselves.
				if = {
					limit = { has_trait = brave }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = diligent }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lifestyle_hunter }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
	}

	# Validity Triggers
	valid_to_create = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		rule_out_dramatic_laamp_employers_trigger = yes
		NOR = {
			scope:employer = { government_has_flag = government_is_tribal }
			scope:employer = { government_has_flag = government_is_migratory }
		}
		scope:employer = { is_human = yes }
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		task_contract_employer = { save_scope_as = employer }
		# Then we start the scheme.
		task_contract_taker ?= {
			start_scheme = {
				type = gh_laamp_base_1001_contract_scheme
				contract = root
				target_character = root.task_contract_employer
			}
			# Make a note of what the scheme even is; we'll need this for the event too.
			scope:task_contract.scheme = { save_scope_as = scheme }
			trigger_event = gh_laamp_base_contract_schemes.1001
		}
	}
	on_create = {
		scope:contract = {
			# Make our gold rewards static.
			grab_gold_fuzz_number_effect = yes
			save_scope_as = task_contract
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
			# Pick an animal
			task_contract_location = { save_scope_as = animal_location_override }
			scope:task_contract_employer ?= { select_local_animal_effect = { TYPE = vermin } }
		}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				task_contract_taker = {
					# Update Hunter score.
					add_trait_xp = {
						trait = lifestyle_hunter
						track = beasthunter
						value = lifestyle_beasthunter_xp_gain_minor_value
					}
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_major_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				task_contract_taker = {
					# Update Hunter score.
					add_trait_xp = {
						trait = lifestyle_hunter
						track = beasthunter
						value = lifestyle_beasthunter_xp_gain_medium_value
					}
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = task_contract_failure_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = {
					# You are a worse beasthunter for it
					lower_hunter_xp_effect = { VALUE = -5 }
				}
			}
		}
	}
}

## Hunt a dangerous monster
#gh_laamp_slayer_base_1011 = {
#	group = laamp_contracts_justicar_group
#	icon = "gfx/interface/icons/scheme_types/icon_scheme_slayer.dds"
#
#	travel = yes
#	use_diplomatic_range = no
#
#	weight = {
#		# Standard weights.
#		value = task_contract_weight_default_value
#		add = laamp_contracts_weight_up_prowess_value
#		# Employer weights.
#		scope:employer = {
#			add = {
#				# Weight up.
#				## Traits that would rather outsource their problems, or fears monsters.
#				if = {
#					limit = { has_trait = impatient }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = lazy }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = fickle }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = callous }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = craven }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				# Weight down.
#				## Traits that prefer a personal touch.
#				if = {
#					limit = { has_trait = brave }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = patient }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = diligent }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = lifestyle_hunter }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				# Restrictions.
#				min = task_contract_weight_employer_associated_traits_min_value
#				max = task_contract_weight_employer_associated_traits_max_value
#			}
#			multiply = task_contract_weight_by_tier_value
#			# This weight is an override, so make sure it's placed at the bottom.
#			add = task_contract_weight_employer_contact_list_value
#		}
#	}
#
#	# Validity Triggers
#	valid_to_create = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = scope:employer
#			LAAMP = root
#		}
#		employer_has_treasury_to_offer_job_trigger = yes
#		valid_laamp_sensible_start_trigger = yes
#		rule_out_dramatic_laamp_employers_trigger = yes
#		NOT = {
#			scope:employer = { government_has_flag = government_is_tribal }
#			scope:employer.capital_province = { is_wooded_trigger = yes }
#		}
#	}
#	valid_to_accept = {
#		# Standard triggers.
#		valid_laamp_basic_accept_only_trigger = yes
#		valid_laamp_basic_trigger = {
#			EMPLOYER = scope:employer
#			LAAMP = root
#		}
#		scope:employer = { is_landed = yes }
#	}
#	valid_to_continue = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = root.task_contract_employer
#			LAAMP = root.task_contract_taker
#		}
#		task_contract_employer = { is_landed = yes }
#	}
#	valid_to_keep = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = root.task_contract_employer
#			LAAMP = root.task_contract_taker
#		}
#		task_contract_employer = { is_landed = yes }
#	}
#
#	# On_actions
#	on_accepted = {
#		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
#		# For the intro event.
#		save_scope_as = task_contract
#		task_contract_employer = { save_scope_as = employer }
#		# Then we start the scheme.
#		task_contract_taker ?= {
#			start_scheme = {
#				type = gh_laamp_base_1011_contract_scheme
#				contract = root
#				target_character = root.task_contract_employer
#			}
#			# Make a note of what the scheme even is; we'll need this for the event too.
#			scope:task_contract.scheme = { save_scope_as = scheme }
#			trigger_event = laamp_base_contract_schemes.6011
#		}
#	}
#
#	# Rewards
#	task_contract_reward = {
#		success_standard = {
#			should_print_on_complete = yes
#			effect = {
#				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
#				save_scope_value_as = { name = extra_reward value = flag:no }
#				# Standard Rewards.
#				laamp_rewards_disburse_ordinary_currency_effect = {
#					GOLD = 0
#					PRESTIGE = task_contract_success_prestige_gain_half_value
#					PIETY = task_contract_success_provisions_gain_minor_value
#					PROVISIONS = task_contract_success_provisions_gain_minor_value
#					OPINION = task_contract_opinion_standard_reward_value
#					OPINION_TYPE = succeeded_task_contract_opinion
#					CONTACT = yes
#					CONTACT_HOOK = no
#					EXTRA_REWARD = scope:extra_reward
#				}
#				task_contract_taker = {
#					# Update gallowsbait score.
#					lower_gallowsbait_xp_effect = { VALUE = -5 }
#					# Update Knight-Errant score.
#					laamp_rewards_apply_knight_errant_xp_effect = {
#						XP_MAX = knight_errant_xp_minor_gain
#						XP_MIN = knight_errant_xp_minor_gain
#					}
#					task_contract_justicar_contract_tracker_effect = yes
#				}
#			}
#		}
#		failure_standard = {
#			positive = no
#			should_print_on_complete = yes
#			effect = {
#				save_scope_value_as = { name = extra_reward value = flag:no }
#				# Standard Penalties.
#				laamp_rewards_disburse_ordinary_currency_effect = {
#					GOLD = 0
#					PRESTIGE = task_contract_failure_prestige_loss_full_value
#					PIETY = 0
#					PROVISIONS = task_contract_failure_provisions_gain_minor_value
#					OPINION = task_contract_opinion_standard_failure_value
#					OPINION_TYPE = failed_task_contract_opinion
#					CONTACT = no
#					CONTACT_HOOK = no
#					EXTRA_REWARD = scope:extra_reward
#				}
#			}
#		}
#	}
#}
#
## Ambush a monster inside a castle
gh_laamp_base_1021 = {
	group = laamp_contracts_slayer_group
	icon = "gfx/interface/icons/scheme_types/icon_scheme_slayer.dds"

	travel = yes
	use_diplomatic_range = no

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = laamp_contracts_weight_up_slayer_value
		add = laamp_contracts_weight_up_prowess_value
		add = laamp_contracts_weight_up_arcana_slight_value
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that are too lazy or cowardly to bother with low level monsters.
				if = {
					limit = { has_trait = impatient }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lazy }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = fickle }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = craven }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				## Traits that would rather deal with things themselves.
				if = {
					limit = { has_trait = brave }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = diligent }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lifestyle_hunter }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
	}

	# Validity Triggers
	valid_to_create = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		rule_out_dramatic_laamp_employers_trigger = yes
		scope:employer = { # Should have enough land to request a Castle be cleared
			highest_held_title_tier >= tier_county
			any_sub_realm_county = {
				OR = {
					has_county_corruption_trigger = yes
					county_control <= 50
				}
			}
		}
		NOR = { # Needs to have castles
			scope:employer = { government_has_flag = government_is_tribal }
			scope:employer = { government_has_flag = government_is_migratory }
		}
		scope:employer = { is_human = yes }
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		task_contract_employer = { save_scope_as = employer }
		# Then we start the scheme.
		task_contract_taker ?= {
			start_scheme = {
				type = gh_laamp_base_1021_contract_scheme
				contract = root
				target_character = root.task_contract_employer
			}
			# Make a note of what the scheme even is; we'll need this for the event too.
			scope:task_contract.scheme = { save_scope_as = scheme }
			trigger_event = gh_laamp_base_contract_schemes.1021
		}
	}
	on_create = {
		scope:contract = {
			# Make our gold rewards static.
			grab_gold_fuzz_number_effect = yes
			save_scope_as = task_contract
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
			# Pick an animal
			task_contract_location = { save_scope_as = animal_location_override }
			scope:task_contract_employer ?= { select_local_animal_effect = { TYPE = monstrous } }
		}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				task_contract_taker = {
					# Update Hunter score.
					add_trait_xp = {
						trait = lifestyle_hunter
						track = beasthunter
						value = lifestyle_beasthunter_xp_gain_minor_value
					}
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_major_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				task_contract_taker = {
					# Update Hunter score.
					add_trait_xp = {
						trait = lifestyle_hunter
						track = hunter
						value = lifestyle_beasthunter_xp_gain_medium_value
					}
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = task_contract_failure_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = {
					# You are a worse beasthunter for it
					lower_hunter_xp_effect = { VALUE = -5 }
				}
			}
		}
	}
}

# Capture a beast for a menagerie

# Resolve a Haunting
gh_laamp_base_1041 = {
	group = laamp_contracts_slayer_group
	icon = "gfx/interface/icons/scheme_types/icon_scheme_slayer.dds"

	travel = yes
	use_diplomatic_range = no

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = laamp_contracts_weight_up_slayer_value
		add = laamp_contracts_weight_up_prowess_value
		add = laamp_contracts_weight_up_arcana_slight_value
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that are too lazy or cowardly to bother with low level monsters.
				if = {
					limit = { has_trait = impatient }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lazy }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = fickle }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = craven }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				## Traits that would rather deal with things themselves.
				if = {
					limit = { has_trait = brave }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = diligent }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lifestyle_hunter }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
	}

	# Validity Triggers
	valid_to_create = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		rule_out_dramatic_laamp_employers_trigger = yes
		NOR = {
			scope:employer = { government_has_flag = government_is_tribal }
			scope:employer = { government_has_flag = government_is_migratory }
		}
		scope:employer = { is_human = yes }
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		task_contract_employer = { save_scope_as = employer }
		# Then we start the scheme.
		task_contract_taker ?= {
			start_scheme = {
				type = gh_laamp_base_1041_contract_scheme
				contract = root
				target_character = root.task_contract_employer
			}
			# Make a note of what the scheme even is; we'll need this for the event too.
			scope:task_contract.scheme = { save_scope_as = scheme }
			trigger_event = gh_laamp_base_contract_schemes.1041
		}
	}
	on_create = {
		scope:contract = {
			# Make our gold rewards static.
			grab_gold_fuzz_number_effect = yes
			save_scope_as = task_contract
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
			# Pick an animal
			task_contract_location = { save_scope_as = animal_location_override }
			scope:task_contract_employer ?= { select_local_animal_effect = { TYPE = incorporeal } }
		}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				task_contract_taker = {
					# Update Slayer score.
					add_trait_xp = {
						trait = lifestyle_hunter
						track = beasthunter
						value = lifestyle_beasthunter_xp_gain_minor_value
					}
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_major_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				task_contract_taker = {
					# Update Slayer score.
					add_trait_xp = {
						trait = lifestyle_hunter
						track = beasthunter
						value = lifestyle_beasthunter_xp_gain_medium_value
					}
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = task_contract_failure_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = {
					# You are a worse beasthunter for it
					lower_hunter_xp_effect = { VALUE = -5 }
				}
			}
		}
	}
}


## Aid Refugees
gh_laamp_base_9001 = {
	group = laamp_contracts_migration_group
	icon = "gfx/interface/icons/character_interactions/icon_culture.dds"

	travel = yes
	use_diplomatic_range = no

	weight = {
		value = task_contract_weight_default_value
		add = laamp_contracts_weight_up_migration_contracts_value
		# Employer weights
		scope:employer = {
			add = {
				# Weight up.
				## Traits that want to be effective but subtle.
				if = {
					limit = { has_trait = deceitful }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = patient }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = arbitrary }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				## Traits that feel this type of manipulation is beneath them
				if = {
					limit = { has_trait = impatient }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = just }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				## Plus just some where the narrative would feel weird.
				if = {
					limit = { has_trait = callous }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = sadistic }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = {
						NOR = {
							has_title = title:e_migrant_coalition
							top_liege = { has_title = title:e_migrant_coalition }
						}
					}
					multiply = 0
				}
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
		}
	}

	# Validity Triggers
	valid_to_create = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		rule_out_dramatic_laamp_employers_trigger = yes
		# Specific flavour triggers.
		## Won't resort to this.
		laamp_task_contract_employer_would_resort_to_violence_trigger = yes
		laamp_task_contract_employer_would_resort_to_deceit_trigger = yes
		OR = {
			scope:employer = { has_title = title:e_migrant_coalition }
			scope:employer.top_liege = { has_title = title:e_migrant_coalition }
		}
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed = yes }
		is_independent_ruler = no
		top_liege = {has_title = title:e_migrant_coalition }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}
	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the scheme.
		task_contract_taker ?= {
			start_scheme = {
				type = gh_laamp_base_9001_contract_scheme
				contract = root
				target_character = root.task_contract_employer
			}
			# Make a note of what the scheme even is; we'll need this for the event too.
			scope:task_contract.scheme = { save_scope_as = scheme }
			trigger_event = gh_laamp_base_contract_schemes.9001
		}
	}
	on_create = {
		scope:contract = {
			# Make our gold rewards static.
			grab_gold_fuzz_number_effect = yes
			save_scope_as = task_contract
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = var:gold_success_standard
			}
			set_variable = migration_contract
		}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				# Update Knight-Errant score.
				task_contract_taker = {
					laamp_rewards_apply_knight_errant_xp_effect = {
						XP_MAX = knight_errant_xp_medium_gain
						XP_MIN = knight_errant_xp_medium_gain
					}
					task_contract_justicar_contract_tracker_effect = yes
				}
				# Add Contribution
				gh_gain_contribution_from_task_contract_effect = {
					CONTRIBUTION = task_contract_success_contribution_gain_full_value
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Critical Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				# Update Knight-Errant score.
				task_contract_taker = {
					laamp_rewards_apply_knight_errant_xp_effect = {
						XP_MAX = knight_errant_xp_major_gain
						XP_MIN = knight_errant_xp_major_gain
					}
					task_contract_justicar_contract_tracker_effect = yes
				}
				# Add Contribution
				gh_gain_contribution_from_task_contract_effect = {
					CONTRIBUTION = task_contract_success_contribution_gain_full_value
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = task_contract_failure_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				# Add Contribution
				gh_gain_contribution_from_task_contract_effect = {
					CONTRIBUTION = task_contract_success_contribution_gain_full_value
				}
			}
		}
	}
}

## Negotiate with locals
gh_laamp_base_9011 = {
	group = laamp_contracts_migration_group
	icon = "gfx/interface/icons/character_interactions/icon_scheme_expand_power_base.dds"

	travel = yes
	use_diplomatic_range = no

	weight = {
		value = task_contract_weight_default_value
		add = laamp_contracts_weight_up_migration_contracts_value
		# Employer weights
		scope:employer = {
			add = {
				# Weight up.
				## Traits that want to be effective but subtle.
				if = {
					limit = { has_trait = shy }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lazy }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = arbitrary }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = impatient }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				## Traits that feel this type of manipulation is beneath them
				if = {
					limit = { has_trait = gregarious }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = diligent }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = just }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = patient }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				## Plus just some where the narrative would feel weird.
				if = {
					limit = { has_trait = callous }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = sadistic }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = {
						NOR = {
							has_title = title:e_migrant_coalition
							top_liege = { has_title = title:e_migrant_coalition }
						}
					}
					multiply = 0
				}
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
		}
	}

	# Validity Triggers
	valid_to_create = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		rule_out_dramatic_laamp_employers_trigger = yes
		# Specific flavour triggers.
		## Won't resort to this.
		laamp_task_contract_employer_would_resort_to_violence_trigger = yes
		laamp_task_contract_employer_would_resort_to_deceit_trigger = yes
		OR = {
			scope:employer = { has_title = title:e_migrant_coalition }
			scope:employer.top_liege = { has_title = title:e_migrant_coalition }
		}
		root.location.culture = { has_cultural_pillar = heritage_aversarian }
		# Specific flavour triggers.
		scope:employer = {
			AND = {
				highest_held_title_tier >= tier_county
				sub_realm_size >= 3
			}
			NOR = {
				has_trait = arrogant
				has_trait = arbitrary
			}
		}
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed = yes }
		is_independent_ruler = no
		top_liege = {has_title = title:e_migrant_coalition }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}
	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		task_contract_employer = { save_scope_as = employer }
		# Then we start the travel.
		task_contract_taker ?= {
			trigger_event = gh_laamp_base_contract_schemes.9011
			set_variable = {
				name = gh_laamp_base_9011_tally
				value = 0
			}
		}
	}
	on_create = {
		scope:contract = {
			# Make our gold rewards static.
			grab_gold_fuzz_number_effect = yes
			save_scope_as = task_contract
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = var:gold_success_standard
			}
			set_variable = migration_contract
		}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				# Add Contribution
				gh_gain_contribution_from_task_contract_effect = {
					CONTRIBUTION = task_contract_success_contribution_gain_full_value
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Critical Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_critical_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				# Add Contribution
				gh_gain_contribution_from_task_contract_effect = {
					CONTRIBUTION = task_contract_success_contribution_gain_full_value
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = task_contract_failure_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				# Add Contribution
				gh_gain_contribution_from_task_contract_effect = {
					CONTRIBUTION = task_contract_failure_contribution_lose_full_value
				}
			}
		}
	}
}

## Act as forward scouts
gh_laamp_base_9021 = {
	group = laamp_contracts_migration_group
	icon = "gfx/interface/icons/character_interactions/icon_culture.dds"

	travel = no
	use_diplomatic_range = no

	weight = {
		value = task_contract_weight_default_value
		add = laamp_contracts_weight_up_migration_contracts_value
		# Employer weights
		scope:employer = {
			add = {
				# Weight up.
				## Traits that want to be effective but subtle.
				if = {
					limit = { has_trait = deceitful }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = patient }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = arbitrary }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				## Traits that feel this type of manipulation is beneath them
				if = {
					limit = { has_trait = impatient }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = just }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				## Plus just some where the narrative would feel weird.
				if = {
					limit = { has_trait = callous }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = sadistic }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = {
						NOR = {
							has_title = title:e_migrant_coalition
							top_liege = { has_title = title:e_migrant_coalition }
						}
					}
					multiply = 0
				}
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
		}
	}

	# Validity Triggers
	valid_to_create = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		rule_out_dramatic_laamp_employers_trigger = yes
		# Specific flavour triggers.
		any_character_task_contract = {
			NOT = { has_task_contract_type = gh_laamp_base_9021 }
		}
		OR = {
			scope:employer = { has_title = title:e_migrant_coalition }
			scope:employer.top_liege = { has_title = title:e_migrant_coalition }
		}
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed = yes }
		is_independent_ruler = no
		top_liege = { has_title = title:e_migrant_coalition }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}
	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		save_scope_as = task_contract
		task_contract_taker = {
			trigger_event = gh_contract_event.9021
		}
	}
	on_create = {
		scope:contract = {
			save_scope_as = task_contract
			task_contract_employer = {
				random_neighboring_top_liege_realm_owner = {
					limit = {
						is_within_diplo_range = { CHARACTER = scope:task_contract.task_contract_taker }
						any_realm_province = {
							this != scope:task_contract.task_contract_taker.domicile.domicile_location
							has_any_travel_poi_trigger = yes
							save_temporary_scope_as = scout_province
						}
					}
					scope:scout_province = {
						save_scope_as = task_contract_destination
						if = {
							limit = { exists = province_owner }
							province_owner = {
								save_scope_as = task_contract_target
							}
						}
						else = {
							county.holder = {
								save_scope_as = task_contract_target
							}
						}
					}
					set_variable = {
						name = task_contract_employer
						value = scope:task_contract.task_contract_employer
					}
					set_variable = {
						name = task_contract_object
						value = scope:task_contract.task_contract_employer
					}
					if = {
						limit = {
							exists = scope:task_contract.task_contract_target
						}
						set_variable = {
							name = task_contract_target
							value = scope:task_contract.task_contract_target
						}
					}
					else = {
						set_variable = {
							name = task_contract_target
							value = scope:task_contract_target
						}
						scope:task_contract = { set_task_contract_target = scope:task_contract_target }
					}
					if = {
						limit = {
							exists = scope:task_contract.task_contract_destination
						}
						set_variable = {
							name = task_contract_destination
							value = scope:task_contract.task_contract_destination
						}
					}
					else = {
						set_variable = {
							name = task_contract_destination
							value = scope:task_contract_destination	
						}
					}
					var:task_contract_destination = {
						switch = {
							trigger = has_travel_point_of_interest
							poi_capitals = {
								save_scope_value_as = {
									name = travel_reason
									value = flag:capitals
								}
							}
							poi_grand_city = {
								save_scope_value_as = {
									name = travel_reason
									value = flag:grand_city
								}
							}
						}
					}
					set_variable = {
						name = travel_reason
						value = scope:travel_reason
					}
					# Make our gold rewards static.
					grab_gold_fuzz_number_effect = yes
					set_variable = {
						name = gold_success_critical
						value = task_contract_success_gold_gain_travel_value
					}
					set_variable = {
						name = gold_success_standard
						value = task_contract_success_gold_gain_half_travel_value
					}
				}
			}
		}
	}

	on_invalidated = {
		if = {
			limit = {
				root.task_contract_taker = {
					any_character_active_contract = {
						this = root
					}
				}
			}
			task_contract_employer = {
				save_scope_as = task_contract_employer
			}
			save_scope_value_as = {
				name = task_contract_tier
				value = root.task_contract_tier
			}
			var:task_contract_destination = {
				save_scope_as = task_contract_destination
			}

			task_contract_taker = {
				set_variable = {
					name = invalidated_task_contract_type
					value = flag:laamp_transport_explorer
				}
			}
			if = {
				limit = {
					task_contract_employer = {
						is_alive = no
					}
				}
				task_contract_employer.primary_title.holder ?= {
					save_scope_as = employer_heir
				}
				task_contract_taker = {
					save_scope_value_as = {
						name = task_contract_invalidation_reason
						value = flag:employer_dead
					}
					trigger_event = ep3_contract_event.0012
				
				}
			}
			task_contract_employer = {
				if = {
					limit = {
						is_landed = no
					}
					move_to_pool = yes
				}
			}
		}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				# Add Contribution
				gh_gain_contribution_from_task_contract_effect = {
					CONTRIBUTION = task_contract_success_contribution_gain_full_value
				}
			}
		}
		success_critical = {
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_full_value
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
				task_contract_taker = { task_successful_noncrim_contract_count_effect = yes }
				# Add Contribution
				gh_gain_contribution_from_task_contract_effect = {
					CONTRIBUTION = task_contract_success_contribution_gain_full_value
				}
			}
		}
		failure_standard = {
			positive = no
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = task_contract_failure_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				# Add Contribution
				gh_gain_contribution_from_task_contract_effect = {
					CONTRIBUTION = task_contract_failure_contribution_lose_full_value
				}
			}
		}
	}
}

## Feed the masses
#gh_laamp_base_9031 = {
#	group = laamp_contracts_migration_group
#	icon = "gfx/interface/icons/character_interactions/icon_culture.dds"
#
#	travel = yes
#	use_diplomatic_range = no
#
#	weight = {
#		value = task_contract_weight_default_value
#		add = laamp_contracts_weight_up_migration_contracts_value
#		# Employer weights
#		scope:employer = {
#			add = {
#				# Weight up.
#				## Traits that want to be effective but subtle.
#				if = {
#					limit = { has_trait = deceitful }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = patient }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = arbitrary }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				# Weight down.
#				## Traits that feel this type of manipulation is beneath them
#				if = {
#					limit = { has_trait = impatient }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = just }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				## Plus just some where the narrative would feel weird.
#				if = {
#					limit = { has_trait = callous }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = sadistic }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = {
#						NOR = {
#							has_title = title:e_migrant_coalition
#							top_liege = { has_title = title:e_migrant_coalition }
#						}
#					}
#					multiply = 0
#				}
#				max = task_contract_weight_employer_associated_traits_max_value
#			}
#			multiply = task_contract_weight_by_tier_value
#			# This weight is an override, so make sure it's placed at the bottom.
#		}
#	}
#
#	# Validity Triggers
#	valid_to_create = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = scope:employer
#			LAAMP = root
#		}
#		employer_has_treasury_to_offer_job_trigger = yes
#		valid_laamp_sensible_start_trigger = yes
#		rule_out_dramatic_laamp_employers_trigger = yes
#		# Specific flavour triggers.
#		## Won't resort to this.
#		laamp_task_contract_employer_would_resort_to_violence_trigger = yes
#		laamp_task_contract_employer_would_resort_to_deceit_trigger = yes
#		OR = {
#			scope:employer = { has_title = title:e_migrant_coalition }
#			scope:employer.top_liege = { has_title = title:e_migrant_coalition }
#		}
#		scope:employer = {
#			is_independent_ruler = no
#			has_vassal_stance = minority
#			exists = liege
#			liege = {
#				is_ai = yes
#			}
#			vassal_contract_obligation_level_can_be_increased = title_revocation_rights
#			culture = {
#				NOT = { this = scope:employer.liege.culture }
#			}
#		}
#	}
#	valid_to_accept = {
#		# Standard triggers.
#		valid_laamp_basic_accept_only_trigger = yes
#		valid_laamp_basic_trigger = {
#			EMPLOYER = scope:employer
#			LAAMP = root
#		}
#		scope:employer = { is_landed = yes }
#		is_independent_ruler = no
#		top_liege = {has_title = title:e_migrant_coalition }
#	}
#	valid_to_continue = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = root.task_contract_employer
#			LAAMP = root.task_contract_taker
#		}
#		task_contract_employer = { is_landed = yes }
#	}
#	valid_to_keep = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = root.task_contract_employer
#			LAAMP = root.task_contract_taker
#		}
#		task_contract_employer = { is_landed = yes }
#	}
#	# On_actions
#	on_accepted = {
#		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
#		save_scope_as = task_contract
#		task_contract_taker = {
#			trigger_event = gh_contract_event.9031
#		}
#	}
#
#	on_invalidated = {
#		if = {
#			limit = {
#				root.task_contract_taker = {
#					any_character_active_contract = {
#						this = root
#					}
#				}
#			}
#			task_contract_employer = {
#				save_scope_as = task_contract_employer
#			}
#			save_scope_value_as = {
#				name = task_contract_tier
#				value = root.task_contract_tier
#			}
#			var:task_contract_destination = {
#				save_scope_as = task_contract_destination
#			}
#			var:task_contract_target = {
#				save_scope_as = task_contract_target
#			}
#			task_contract_taker = {
#				set_variable = {
#					name = invalidated_task_contract_type
#					value = flag:gh_laamp_base_9031
#				}
#			}
#			if = {
#				limit = {
#					task_contract_employer = {
#						is_alive = no
#					}
#				}
#				task_contract_employer.primary_title.holder ?= {
#					save_scope_as = employer_heir
#				}
#				task_contract_taker = {
#					save_scope_value_as = {
#						name = task_contract_invalidation_reason
#						value = flag:employer_dead
#					}
#					trigger_event = ep3_contract_event.0012
#				
#				}
#			}
#			else_if = {
#				limit = {
#					scope:task_contract_target = {
#						is_alive = no
#					}
#				}
#				task_contract_taker = {
#					save_scope_value_as = {
#						name = task_contract_invalidation_reason
#						value = flag:target_dead
#					}
#					trigger_event = ep3_contract_event.0012
#				}
#			}
#			else_if = {
#				limit = {
#					scope:task_contract_target = {
#						any_vassal = {
#							count = all
#							NOT = { scope:task_contract_employer = this }
#						}
#					}
#				}
#				task_contract_taker = {
#					save_scope_value_as = {
#						name = task_contract_invalidation_reason
#						value = flag:not_vassal
#					}
#					trigger_event = ep3_contract_event.0012
#				}
#			}
#		}
#	}
#
#	# Rewards
#	task_contract_reward = {
#		success_standard = {
#			effect = {
#				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
#				save_scope_as = task_contract
#				task_contract_taker = {
#					send_interface_toast = {
#						type = event_toast_effect_good
#						title = laamp_transport_contract.success
#						left_icon = scope:task_contract.task_contract_taker
#						right_icon = scope:task_contract.task_contract_employer
#						root = {
#							save_scope_value_as = { name = extra_reward value = flag:no }
#							# Standard Rewards.
#							laamp_rewards_disburse_ordinary_currency_effect = {
#								GOLD = scope:task_contract.var:gold_success_standard
#								PRESTIGE = task_contract_success_prestige_gain_full_value
#								PIETY = 0
#								PROVISIONS = task_contract_success_provisions_gain_minor_value
#								OPINION = task_contract_opinion_standard_reward_value
#								OPINION_TYPE = succeeded_task_contract_opinion
#								CONTACT = yes
#								CONTACT_HOOK = yes
#								EXTRA_REWARD = scope:extra_reward
#							}
#						}
#						if = {
#							limit = {
#								NOT = { scope:task_contract.task_contract_taker.culture = scope:task_contract.task_contract_employer.culture }
#							}
#							scope:task_contract.task_contract_taker.culture = {
#								change_cultural_acceptance = {
#									target = scope:task_contract.task_contract_employer.culture
#									value = low_positive_culture_acceptance
#									desc = cultural_acceptance_laamp_cultural_minority_contract
#								}
#							}
#						}
#					}
#				}
#				# Add Contribution
#				gh_gain_contribution_from_task_contract_effect = {
#					CONTRIBUTION = task_contract_success_contribution_gain_full_value
#				}
#			}
#		}
#		failure_standard = {
#			positive = no
#			effect = {
#				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
#				save_scope_as = task_contract
#				task_contract_taker = {
#					send_interface_toast = {
#						type = event_toast_effect_bad
#						title = laamp_transport_contract.transport_failed
#						root = {
#							save_scope_value_as = { name = extra_reward value = flag:no }
#							# Standard Penalties.
#							laamp_rewards_disburse_ordinary_currency_effect = {
#								GOLD = 0
#								PRESTIGE = task_contract_failure_prestige_loss_full_value
#								PIETY = 0
#								PROVISIONS = task_contract_failure_provisions_gain_minor_value
#								OPINION = task_contract_opinion_standard_failure_value
#								OPINION_TYPE = failed_task_contract_opinion
#								CONTACT = no
#								CONTACT_HOOK = no
#								EXTRA_REWARD = scope:extra_reward
#							}
#						}
#					}
#				}
#				# Add Contribution
#				gh_gain_contribution_from_task_contract_effect = {
#					CONTRIBUTION = task_contract_failure_contribution_lose_full_value
#				}
#			}
#		}
#	}
#}
#
### Loot aversarian settlements
#gh_laamp_base_9041 = {
#	group = laamp_contracts_migration_group
#	icon = "gfx/interface/icons/character_interactions/icon_culture.dds"
#
#	travel = no
#	use_diplomatic_range = no
#	is_criminal = yes
#
#	weight = {
#		value = task_contract_weight_default_value
#		add = laamp_contracts_weight_up_migration_contracts_value
#		# Employer weights
#		scope:employer = {
#			add = {
#				# Weight up.
#				## Traits that want to be effective but subtle.
#				if = {
#					limit = { has_trait = deceitful }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = patient }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = arbitrary }
#					add = task_contract_weight_bonus_employer_has_associated_traits_value
#				}
#				# Weight down.
#				## Traits that feel this type of manipulation is beneath them
#				if = {
#					limit = { has_trait = impatient }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = just }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				## Plus just some where the narrative would feel weird.
#				if = {
#					limit = { has_trait = callous }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = { has_trait = sadistic }
#					add = task_contract_weight_malus_employer_has_associated_traits_value
#				}
#				if = {
#					limit = {
#						NOR = {
#							has_title = title:e_migrant_coalition
#							top_liege = { has_title = title:e_migrant_coalition }
#						}
#					}
#					multiply = 0
#				}
#				max = task_contract_weight_employer_associated_traits_max_value
#			}
#			multiply = task_contract_weight_by_tier_value
#			# This weight is an override, so make sure it's placed at the bottom.
#		}
#	}
#
#	# Validity Triggers
#	valid_to_create = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = scope:employer
#			LAAMP = root
#		}
#		employer_has_treasury_to_offer_job_trigger = yes
#		valid_laamp_sensible_start_trigger = yes
#		rule_out_dramatic_laamp_employers_trigger = yes
#		# Specific flavour triggers.
#		## Won't resort to this.
#		laamp_task_contract_employer_would_resort_to_violence_trigger = yes
#		laamp_task_contract_employer_would_resort_to_deceit_trigger = yes
#		OR = {
#			scope:employer = { has_title = title:e_migrant_coalition }
#			scope:employer.top_liege = { has_title = title:e_migrant_coalition }
#		}
#		root.location.culture = { has_cultural_pillar = heritage_aversarian }
#	}
#	valid_to_accept = {
#		# Standard triggers.
#		valid_laamp_basic_accept_only_trigger = yes
#		valid_laamp_basic_trigger = {
#			EMPLOYER = scope:employer
#			LAAMP = root
#		}
#		scope:employer = { is_landed = yes }
#		is_independent_ruler = no
#		top_liege = {has_title = title:e_migrant_coalition }
#	}
#	valid_to_continue = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = root.task_contract_employer
#			LAAMP = root.task_contract_taker
#		}
#		task_contract_employer = { is_landed = yes }
#	}
#	valid_to_keep = {
#		# Standard triggers.
#		valid_laamp_basic_trigger = {
#			EMPLOYER = root.task_contract_employer
#			LAAMP = root.task_contract_taker
#		}
#		task_contract_employer = { is_landed = yes }
#	}
#	# On_actions
#	on_accepted = {
#		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
#		# For the intro event.
#		save_scope_as = task_contract
#		# Then we start the scheme.
#		task_contract_taker ?= {
#			start_scheme = {
#				type = gh_laamp_base_9041_contract_scheme
#				contract = root
#				target_character = root.task_contract_employer
#			}
#			# Make a note of what the scheme even is; we'll need this for the event too.
#			scope:task_contract.scheme = { save_scope_as = scheme }
#			trigger_event = gh_laamp_base_contract_schemes.9041
#		}
#	}
#	on_create = {
#		scope:contract = {
#			# Make our gold rewards static.
#			grab_gold_fuzz_number_effect = yes
#			save_scope_as = task_contract
#			set_variable = {
#				name = gold_success_standard
#				value = task_contract_taker.task_contract_success_gold_gain_full_value
#			}
#			# Make sure critical values are a bit higher.
#			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
#			set_variable = {
#				name = gold_success_critical
#				value = var:gold_success_standard
#			}
#			set_variable = migration_contract
#		}
#	}
#
#	# Rewards
#	task_contract_reward = {
#		success_standard = {
#			should_print_on_complete = yes
#			effect = {
#				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
#				save_scope_value_as = { name = extra_reward value = flag:no }
#				# Standard Rewards.
#				laamp_rewards_disburse_ordinary_currency_effect = {
#					GOLD = scope:task_contract.var:gold_success_standard
#					PRESTIGE = 0
#					PIETY = 0
#					PROVISIONS = task_contract_success_provisions_gain_minor_value
#					OPINION = task_contract_opinion_standard_reward_value
#					OPINION_TYPE = succeeded_task_contract_opinion
#					CONTACT = yes
#					CONTACT_HOOK = no
#					EXTRA_REWARD = scope:extra_reward
#				}
#				# Update Knight-Errant score.
#				task_contract_taker = {
#					laamp_rewards_apply_knight_errant_xp_effect = {
#						XP_MAX = knight_errant_xp_medium_gain
#						XP_MIN = knight_errant_xp_medium_gain
#					}
#					task_contract_justicar_contract_tracker_effect = yes
#				}
#				# Add Contribution
#				gh_gain_contribution_from_task_contract_effect = {
#					CONTRIBUTION = task_contract_success_contribution_gain_full_value
#				}
#			}
#		}
#		success_critical = {
#			should_print_on_complete = yes
#			effect = {
#				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
#				save_scope_value_as = { name = extra_reward value = flag:no }
#				# Critical Rewards.
#				laamp_rewards_disburse_ordinary_currency_effect = {
#					GOLD = scope:task_contract.var:gold_success_critical
#					PRESTIGE = task_contract_success_prestige_gain_half_value
#					PIETY = 0
#					PROVISIONS = task_contract_success_provisions_gain_medium_value
#					OPINION = task_contract_opinion_excelled_reward_value
#					OPINION_TYPE = critically_succeeded_task_contract_opinion
#					CONTACT = yes
#					CONTACT_HOOK = yes
#					EXTRA_REWARD = scope:extra_reward
#				}
#				# Update Knight-Errant score.
#				task_contract_taker = {
#					laamp_rewards_apply_knight_errant_xp_effect = {
#						XP_MAX = knight_errant_xp_major_gain
#						XP_MIN = knight_errant_xp_major_gain
#					}
#					task_contract_justicar_contract_tracker_effect = yes
#				}
#				# Add Contribution
#				gh_gain_contribution_from_task_contract_effect = {
#					CONTRIBUTION = task_contract_success_contribution_gain_full_value
#				}
#			}
#		}
#		failure_standard = {
#			positive = no
#			should_print_on_complete = yes
#			effect = {
#				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
#				save_scope_value_as = { name = extra_reward value = flag:no }
#				# Standard Penalties.
#				laamp_rewards_disburse_ordinary_currency_effect = {
#					GOLD = 0
#					PRESTIGE = task_contract_failure_prestige_loss_full_value
#					PIETY = 0
#					PROVISIONS = task_contract_failure_provisions_gain_minor_value
#					OPINION = task_contract_opinion_standard_failure_value
#					OPINION_TYPE = failed_task_contract_opinion
#					CONTACT = no
#					CONTACT_HOOK = no
#					EXTRA_REWARD = scope:extra_reward
#				}
#				# Add Contribution
#				gh_gain_contribution_from_task_contract_effect = {
#					CONTRIBUTION = task_contract_failure_contribution_lose_full_value
#				}
#			}
#		}
#	}
#}
