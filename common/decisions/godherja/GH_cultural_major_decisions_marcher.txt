##################
##DECISIONS LIST##
# reunite_chevalie_decision
# forge_a_claim_on_chevalie_decision
# strike_at_the_partic_decision
# negotiate_with_the_partic_decision
# demand_independent_lords_swear_fealty_decision
# codify_the_freedom_of_lifepaths_decision
# enforce_the_exclusivity_of_lifepaths_decision
# reforge_the_crown_decision
# reintegrate_ziemojycz_decision
# recruit_wayfather_decision
# declare_rivarisian_kingdom_decision
##################

##################
# Reunite chevalie
# by Lonely Knight
reunite_chevalie_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_invite_knights.dds"
	}
	decision_group_type = marcher
	ai_check_interval = 120
	desc = reunite_chevalie_decision_desc

	is_shown = {
		culture = { has_cultural_pillar = heritage_marcher }
		NOT = {
			title:e_chevalie = {
				is_title_created = yes
			}
		}
	}

	is_valid = {
		culture = { has_cultural_pillar = heritage_marcher }
		has_character_modifier = claimant_to_the_high_kingdom
		calc_true_if = {
			amount >= 3
			completely_controls = title:k_varrdevet
			completely_controls = title:k_rohr
			completely_controls = title:k_marroux
			completely_controls = title:k_de_porte_de_bastione
			completely_controls = title:k_perignan
		}
		NOT = { has_title = title:e_migrant_coalition }
	}

	effect = {
		save_scope_as = chevalie_uniter

		show_as_tooltip = { form_chevalie_scripted_effect = yes } #Actually applied in chevalie.0001 - prestige, laws, title, innovation effects

		#Events
		trigger_event = marcher_decision.0001
		gh_achiev_laterruer_check = yes # Achievement check
		GH_achiev_vivelarevolution_check = yes
		GH_achiev_theshadowqueenascendant_check = yes
		every_player = {
			limit = {
				NOT = { this = scope:chevalie_uniter }
				is_within_diplo_range = { CHARACTER = scope:chevalie_uniter }
			}
			trigger_event = marcher_decision.0002
		}

		#Can only be done once
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:reunite_chevalie_decision
		}
	}
	

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

##################
# Forge a Claim on Chevalie
# by Lonely Knight
forge_a_claim_on_chevalie_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_dynasty_house.dds"
	}
	decision_group_type = marcher
	ai_check_interval = 120
	desc = forge_a_claim_on_chevalie_decision_desc

	is_shown = {
		has_game_rule = story_content_enabled
		NOT = { title:e_chevalie = { is_title_created = yes } }
		OR = {
			culture = { has_cultural_pillar = heritage_marcher }
			has_religion = religion:lifepath_religion
		}
		NOT = {
			has_character_modifier = claimant_to_the_high_kingdom
		}
	}

	is_valid = {
		OR = {
			culture = { has_cultural_pillar = heritage_marcher }
			has_religion = religion:lifepath_religion
		}
		any_sub_realm_county = {
			title_province = { geographical_region = world_ga_marcher_kingdoms }
		}
		OR = {
			prestige >= 1500
			custom_tooltip = {
				text = claim_on_chevalie_tt
				has_claim_on = title:e_chevalie
			}

		}
		AND = {
			is_imprisoned = no
			is_independent_ruler = yes
		}
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		is_at_war = no
	}

	effect = {
		#Events
		#trigger_event = chevalie.0003
		#every_player = {
		#	limit = {
		#		any_sub_realm_county = {
		#			title_province = { geographical_region = world_ga_marcher_kingdoms }
		#		}
		#	}
		#	trigger_event = chevalie.0004
		#}
		add_character_modifier = claimant_to_the_high_kingdom

		stress_impact = {
			content = medium_stress_impact_gain
		}
		if = {
			limit = {
				NOT = {
					has_claim_on = title:e_chevalie
				}
			}
			stress_impact = {
				just = medium_stress_impact_gain
			}
		}
	}
	

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

##################
# Strike at the Partic
# by Lonely Knight
#strike_at_the_partic_decision = { #Commented out to be added right after release rip happy midnight
#	picture = {
#		reference = "gfx/interface/illustrations/decisions/decision_invite_knights.dds"
#	}
#	decision_group_type = major
#	ai_check_interval = 120
#	desc = strike_at_the_partic_decision_desc
#
#		is_shown = {
#			OR = {
#				culture = { has_cultural_pillar = heritage_marcher }
#				has_religion = religion:lifepath_religion
#			}
#		}
#
#		is_valid = {
#		}
#
#	effect = {
#	}
#	
#
#	ai_potential = {
#		always = yes
#	}
#
#	ai_will_do = {
#		base = 100
#	}
#}
#
##################
# Negotiate with the Partic
# by Lonely Knight
#negotiate_with_the_partic_decision = {
#	picture = {
#		reference = "gfx/interface/illustrations/decisions/decision_realm.dds"
#	}
#	decision_group_type = major
#	ai_check_interval = 120
#	desc = negotiate_with_the_partic_decision_desc
#
#		is_shown = {
#			OR = {
#				culture = { has_cultural_pillar = heritage_marcher }
#				has_religion = religion:lifepath_religion
#			}
#		}
#
#		is_valid = {
#		}
#
#	effect = {
#	}
#	
#
#	ai_potential = {
#		always = yes
#	}
#
#	ai_will_do = {
#		base = 100
#	}
#}

##################
# Demand Independent Lords Swear Fealty
# by Lonely Knight
demand_independent_lords_swear_fealty_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_recruitment.dds"
	}
	decision_group_type = marcher
	ai_check_interval = 60
	desc = demand_independent_lords_swear_fealty_decision_desc

	is_shown = {
		has_title = title:e_chevalie
		
		title:e_chevalie = {
			any_in_de_jure_hierarchy = {
				tier = tier_county
				holder = { is_independent_ruler = yes }
				OR = {
					holder.culture = { has_cultural_pillar = heritage_marcher } 
					holder.religion = religion:lifepath_religion
				}
				NOR = {
					holder.highest_held_title_tier = tier_empire
					holder.primary_title = title:k_ziemojycz
				}
			}
		}
	}

	is_valid = {
		custom_description = {
			text = demand_independent_lords_swear_fealty_decision_cooldown_tt
			NOT = { has_character_flag = already_demanded_independent_lords_swear_fealty }
		}
	}

	effect = {
		trigger_event = marcher_decision.0500
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

##################
# Codify the Freedom of Lifepaths
# by Lonely Knight
codify_the_freedom_of_lifepaths_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_personal_religious.dds"
	}
	decision_group_type = marcher
	ai_check_interval = 120 #120
	desc = codify_the_freedom_of_lifepaths_decision_desc

		is_shown = {
				has_game_rule = story_content_enabled
			OR = {
				culture = { has_cultural_pillar = heritage_marcher }
				has_religion = religion:lifepath_religion
			}
			NOT = {
				is_target_in_global_variable_list = {
					name = unavailable_unique_decisions
					target = flag:lifepath_reformed
				}
			}
		}

		is_valid = {
			has_trait = education_learning
			piety_level >= 5
			completely_controls = title:e_chevalie
		}

	effect = {
		add_prestige = -500
		faith:lifepath = {
			hidden_effect = {
				remove_doctrine = tenet_wayfathers
			}
			add_doctrine = tenet_wayfathers_freedom
		}
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:lifepath_reformed
		}
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:lifepath_reformed_freedom
		}

		# Announce event
		save_scope_as = reformer
		capital_province = {
			barony = {
				save_scope_as = capital
			}
		}
		every_player = {
			limit = {
				NOT = { this = root }
				in_diplomatic_range = root
			}
			trigger_event = marcher_lifepath.0100
		}
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

##################
# Enforce the Exclusivity of Lifepaths
# by Lonely Knight
enforce_the_exclusivity_of_lifepaths_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_major_religion.dds"
	}
	decision_group_type = marcher
	ai_check_interval = 120 #120
	desc = enforce_the_exclusivity_of_lifepaths_decision_desc

		is_shown = {
				has_game_rule = story_content_enabled
			OR = {
				culture = { has_cultural_pillar = heritage_marcher }
				has_religion = religion:lifepath_religion
			}
			NOT = {
				is_target_in_global_variable_list = {
					name = unavailable_unique_decisions
					target = flag:lifepath_reformed
				}
			}
		}

		is_valid = {
			prestige_level >= 5
			completely_controls = title:e_chevalie
		}

	effect = {
		add_prestige = 500
		faith:lifepath = {
			hidden_effect = {
				remove_doctrine = tenet_wayfathers
			}
			add_doctrine = tenet_wayfathers_exclusivity
		}
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:lifepath_reformed
		}
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:lifepath_reformed_exclusivity
		}

		# Announce event
		save_scope_as = reformer
		every_player = {
			limit = {
				NOT = { this = root }
				in_diplomatic_range = root
			}
			trigger_event = marcher_lifepath.0101
		}
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

##################
# Reforge the Crown
# by Lonely Knight and Thundershield
reforge_the_crown_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_dynasty_house.dds"
	}
	decision_group_type = marcher
	ai_check_interval = 12
	desc = reforge_the_crown_decision_desc

	is_shown = {
		OR = {
			has_character_modifier = claimant_to_the_high_kingdom
			any_character_artifact = { 
				has_variable = broken_crown_piece
			}
		}
		any_in_global_list = {
			variable = broken_crown_pieces
			count = 4
		}
	}

	is_valid = {
		custom_description = {
			text = reforge_the_crown_decision_valid_condition
			any_character_artifact = { 
				has_variable = broken_crown_piece
				count >= 4
			}
		}
	}
	
	cost = {
		gold = 100 #reforging should probably cost some money at least, your getting a really good artifact
	}

	effect = {
		custom_tooltip =  reforge_the_crown_decision_effect
		create_crown_of_chevalie_effect = { OWNER = root }
		hidden_effect = {
			every_character_artifact = {
				limit = {
					has_variable = broken_crown_piece 
				}
				destroy_artifact = this
			}
		}
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

##################
# Reclaim the Crown
# by Thundershield
# this is just a super simple event in case you somehow lost your claim on one of the crown pieces
reclaim_the_crown_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_dynasty_house.dds"
	}
	decision_group_type = marcher
	ai_check_interval = 12
	desc = reclaim_the_crown_decision_desc

	is_shown = {
		has_character_modifier = claimant_to_the_high_kingdom
		NOT = {
			any_character_artifact = {
				has_variable = broken_crown_piece
				count = {
					value = 4
					add = {
						if = {
							limit = {
								any_personal_claimed_artifact = {
									has_variable = broken_crown_piece
									count = 1
								}
							}
							add = -1
						}
						if = {
							limit = {
								any_personal_claimed_artifact = {
									has_variable = broken_crown_piece
									count = 2
								}
							}
							add = -2
						}
						if = {
							limit = {
								any_personal_claimed_artifact = {
									has_variable = broken_crown_piece
									count = 3
								}
							}
							add = -3
						}
						if = {
							limit = {
								any_personal_claimed_artifact = {
									has_variable = broken_crown_piece
									count = 4
								}
							}
							add = -4
						}
					}
				}
			}
		}
		any_in_global_list = {
			variable = broken_crown_pieces
			count = 4
		}
	}

	cost = {
		prestige = 150
	}

	effect = {
		every_in_global_list = {
			variable = broken_crown_pieces
			save_temporary_scope_as = single_broken_crown_piece
			limit = {
				NOT = {
					prev = { has_personal_artifact_claim = scope:single_broken_crown_piece }
				}
			}
			root = {
				add_personal_artifact_claim = prev
			}
		}
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

##################
# Reintegrate Ziemojycz
# by Hapchazzard
reintegrate_ziemojycz_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_dynasty_house.dds"
	}
	decision_group_type = marcher
	ai_check_interval = 12
	desc = reintegrate_ziemojycz_decision_desc

	is_shown = {
		has_title = title:e_chevalie
		#title:k_ziemojycz = {
		#	any_in_de_jure_hierarchy = {
		#		holder = {
		#			has_primary_title = prev
		#			is_independent_ruler = yes
		#		}
		#	}
		#}
		trigger_if = {
			limit = {
				title:k_ziemojycz = {
					is_title_created = yes
				}
			}
			title:k_ziemojycz = {
				holder = {
					is_independent_ruler = yes
					has_primary_title = prev
				}
			}
		}
	}

	is_valid = {
		custom_description = {
			text = reintegrate_ziemojycz_decision_valid_condition
			NOT = {
				has_character_flag = requested_ziemojycz_fealty
			}
		}
	}

	effect = {
		custom_tooltip = reintegrate_ziemojycz_decision_effect
		add_character_flag = {
			flag = requested_ziemojycz_fealty
			years = 5
		}
		trigger_event = marcher_decision.0100
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}
#######################
# Revert to Gestanwoder
# By Netgearghost
revert_to_gestanwoder_decision = {
	decision_group_type = marcher
	ai_check_interval = 0
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_major_religion.dds"
	}
	desc = revert_to_gestanwoder_decision_desc

	is_shown = {
		has_game_rule = story_content_enabled
		NOT = {
			has_global_variable = gestanwoder_reformed
		}
		has_title = title:k_de_kanzelerij
		culture = {
			has_cultural_pillar = heritage_konijkmener
		}
	}

	is_valid = {
		is_at_war = no
		piety >= 1000
		has_title = title:k_de_kanzelerij
	}

	effect = {
		add_piety = -1000
		trigger_event = marcher_decision.0200
		set_global_variable = {
			name = gestanwoder_reformed
			value = yes
		}
	}

	ai_potential = {
		always = no
	}

	ai_will_do = {
		base = 0
	}
}

recruit_wayfather_decision = {
	decision_group_type = marcher
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_major_religion.dds"
	}

	desc = recruit_wayfather_decision_desc
	ai_check_interval = 12
	selection_tooltip = recruit_wayfather_decision_tooltip


	is_shown = {
		faith = {
			has_doctrine_parameter = lifepath_choice
		}
		is_ruler = yes
	}

	cooldown = { years = 1 }

	is_valid_showing_failures_only = {
		is_available = yes
	}

	effect = {
		trigger_event = {
			id = marcher_decision.0560
			days = 7
		}
	custom_tooltip = recruit_wayfather_decision_tooltip	
	}
	
	
	ai_will_do = {
		base = 0
	}
}

#integrate_gisreddes_decision = {
#	picture = {
#		reference = "gfx/interface/illustrations/decisions/decision_dynasty_house.dds"
#	}
#	decision_group_type = major
#	ai_check_interval = 12
#	desc = integrate_gisreddes_decision_desc
#	
#	is_shown = {
#		NOT = {
#			c_peti_gisredde = {
#				has_global_variable = gisreddes_integrated
#			}
#		}
#		has_title = title:c_grande_gisredde
#		has_title = title:c_peti_gisredde
#	}
#	
#	is_valid = {
#		prestige >= 1000
#
#		trigger_if = {
#			limit = {
#				title:c_grande_gisredde = {
#					has_variable = integrate_gisreddes_timer
#				}
#			}
#			custom_description = {
#				text = integrate_gisreddes_control_timer_no
#				subject = title:c_grande_gisredde
#				always = no
#			}
#		}
#		trigger_else = {
#			custom_description = {
#				text = integrate_gisreddes_control_timer_yes
#				subject = title:c_grande_gisredde
#				always = yes
#			}
#		}
#
#		NOT = {
#			root.culture = culture:gisreddi
#		}
#	
#	}
#	
#	effect = {
#		trigger_event = {
#			id = marcher_decision.0563 
#		}
#		custom_tooltip = integrate_gisreddes_decision_complete_desc
#	}
#}



##################
# Declare Rivarisian Kingdom
# by Lonely Knightess
declare_rivarisian_kingdom_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_found_kingdom.dds"
	}
	decision_group_type = marcher
	ai_check_interval = 600
	desc = declare_rivarisian_kingdom_decision_desc

	is_shown = {
		OR = {
			culture = {
				this = culture:rivarisians
				any_parent_culture_or_above = {
					this = culture:rivarisians
				}
			}
			any_held_title = {
				tier = tier_county
				exists = holder
				culture = {
					OR = {
						this = culture:rivarisians
						any_parent_culture_or_above = {
							this = culture:rivarisians
						}
					}
				}
			}
		}
		highest_held_title_tier < 4 #No Kings or Emperors. In future make a decision for High Kings to do this but for everyone to be angry about it 
		AND = {
			exists = capital_province
			capital_province = { geographical_region = world_ga_riverlands_formable }
		}
		NOR = {
			exists = title:k_riverlands.holder
			is_target_in_global_variable_list = {
				name = unavailable_unique_decisions
				target = flag:declare_rivarisian_kingdom_decision
			}
		}
	}

	is_valid = {
		OR = {
			is_independent_ruler = yes
			top_liege = {
				highest_held_title_tier = tier_empire
			}
		}
		culture = culture:rivarisians
		completely_controls_region = world_ga_riverlands_formable
		government_has_flag = government_is_feudal
		prestige_level >= high_prestige_level

		custom_description = {
			text = "the_new_capital_must_be_controlled_and_developed_tt"
			capital_province = {
				geographical_region = world_ga_riverlands_formable
				county = {
					development_level >= 22
					county_control >= 100
				}
			}
		}
		custom_description = {
			text = "at_least_7_rivarisians_counties_of_your_faith_tt"
			any_sub_realm_county = {
				count >= 5
				faith.religion = root.faith.religion
				culture = root.culture
			}
		}
	}

	is_valid_showing_failures_only = {
		is_capable_adult = yes
		is_imprisoned = no
		is_at_war = no
	}

	cost = {
		gold = 900
	}

	effect = {
		if = {
			limit = { has_dlc_feature = legends }
			create_legend_seed = {
				type = heroic
				quality = famed
				chronicle = new_title
					properties = {
						title = title:k_riverlands
						founder = root
				}
			}
		}
		save_scope_as = riverlands_former

		show_as_tooltip = {
			declare_rivarisian_kingdom_decision_effects = yes
		} #Actually applied in iberia_north_africa.9101 - title changes, prestige, etc.

		#Events
		trigger_event = marcher_decision.0600

		#Can only happen once
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:declare_rivarisian_kingdom_decision
		}
		set_global_variable = {
			name = declare_rivarisian_kingdom_decision
			value = scope:riverlands_former
		}
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 5
		ai_value_modifier = {
			ai_boldness = 1.0
		}
	}
}