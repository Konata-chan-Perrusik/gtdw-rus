ambush_cb = {
	group = ambush
	
	target_titles = all
	target_title_tier = all
	target_top_liege_if_outside_realm = no
	allowed_for_character = {
		scope:attacker = {
		   culture = {  has_cultural_pillar = heritage_fog_eaters }
		}
	}
	on_declaration = {
		on_declared_war = yes
	}
	
	# Root is the title
	# scope:attacker is the attacker
	# scope:defender is the defender
	
	transfer_behavior = transfer
	on_victory_desc = {}
	on_white_peace_desc = {}
	on_defeat_desc = {}

	should_invalidate = {
		scope:defender = { is_fogeater = yes }
	}

	on_invalidated_desc = {}
	on_invalidated = {
		war = { end_war = defender }
	}
	on_defeat = {
		scope:attacker = {
			trigger_event = {
				id = gh_events_generic.0001
				days = 5
			}
		}
		scope:defender = { add_prestige = 15 }
	}
	on_victory = {
		scope:defender = {
			trigger_event = {
				id = gh_events_generic.0001
				days = 5
			}
		}
		
		scope:defender = { add_prestige = -100 }
	}
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "Ambush"
	war_name_base = "Ambush"
	cb_name = "Ambush"
	interface_priority = 59
	
	max_defender_score_from_occupation = 0
	max_attacker_score_from_occupation = 0
	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50
	attacker_wargoal_percentage = 0.5
	defender_wargoal_percentage = 0.5
	attacker_score_from_battles_scale = 500
	defender_score_from_battles_scale = 500
	attacker_ticking_warscore = 0.5
	defender_ticking_warscore_delay = { months = 24 }
	
	max_ai_diplo_distance_to_title = 500
	
	on_primary_defender_death = invalidate
	on_primary_attacker_death = invalidate
	#transfer_behavior = invalidate
	
}

fleshmaw_consume_cb = {
	group = ambush
	target_titles = all
	white_peace_possible = no
	imprisonment_by_attacker_give_war_score = no
	imprisonment_by_defender_give_war_score = no
	allow_hostages = no
	allowed_for_character = { always = no }
	allowed_against_character = { scope:defender = { is_ruin = no } }

	should_invalidate = {
		scope:defender = { is_ruin = yes }
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = fleshmaw_consume_victory_desc

	on_victory = {
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = devastated_title
			if = { # The crimes we do for nice tooltips...
				limit = { development_level <= 20 }
				custom_tooltip = fleshmaw_consume_victory_tt
				hidden_effect = { change_development_level = -20 }
			}
			else = {
				change_development_level = -20
			}
			if = {
				limit = { development_level = 0 }
				hidden_effect = { spawn_ruin = { COUNTY = scope:devastated_title } }
			}
		}
		scope:attacker = { silent_disappearance_effect = yes }
	}

	on_white_peace_desc = WHITE_PEACE_DISABLED

	on_defeat_desc = fleshmaw_consume_defeat_desc

	on_defeat = {
		scope:defender = {
			add_prestige = major_prestige_gain
			add_piety = major_piety_gain
		}
		add_from_contribution_defenders = { # Prestige for the defender's war allies
			prestige = medium_prestige_value
			opinion = { modifier = contributed_in_war }
		}
		scope:attacker = { silent_disappearance_effect = yes }
	}

	on_invalidated_desc = msg_invalidate_war_title

	on_invalidated = {
		scope:attacker = { silent_disappearance_effect = yes }
	}

	on_primary_defender_death = inherit
	on_primary_attacker_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = no
	defender_allies_inherit = yes
	
	war_name = "FLESHMAW_CONSUME_WAR_NAME"

	interface_priority = 499

	max_attacker_score_from_battles = 50
	max_defender_score_from_battles = 100

	attacker_score_from_occupation_scale = 1000
	max_attacker_score_from_occupation = 200
	defender_ticking_warscore = 0.2
	defender_ticking_warscore_delay = { months = 12 }
	defender_score_from_battles_scale = 0.1
}

worldeater_destruction_cb = {
	group = ambush

	target_titles = all
	white_peace_possible = no
	imprisonment_by_attacker_give_war_score = no
	imprisonment_by_defender_give_war_score = no
	allow_hostages = no
	allowed_for_character = { always = no }
	allowed_against_character = { scope:defender = { is_ruin = no } }

	should_invalidate = {
		scope:defender = { is_ruin = yes }
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = worldeater_destruction_victory_desc

	on_victory = {
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = devastated_title
			if = { # The crimes we do for nice tooltips...
				limit = { development_level <= 50 }
				custom_tooltip = worldeater_destruction_victory_tt
				hidden_effect = { change_development_level = -50 }
			}
			else = {
				change_development_level = -50
			}
			if = {
				limit = { development_level = 0 }
				hidden_effect = { spawn_ruin = { COUNTY = scope:devastated_title } }
				add_county_modifier = { modifier = devastated_by_worldeater years = 100 }
			}
		}
		scope:attacker = { silent_disappearance_effect = yes }
		scope:defender = { death = { death_reason = death_worldeater } }
		hidden_effect = {
			if = {
				limit = {
					any_independent_ruler = {
						has_title = title:e_lichdoms
					}
				}
				title:e_lichdoms.holder = { remove_character_flag = worldeater_dummy }
			}
		}
	}

	on_white_peace_desc = WHITE_PEACE_DISABLED
	on_defeat_desc = worldeater_destruction_defeat_desc

	on_defeat = {
		scope:defender = {
			add_prestige = major_prestige_gain
			add_piety = major_piety_gain
		}
		add_from_contribution_defenders = { # Prestige for the defender's war allies
			prestige = medium_prestige_value
			opinion = { modifier = contributed_in_war }
		}
		scope:attacker = { silent_disappearance_effect = yes }
		hidden_effect = {
			if = {
				limit = {
					any_independent_ruler = {
						has_title = title:e_lichdoms
					}
				}
				title:e_lichdoms.holder = { remove_character_flag = worldeater_dummy }
			}
		}
	}

	on_invalidated_desc = msg_invalidate_war_title

	on_invalidated = {
		scope:attacker = { silent_disappearance_effect = yes }
	}

	on_primary_defender_death = inherit
	on_primary_attacker_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = no
	defender_allies_inherit = yes
	
	war_name = "WORLDEATER_DESTRUCTION_WAR_NAME"

	interface_priority = 499

	max_attacker_score_from_battles = 50
	max_defender_score_from_battles = 100

	attacker_score_from_occupation_scale = 1000
	max_attacker_score_from_occupation = 200
	defender_ticking_warscore = 0.2
	defender_ticking_warscore_delay = { months = 12 }
	defender_score_from_battles_scale = 0.1
}