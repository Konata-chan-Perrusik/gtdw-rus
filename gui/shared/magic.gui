types MagicViewTypes
{
	type widget_spell_entry = widget
	{
		# Requires
		# datacontext = story (spell)

		size = { 485 110 }
		visible = "[And(Or(Not(GetVariableSystem.Exists('magic_tab_aspect')), Story.MakeScope.Var(GetVariableSystem.Get('magic_tab_aspect')).IsSet), Or(Not(And(GetVariableSystem.Exists('magic_tab'), EqualTo_string(GetVariableSystem.Get('magic_tab'), 'generation'))), LessThanOrEqualTo_CFixedPoint(Story.MakeScope.Var('spell_cost').GetValue, '(CFixedPoint)0')))]"
		parentanchor = vcenter|top

		button_standard = {
			size = { 100% 100% }
			
			block "button_effects"
			{
				onclick = "[GetScriptedGui('reset_spell_preparation_story_cycle_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('spell_organizer', GetPlayer.MakeScope).AddScope('spell_to_start_preparation_for_scope', Scope.Story.MakeScope).End)]"
				onclick = "[GetScriptedGui('select_spell_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('selected_spell_scope', Scope.Story.MakeScope).End)]"
			}

			block "button"
			{
				clicksound = "event:/DLC/EP1/SFX/UI/inventory_artifact_place"
			}

			block "overlay"
			{
				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'fire'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.3 0.14 0 }
				}
				
				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'water'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.11 0.58 0.85 }
				}
				
				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'stone'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.1 0.04 0 }
				}
				
				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'blood'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.4 0.01 0.01 }
				}
				
				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'abyss'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0 0.2 0.15 }
				}
				
				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'ice'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.36 0.45 0.56 }
				}
				
				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'air'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.42 0.63 0.66 }
				}
				
				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'nature'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.18 0.33 0 }
				}

				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'celestial'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.65 0.15 0.86 }
				}

				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'ethereal'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.85 0.65 0.55 }
				}

				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'death'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.38 0.55 0.60 }
				}
				
				modify_texture = {
					visible = "[And(Story.MakeScope.Var('primary_aspect').IsSet, EqualTo_string(Story.MakeScope.Var('primary_aspect').GetFlagName, 'sand'))]"
					spriteType = Corneredstretched
					spriteborder = { 3 3 }
					blend_mode = overlay
					color = { 0.90 0.75 0.30 }
				}
			}

			block "background_button_overrides" {}

            modify_texture = {
                name = "icon_glow"
                texture = "gfx/interface/component_effects/effect_shimmer.dds"
                blend_mode = colordodge
                alpha = 1
                translate_uv = { 0.2 0.2 }
            }

            state = {
                trigger_on_create = yes
                name = _show
                next = shimmer
                duration = 0.2
                scale = 1

                modify_texture = {
                    name = "icon_glow"
                    translate_uv = { 1 -1 }
                }
            }

            state = {
                name = shimmer
                next = pause
                duration = 10
                scale = 1
                position = { 0 0 }

                bezier = { 0 0.9 0.9 0.6 }

                modify_texture = {
                    name = "icon_glow"
                    translate_uv = { -1 1 }
                }
            }

            state = {
                name = pause
                next = shimmer
                duration = 0
                delay = 5

                modify_texture = {
                    name = "icon_glow"
                    translate_uv = { 1 -1 }
                }
            }
		}
		

		hbox = {
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area_Dark
				alpha = 0.7

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
					mirror = horizontal
				}
			}

			spell_icon = {
				datacontext = "[Story.MakeScope]"
			}

			#divider_light = {
			#	size = { 4 120 }
			#	alpha = 0.6
			#}

			vbox = {
				layoutpolicy_vertical = expanding
				margin_top = 4
				margin_left = 5

				expand = {}

				text_multi = {
					layoutpolicy_horizontal = expanding
					text = "[Story.Custom('SpellName')]"
					autoresize = yes
					max_width = 400
					fontsize = 16
					using = Font_Size_Medium
					using = Font_Type_Flavor
					default_format = "#high"
					alwaystransparent = yes
				}
				
				divider_light = {
					layoutpolicy_horizontal = expanding
					size = { 0 4.5 }
				}
				
				flowcontainer = {
					direction = vertical
					datamodel = "[Story.MakeScope.GetList('first_spell_tags_list')]"
					layoutpolicy_vertical = expanding
					item = {
						text_multi = {
							layoutpolicy_horizontal = expanding
							text = SPELL_EFFECT_EFFECT_BULLETPOINT
							autoresize = yes
							max_width = 350
							using = Font_Size_Small
							alwaystransparent = yes
						}
					}
				}
				
				divider_light = {
					visible = "[Story.MakeScope.Var('spell_tag_list_overflow').IsSet]"
					layoutpolicy_horizontal = expanding
					size = { 0 1 }
				}
				
				text_multi = {
					visible = "[Story.MakeScope.Var('spell_tag_list_overflow').IsSet]"
					layoutpolicy_horizontal = expanding
					raw_text = "#weak Наведите курсор, чтобы увидеть ещё#! [Story.MakeScope.Var('spell_tag_list_overflow').GetValue|0] #weak эффект(а)#!"
					autoresize = yes
					max_width = 350
					using = Font_Size_Small
					alwaystransparent = yes
				}
				
				#text_multi = {
				#	margin_top = 0
				#	layoutpolicy_horizontal = expanding
				#	text = "[SelectLocalization(Not(EqualTo_string(Concatenate(Concatenate(Concatenate(Story.MakeScope.Var('primary_spell_effect').Var('spell_effect_name').GetFlagName, '_'),Story.MakeScope.Var('primary_aspect').GetFlagName),'_desc'), Localize(Concatenate(Concatenate(Concatenate(Story.MakeScope.Var('primary_spell_effect').Var('spell_effect_name').GetFlagName, '_'),Story.MakeScope.Var('primary_aspect').GetFlagName),'_desc')))), Localize(Concatenate(Concatenate(Concatenate(Story.MakeScope.Var('primary_spell_effect').Var('spell_effect_name').GetFlagName, '_'),Story.MakeScope.Var('primary_aspect').GetFlagName),'_desc')), Localize(Concatenate(Story.MakeScope.Var('primary_spell_effect').Var('spell_effect_name').GetFlagName, '_default_desc')))]"
				#
				#	autoresize = yes
				#	max_width = 400
				#	minimumsize = { 0 60 }
				#	using = Font_Size_Small
				#	default_format = "#low"
				#	alwaystransparent = yes
				#
				#	background = {
				#		using = Background_Area_Dark
				#		margin_left = 5
				#		margin_right = 15
				#		margin_top = 5
				#		margin_bottom = 5
				#		alpha = 0.5
				#
				#		modify_texture = {
				#			name = "mask"
				#			texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
				#			spriteType = Corneredstretched
				#			spriteborder = { 0 0 }
				#			blend_mode = alphamultiply
				#			mirror = horizontal
				#		}
				#	}
				#
				#	background = {
				#		using = Background_Frame
				#		margin_left = 5
				#		margin_right = 5
				#		margin_top = 5
				#		margin_bottom = 5
				#
				#		modify_texture = {
				#			name = "mask"
				#			texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
				#			spriteType = Corneredstretched
				#			spriteborder = { 0 0 }
				#			blend_mode = alphamultiply
				#			mirror = horizontal
				#		}
				#	}
				#}

				expand = {}
			}



			expand = {}
		}
		
		tooltipwidget = {
			container_spell_effects_tooltip = {}
		}
	}

	type spell_tooltip = widget #WIP
	{
		datamodel = "[Story.MakeScope.GetList('spell_tag_list')]"
		using = GeneralTooltipSetup
		alwaystransparent = no

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 20 10 }
			margin_bottom = 16

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 6 4 }
				margin_bottom = 12

				background = {
					name = "header"
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					spriteType = Corneredstretched
					align = vcenter|left
					margin = { 15 0 }
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						name = "title"
						text = "[Story.Custom('SpellName')]"
						align = top
						fontsize = 18
					}

					expand = {}

				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 10

				hbox = { #icon, durability and effects
					layoutpolicy_horizontal = expanding
					spacing = 10

					background = {
						layoutpolicy_horizontal = expanding
						using = Background_Area
						margin = { 15 5 }
						margin_top = 5
					}

					vbox = {
						spell_icon = {
							parentanchor = top
						}
					}

					vbox = {
						name = "main_text"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						spacing = 5

						hbox = {
							name = "modifiers"
							layoutpolicy_horizontal = expanding

							expand = {}
						}

						vbox = {
							datamodel = "[Story.MakeScope.GetList('spell_tag_list')]"
							layoutpolicy_horizontal = expanding
							item = {
								text_multi = {
									layoutpolicy_horizontal = expanding
									text = SPELL_EFFECT_EFFECT_BULLETPOINT
									autoresize = yes
									max_width = 250
									using = Font_Size_Small
									alwaystransparent = yes
								}
							}
						}

						expand = {}
					}

					expand = {}
				}

				vbox = {
					datamodel = "[Story.MakeScope.GetList('spell_tag_list')]"
					layoutpolicy_horizontal = expanding
					item = {
						text_multi = {
							layoutpolicy_horizontal = expanding
							text = SPELL_EFFECT_EFFECT_BULLETPOINT
							autoresize = yes
							max_width = 350
							using = Font_Size_Small
							alwaystransparent = yes
						}
					}
				}
			} # vbox
		}
	}
	
	type widget_spell_component = vbox
	{
		# Requires
		# datacontext = story (component)
		
		background = {
			using = Background_Area_Light
			margin_top = 2
			alpha = 0.6
		}

		background = {
			using = Background_Frame
			margin_top = 2
			margin_bottom = 2
			margin_right = 3
		}
		
		widget = {
			size = { 520 40 }

			#### BACKGROUND ####
			
			# Optional, not fulfilled
			background = {
				visible = "[And(Not(Story.MakeScope.Var('spell_component_template').Var('spell_component_required').IsSet), Not(GetScriptedGui('spell_component_is_fulfilled_scripted_gui').IsShown(GuiScope.SetRoot(Story.MakeScope).End)))]"
				spriteType = Corneredtiled
				using = Color_Blue
				alpha = 0.3
				texture = "gfx/interface/colors/white.dds"

				margin_left = -2

				using = Mask_Rough_Edges

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
					mirror = horizontal
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
					spriteType = Corneredtiled
					blend_mode = alphamultiply
					alpha = 0.2
				}
			}
			
			# Required, not fulfilled
			background = {
				visible = "[And(Story.MakeScope.Var('spell_component_template').Var('spell_component_required').IsSet, Not(GetScriptedGui('spell_component_is_fulfilled_scripted_gui').IsShown(GuiScope.SetRoot(Story.MakeScope).End)))]"
				spriteType = Corneredtiled
				using = Color_Red
				alpha = 0.3
				texture = "gfx/interface/colors/white.dds"

				margin_left = -2

				using = Mask_Rough_Edges

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
					mirror = horizontal
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
					spriteType = Corneredtiled
					blend_mode = alphamultiply
					alpha = 0.2
				}
			}
			
			# Fulfilled
			background = {
				visible = "[GetScriptedGui('spell_component_is_fulfilled_scripted_gui').IsShown(GuiScope.SetRoot(Story.MakeScope).End)]"
				spriteType = Corneredtiled
				using = Color_Green
				alpha = 0.3
				texture = "gfx/interface/colors/white.dds"

				margin_left = -2

				using = Mask_Rough_Edges

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
					mirror = horizontal
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
					spriteType = Corneredtiled
					blend_mode = alphamultiply
					alpha = 0.2
				}
			}
			
			button_checkbox = {
				visible = "[Story.MakeScope.Var('spell_component_template').Var('toggleable').IsSet]"
				checked = "[Story.MakeScope.Var('is_toggled').IsSet]"
				onclick = "[GetScriptedGui('reset_spell_preparation_story_cycle_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('spell_to_start_preparation_for_scope', Story.MakeScope.Var('spell_component_template').Var('spell_component_parent_spell').Story.MakeScope).End)]"
				onclick = "[GetScriptedGui('toggle_spell_component_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('spell_component_to_be_prepared', Story.MakeScope.Var('spell_component_template').Story.MakeScope).End)]"
				size = { 20 20 }
				parentanchor = right|vcenter
				position = { -5 0 }
			}

			#### Name ####
			text_single = {
				name = "spell_component_name"
				parentanchor = left
				text = "[Localize(Concatenate(Story.MakeScope.Var('spell_component_template').Var('spell_component_name').GetFlagName,'_name'))]"
				default_format = "#high"
				using = Font_Size_Medium
				align = nobaseline
				margin_top = 7
				margin_left = 15
			}
			
			flowcontainer = {
				datamodel = "[Story.MakeScope.Var('spell_component_template').GetList('spell_component_cost_and_bonus_list')]"
				parentanchor = right
				margin_right = 15
				
				item = {
					text_single = {
						name = "spell_component_cost_or_bonus"
						align = right
						parentanchor = bottom
						default_format = "#high"
						text = "[SelectLocalization(GreaterThan_CFixedPoint(Story.MakeScope.Var('spell_component_template').Var(Scope.GetFlagName).GetValue,'(CFixedPoint)0'),Concatenate(Scope.GetFlagName, '_spell_component_prefix_positive'),Concatenate(Scope.GetFlagName, '_spell_component_prefix_negative'))][Abs_CFixedPoint(Story.MakeScope.Var('spell_component_template').Var(Scope.GetFlagName).GetValue)|0][Localize(Concatenate(Scope.GetFlagName, '_spell_component_suffix'))]"
						margin_top = 5
						margin_right = 10
					}
				}
			}
		}
		
		hbox = {
			name = "character_input_box"
			visible = "[Story.MakeScope.Var('spell_component_template').Var('character_spell_component_input').IsSet]"
			layoutpolicy_horizontal = expanding
			margin = { 10 10 }
			margin_bottom = 20
			vbox = {
				spacing = 30
				hbox = {
					layoutpolicy_horizontal = expanding
					hbox = {
						datamodel = "[Story.MakeScope.Var('spell_component_template').GetList('spell_component_input_modifier_trait_group_list')]"
						
						item = {
							container_spell_component_trait_modifier = {
								blockoverride "visibility" {
									visible = "[GreaterThan_CFixedPoint(Story.MakeScope.Var('spell_component_template').Var(Scope.GetFlagName).GetValue, '(CFixedPoint)0')]"
								}
								blockoverride "icon_coloring_condition" {
									enabled = "[Or(Not(Story.MakeScope.Var('spell_component_template').Var('spell_component_character_selection').IsSet), Story.MakeScope.Var('spell_component_template').Var('spell_component_character_selection').GetCharacter.HasTraitFromGroup( Trait.GetGroup.Self ))]"
								}
								blockoverride "banner_coloring_condition" {
									enabled = "[Or(Not(Story.MakeScope.Var('spell_component_template').Var('spell_component_character_selection').IsSet), Story.MakeScope.Var('spell_component_template').Var('spell_component_character_selection').GetCharacter.HasTraitFromGroup( Trait.GetGroup.Self ))]"
								}
								blockoverride "banner_text" {
									text = "PER_LEVEL"
								}
							}
						}
					}
					hbox = {
						datamodel = "[Story.MakeScope.Var('spell_component_template').GetList('spell_component_input_modifier_trait_list')]"
						
						item = {
							container_spell_component_trait_modifier = {
								blockoverride "visibility" {
									visible = "[GreaterThan_CFixedPoint(Story.MakeScope.Var('spell_component_template').Var(Scope.GetFlagName).GetValue, '(CFixedPoint)0')]"
								}
							}
						}
					}
					
					expand = {}
				}
				hbox = {
					layoutpolicy_horizontal = expanding
					hbox = {
						datamodel = "[Story.MakeScope.Var('spell_component_template').GetList('spell_component_input_modifier_trait_group_list')]"
						
						item = {
							container_spell_component_trait_modifier = {
								blockoverride "visibility" {
									visible = "[LessThanOrEqualTo_CFixedPoint(Story.MakeScope.Var('spell_component_template').Var(Scope.GetFlagName).GetValue, '(CFixedPoint)0')]"
								}
								blockoverride "banner_text" {
									text = "PER_LEVEL"
								}
								blockoverride "banner_color" {
									using = Color_Red
								}
							}
						}
					}
					hbox = {
						datamodel = "[Story.MakeScope.Var('spell_component_template').GetList('spell_component_input_modifier_trait_list')]"
						
						item = {
							container_spell_component_trait_modifier = {
								blockoverride "visibility" {
									visible = "[LessThanOrEqualTo_CFixedPoint(Story.MakeScope.Var('spell_component_template').Var(Scope.GetFlagName).GetValue, '(CFixedPoint)0')]"
								}
								blockoverride "banner_color" {
									using = Color_Red
								}
							}
						}
					}
					
					expand = {}
				}
			}
			
			expand = {}
			
			vbox = {
				layoutpolicy_vertical = expanding
				vbox = {
					datamodel = "[Story.MakeScope.Var('spell_component_template').GetList('spell_component_input_modifier_skill_list')]"
					item = {
						hbox = {
							margin_left = 10
							margin_right = 15
							spacing = 4
						
							background = {
								name = "skill_icon_bg"
								texture = "gfx/interface/window_character/character_view_skills_bg.dds"
								framesize = { 70 26 }
								frame = "[Select_int32( EqualTo_string(Scope.GetFlagName,'diplomacy_skill') , '(int32)1', Select_int32(EqualTo_string(Scope.GetFlagName,'martial_skill'),'(int32)2', Select_int32(Or(EqualTo_string(Scope.GetFlagName,'stewardship_skill'), EqualTo_string(Scope.GetFlagName,'health_skill')),'(int32)3', Select_int32(EqualTo_string(Scope.GetFlagName, 'intrigue_skill'), '(int32)4' , Select_int32(EqualTo_string(Scope.GetFlagName, 'learning_skill'), '(int32)5', '(int32)6')) ) ) )]"
							}
						
							icon = {
								name = "skill_icon"
								visible = "[Not(EqualTo_string(Scope.GetFlagName,'health_skill'))]"
								texture = "gfx/interface/icons/icon_skills.dds"
								framesize = { 60 60 }
								frame = "[Select_int32( EqualTo_string(Scope.GetFlagName,'diplomacy_skill') , '(int32)1', Select_int32(EqualTo_string(Scope.GetFlagName,'martial_skill'),'(int32)2', Select_int32(EqualTo_string(Scope.GetFlagName,'stewardship_skill'),'(int32)3', Select_int32(EqualTo_string(Scope.GetFlagName, 'intrigue_skill'), '(int32)4' , Select_int32(EqualTo_string(Scope.GetFlagName, 'learning_skill'), '(int32)5', '(int32)6')) ) ) )]"
								size = { 30 30 }
							}
							
							icon = {
								name = "skill_icon_health"
								visible = "[EqualTo_string(Scope.GetFlagName,'health_skill')]"
								texture = "gfx/interface/icons/character_status/icon_health.dds"
								framesize = { 60 60 }
								frame = 1
								size = { 30 30 }
							}
							
							text_single = {
								using = Font_Size_Small
								raw_text = "x[Story.MakeScope.Var('spell_component_template').Var(Scope.GetFlagName).GetValue]"
								default_format = "#high"
							}
						}
					}
					
					hbox = {
						visible = "[DataModelHasItems(Story.MakeScope.Var('spell_component_template').GetList('spell_component_input_modifier_age_list'))]"
						margin_left = 10
						margin_right = 15
					
						background = {
							name = "age_icon_bg"
							texture = "gfx/interface/window_character/character_view_skills_bg.dds"
							framesize = { 70 26 }
							frame = 6
						}
					
						icon = {
							name = "age_icon"
							texture = "gfx/interface/icons/icon_time.dds"
							framesize = { 60 60 }
							size = { 30 30 }
						}
						
						vbox = {
							text_single = {
								using = Font_Size_Small
								text = "[Story.MakeScope.Var('spell_component_template').Var('age_ideal').GetValue|0]"
								default_format = "#high"
							}
							
							text_single = {
								fontsize = 10
								fontsize_min = 6
								margin_top = -4
								raw_text = "#negative_value [Story.MakeScope.Var('spell_component_template').Var('age_change').GetValue|0]#!/y"
								default_format = "#high"
							}
						}
					}
				}
				expand = {}
			}
			
			vbox = {
				portrait_head_small = {
					visible = "[Story.MakeScope.Var('spell_component_character_selection').IsSet]"
					datacontext = "[Story.MakeScope.Var('spell_component_character_selection').GetCharacter]"
					
					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiWidget.FindChild('character_unequip_button').TriggerAnimation('hover_enter')]"
					}
			
					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiWidget.FindChild('character_unequip_button').TriggerAnimation('hover_leave')]"
					}
			
					button_round = {
						name = "character_unequip_button"
						parentanchor = top|right
						size = { 30 30 }
			
						alpha = 0
			
						state = {
							name = hover_enter
							alpha = 1
							duration = 0.4
							using = Animation_Curve_Default
						}
			
						state = {
							name = hover_leave
							alpha = 0
							duration = 0.6
							using = Animation_Curve_Default
						}
			
						onclick = "[GetScriptedGui('cancel_spell_component_preparation_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('selected_spell_component_scope', Story.MakeScope).End)]"
			
						button_icon_highlight = {
							parentanchor = center
							size = { 30 30 }
							texture = "gfx/interface/icons/flat_icons/cancel_small.dds"
						}
					}
				}
	
				widget_empty_spell_component_portrait = { 
					visible = "[Not(Story.MakeScope.Var('spell_component_character_selection').IsSet)]"
				}
				
				text_single = {
					raw_text = "[SelectLocalization(EqualTo_string(Story.MakeScope.Var('spell_component_template').Var('spell_component_type').GetFlagName, 'character_prisoner'), 'Prisoner', 'Character')]"
				}
				
				text_single = {
					visible = "[Story.MakeScope.Var('spell_component_template').Var('consumes_input').IsSet]"
					text = "CONSUMED"
				}
				
				text_single = {
					visible = "[Story.MakeScope.Var('spell_component_character_selection').IsSet]"
					raw_text = "Suitability: #positive_value [GuiScope.SetRoot(Story.MakeScope.Var('spell_component_template').Story.MakeScope).AddScope('character_being_checked_for_suitability', Story.MakeScope.Var('spell_component_character_selection').GetCharacter.MakeScope).ScriptValue('character_spell_component_suitability_value')]#!"
				}
			}
		}
		
		hbox = {
			name = "artifact_input_box"
			visible = "[Story.MakeScope.Var('spell_component_template').Var('artifact_spell_component_input').IsSet]"
			layoutpolicy_horizontal = expanding
			margin = { 10 10 }
			margin_bottom = 20
			
			vbox = {
				layoutpolicy_vertical = expanding
				vbox = {
					datamodel = "[Story.MakeScope.Var('spell_component_template').GetList('spell_component_input_modifier_artifact_feature_list')]"
					
					item = {
						text_single = {
							layoutpolicy_horizontal = expanding
							align = left
							raw_text = "Has feature: [Localize(Concatenate('feature_',Scope.GetFlagName))|U] (#positive_value [Story.MakeScope.Var('spell_component_template').Var(Scope.GetFlagName).GetValue]#!)"
						}
					}
				}
				
				expand = {}
			}
			
			expand = {}
			
			vbox = {
				button_artifact = {
					name = "selected_artifact_button"
					visible = "[Story.MakeScope.Var('spell_component_artifact_selection').IsSet]"
					datacontext = "[Story.MakeScope.Var('spell_component_artifact_selection').Artifact]"
					size = { 100 100 }
		
					using = tooltip_se
		
					blockoverride "on_click"
					{
						#onclick = "[InventoryView.OnClickSlot( InventorySlot.Self )]"
						#onclick = "[GetVariableSystem.Clear( 'court_artifacts' )]"
					}
		
					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiWidget.FindChild('artifact_unequip_button').TriggerAnimation('hover_enter')]"
					}
		
					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiWidget.FindChild('artifact_unequip_button').TriggerAnimation('hover_leave')]"
					}
		
					button_round = {
						name = "artifact_unequip_button"
						parentanchor = top|right
						size = { 30 30 }
		
						alpha = 0
		
						state = {
							name = hover_enter
							alpha = 1
							duration = 0.4
							using = Animation_Curve_Default
						}
		
						state = {
							name = hover_leave
							alpha = 0
							duration = 0.6
							using = Animation_Curve_Default
						}
		
						onclick = "[GetScriptedGui('cancel_spell_component_preparation_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('selected_spell_component_scope', Story.MakeScope).End)]"
		
						button_icon_highlight = {
							parentanchor = center
							size = { 30 30 }
							texture = "gfx/interface/icons/flat_icons/cancel_small.dds"
						}
					}
				}
				
				widget_empty_spell_component_artifact = {
					visible = "[Not(Story.MakeScope.Var('spell_component_artifact_selection').IsSet)]"
				}
				
				hbox = {
					visible = "[DataModelHasItems(Story.MakeScope.Var('spell_component_template').GetList('spell_component_input_modifier_artifact_type_list'))]"
					datamodel = "[Story.MakeScope.Var('spell_component_template').GetList('spell_component_input_modifier_artifact_type_list')]"
					item = {
						text_single = {
							text = "[Localize(Concatenate('artifact_', Scope.GetFlagName))|U]"
						}
					}
				}
			}
		}

		
		text_multi = {
			visible = "[Not(EqualTo_string(Concatenate(Story.MakeScope.Var('spell_component_template').Var('spell_component_name').GetFlagName,'_desc'),Localize(Concatenate(Story.MakeScope.Var('spell_component_template').Var('spell_component_name').GetFlagName,'_desc'))))]"
			text = "[Localize(Concatenate(Story.MakeScope.Var('spell_component_template').Var('spell_component_name').GetFlagName,'_desc'))]"
			default_format = "#weak"
			using = Font_Size_Small
			autoresize = yes
			max_width = 480
			margin_top = 10
			margin_bottom = 10
			align = nobaseline
			layoutpolicy_horizontal = expanding
		}
		
		vbox = {
			layoutpolicy_horizontal = expanding
			datamodel = "[Story.MakeScope.Var('spell_component_template').GetList('spell_component_ingredient_list')]"
			
			item = {
				vbox = {
					layoutpolicy_horizontal = expanding
					hbox = {
						layoutpolicy_horizontal = expanding
						margin_bottom = 2
						
						# None selected yet
						background = {
							visible = "[Not(Story.MakeScope.Var('spell_component_ingredient_selection').IsSet)]"
							spriteType = Corneredtiled
							using = Color_Blue
							alpha = 0.2
							texture = "gfx/interface/colors/white.dds"
			
							margin_left = -2
			
							using = Mask_Rough_Edges
			
							modify_texture = {
								name = "mask"
								texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = alphamultiply
								mirror = horizontal
							}
			
							modify_texture = {
								texture = "gfx/interface/component_masks/patterns/mask_pattern_01.dds"
								spriteType = Corneredtiled
								blend_mode = alphamultiply
								alpha = 0.2
							}
						}
						
						# Different selection
						background = {
							visible = "[And(Story.MakeScope.Var('spell_component_ingredient_selection').IsSet, Not(ObjectsEqual(Story.MakeScope.Var('spell_component_ingredient_selection').Story, Scope.Story)))]"
							using = Color_Red
							alpha = 0.1
							texture = "gfx/interface/colors/white.dds"
			
							margin_left = -2
			
							using = Mask_Rough_Edges
			
							modify_texture = {
								name = "mask"
								texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = alphamultiply
								mirror = horizontal
							}
			
							modify_texture = {
								texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
								spriteType = Corneredtiled
								blend_mode = alphamultiply
								alpha = 0.2
							}
						}
						
						# Selected
						background = {
							visible = "[And(Story.MakeScope.Var('spell_component_ingredient_selection').IsSet, ObjectsEqual(Story.MakeScope.Var('spell_component_ingredient_selection').Story, Scope.Story))]"
							using = Color_Green
							alpha = 0.2
							texture = "gfx/interface/colors/white.dds"
			
							margin_left = -2
			
							using = Mask_Rough_Edges
			
							modify_texture = {
								name = "mask"
								texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = alphamultiply
								mirror = horizontal
							}
			
							modify_texture = {
								texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
								spriteType = Corneredtiled
								blend_mode = alphamultiply
								alpha = 0.2
							}
						}
						
						text_single = {
							text = "[Localize(Concatenate(Scope.Var('ingredient_name').GetFlagName, '_name'))]"
							default_format = "#V"
							margin_left = 10
						}
						
						expand = {}
						
						text_single = {
							raw_text = "[Localize(Scope.Var('ingredient_rarity').GetFlagName)]|"
						}
						
						text_single = {
							raw_text = "#V [Scope.Var('ingredient_price').GetValue|0]#! [gold_i]"
						}
						
						spacer = {
							size = { 5 0 }
						}
						
						button_checkbox = {
							checked = "[And(Story.MakeScope.Var('spell_component_ingredient_selection').IsSet, ObjectsEqual(Story.MakeScope.Var('spell_component_ingredient_selection').Story, Scope.Story))]"
							onclick = "[GetScriptedGui('reset_spell_preparation_story_cycle_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('spell_to_start_preparation_for_scope', Story.MakeScope.Var('spell_component_template').Var('spell_component_parent_spell').Story.MakeScope).End)]"
							onclick = "[GetScriptedGui('set_spell_component_ingredient_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('spell_component_to_be_prepared', Story.MakeScope.Var('spell_component_template').Story.MakeScope).AddScope('selected_ingredient_scope', Scope.Story.MakeScope).End)]"
							size = { 20 20 }
						}
					}
					
					hbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[Scope.Story]"
						text_multi = {
							text = "[Localize(Concatenate(Scope.Var('ingredient_name').GetFlagName,'_desc'))]"
							default_format = "#weak"
							using = Font_Size_Small
							autoresize = yes
							max_width = 260
							margin_top = 10
							margin_bottom = 10
							margin_left = 10
							margin_right = 10
							align = nobaseline
							layoutpolicy_horizontal = expanding
						}
						divider_light = {
							layoutpolicy_vertical = expanding
						}
						vbox = {
							layoutpolicy_horizontal = expanding
							vbox = {
								datamodel = "[Scope.GetList('ingredient_tag_list')]"
								layoutpolicy_horizontal = expanding
								
								item = {
									hbox = {
										layoutpolicy_horizontal = expanding
										text_multi = {
											visible = "[Not(Story.MakeScope.Var(Concatenate(Scope.GetFlagName, '_condition_aspect')).IsSet)]"
											raw_text = "• [Localize(Concatenate(Scope.GetFlagName, '_desc'))]"
											using = Font_Size_Small
											autoresize = yes
											max_width = 220
											align = nobaseline
											layoutpolicy_horizontal = expanding
										}
										text_multi = {
											visible = "[Story.MakeScope.Var(Concatenate(Scope.GetFlagName, '_condition_aspect')).IsSet]"
											raw_text = "• [Localize(Concatenate(Scope.GetFlagName, '_desc'))] ([Story.MakeScope.Var(Concatenate(Scope.GetFlagName, '_condition_value')).GetValue|V0] [Localize(Concatenate(Story.MakeScope.Var(Concatenate(Scope.GetFlagName, '_condition_aspect')).GetFlagName,'_coloring'))] [Localize(Concatenate(Story.MakeScope.Var(Concatenate(Scope.GetFlagName, '_condition_aspect')).GetFlagName,'_name'))]+#!)"
											using = Font_Size_Small
											autoresize = yes
											max_width = 220
											align = nobaseline
											layoutpolicy_horizontal = expanding
										}
									}
								}
							}
							vbox = {
								datamodel = "[Scope.GetList('ingredient_aspect_list')]"
								layoutpolicy_horizontal = expanding
								
								item = {
									text_multi = {
										raw_text = "• Increases the spell's [Localize(Concatenate(Scope.GetFlagName, '_coloring'))] [Localize(Concatenate(Scope.GetFlagName, '_name'))]#! level by #positive_value [Story.MakeScope.Var(Scope.GetFlagName).GetValue|0]#!."
										using = Font_Size_Small
										autoresize = yes
										max_width = 220
										align = nobaseline
										layoutpolicy_horizontal = expanding
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	type widget_empty_spell_component_portrait = widget {
		size = { 85 90 }

		background = {
			using = Background_Area_Solid

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
				blend_mode = alphamultiply
				alpha = 0.2
				mirror = vertical
			}
		}

		widget = {
			size = { 100% 100% }

			background = {
				texture = "gfx/portraits/portrait_frame.dds"
				using = Color_Grey
				margin = { -4 -4 }
				alpha = 0.5
			}
		}

		button = {
			size = { 100% 100% }
			#enabled = "[And(EmptyCourtPosition.CanHirePosition, GreaterThan_int32(EmptyCourtPosition.NumValidCourtiers, '(int32)0') )]"
			onclick = "[GetScriptedGui('select_spell_component_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('selected_spell_component_scope', Story.MakeScope).End)]"

			state = {
				name = _mouse_hierarchy_enter
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('show')]"

			}

			state = {
				name = _mouse_hierarchy_leave
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('hide')]"

			}

			highlight_icon = {
				name = "portrait_unknown_head_small_glow"
				parentanchor = center
				position = { 3 -9 }
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				texture = "gfx/portraits/unknown_portraits/button_unknown_head.dds"
				size = { 80 100 }
				framesize = { 384 480 }
				upframe = 1
				overframe = 2
			}

			#button_plus = {
			#	visible = "[And(EmptyCourtPosition.CanHirePosition, GreaterThan_int32(EmptyCourtPosition.NumValidCourtiers, '(int32)0') )]"
			#	parentanchor = center
			#	position = { 0 0 }
			#	onclick = "[EmptyCourtPosition.Appoint]"
			#}

			widget = {
				name = "highlight_frame"
				size = { 100% 100% }
				alwaystransparent = yes
				alpha = 0

				state = {
					name = "show"
					alpha = 1
				}

				state = {
					name = "hide"
					alpha = 0
				}

				background = {
					size = { 100% 100% }
					texture = "gfx/portraits/portrait_frame.dds"
					using = Color_Grey
					alpha = 0.7
					margin = { -4 -4 }
				}
			}
		}
	}
	
	type widget_empty_spell_component_artifact = widget {
		size = { 85 90 }

		background = {
			using = Background_Area_Solid

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
				blend_mode = alphamultiply
				alpha = 0.2
				mirror = vertical
			}
		}

		widget = {
			size = { 100% 100% }
		
			background = {
				texture = "gfx/portraits/portrait_frame.dds"
				using = Color_Grey
				margin = { -4 -4 }
				alpha = 0.5
			}
		}

		button_icon = {
			name = "empty_slot_button"
			visible = "[Not(Story.MakeScope.Var('spell_component_artifact_selection').IsSet)]"
			onclick = "[GetScriptedGui('select_spell_component_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('selected_spell_component_scope', Story.MakeScope).End)]"
			parentanchor = center
			size = { 60 60 }
		
			texture = "gfx/interface/icons/inventory/trinket.dds"
			spriteType = Corneredtiled
			spriteborder = { 2 2 }
		}
	}
	
	type container_spell_component_trait_modifier = container {
		datacontext = "[GetTrait(Scope.GetFlagName)]"
		block "visibility" { }
		
		button = {
			block "banner_coloring_condition" {
				enabled = "[Or(Not(Story.MakeScope.Var('spell_component_character_selection').IsSet), Story.MakeScope.Var('spell_component_character_selection').GetCharacter.HasTrait( Trait.Self ))]"
			}
			position = { 0 30 }
			parentanchor = hcenter|bottom
			icon = {
				size = { 29 38 }
				texture = "gfx/interface/icons/rituals/banner_neutral.dds"
				parentanchor = hcenter|bottom
				
				block "banner_color" {
					using = Color_Green
				}
		
				text_single = {
					using = Font_Size_Small
					text = "[Abs_CFixedPoint(Story.MakeScope.Var('spell_component_template').Var(Scope.GetFlagName).GetValue)|0]"
					default_format = "#high"
					align = nobaseline
					parentanchor = center
				}
				
				text_single = {
					block "banner_text" { }
					fontsize_min = 1
					fontsize = 6
					margin_top = 16
					default_format = "#high"
					align = nobaseline
					parentanchor = center
				}
			}
		}
		
		button = {
			block "icon_coloring_condition" {
				enabled = "[Or(Not(Story.MakeScope.Var('spell_component_character_selection').IsSet), Story.MakeScope.Var('spell_component_character_selection').GetCharacter.HasTrait( Trait.Self ))]"
			}
			size = { 40 40 }
			icon = {
				size = { 40 40 }
				alwaystransparent = yes
				texture = "[Trait.GetIcon( GetPlayer )]"
		
				using = tooltip_ne
				tooltip_offset = { 0 20 }
			}
		}
	}
	
	type hbox_court_magi_spellcasting_acceptance = hbox {
		name = "court_magi_acceptance"
		visible = "[And(GetPlayer.GetCouncillor('councillor_court_magi').IsCouncillor, GetPlayer.MakeScope.Var('casting_through_court_magi_var').IsSet)]"
		margin = { 0 5 }

		widget = {
			name = "answer_chance"
			size = { 330 60 }
			tooltip = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('caster', GetPlayer.GetCouncillor( 'councillor_court_magi' ).MakeScope).AddScope('spell_preparation_story_cycle_scope', GetPlayer.MakeScope.Var('spell_preparation_story_cycle').Story.MakeScope).GetScriptValueDesc('court_magi_spellcasting_acceptance_value')]"

			background = {
				using = Background_Area_Dark
			}

			icon = {
				texture = "gfx/interface/icons/symbols/icon_cross.dds"
				size = { 30 30 }
				position = { 50 0 }
				parentanchor = vcenter
				visible = "[LessThanOrEqualTo_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('caster', GetPlayer.GetCouncillor( 'councillor_court_magi' ).MakeScope).AddScope('spell_preparation_story_cycle_scope', GetPlayer.MakeScope.Var('spell_preparation_story_cycle').Story.MakeScope).ScriptValue('court_magi_spellcasting_acceptance_value'),'(CFixedPoint)0')]"
			}

			icon = {
				texture = "gfx/interface/icons/symbols/icon_check.dds"
				size = { 30 30 }
				position = { 50 0 }
				parentanchor = vcenter
				visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('caster', GetPlayer.GetCouncillor( 'councillor_court_magi' ).MakeScope).AddScope('spell_preparation_story_cycle_scope', GetPlayer.MakeScope.Var('spell_preparation_story_cycle').Story.MakeScope).ScriptValue('court_magi_spellcasting_acceptance_value'),'(CFixedPoint)0')]"
			}

			vbox = {
				maximumsize = { 120 46 }
				parentanchor = center
				
				text_single = {
					layoutpolicy_horizontal = expanding
					name = "answer"
					raw_text = "[SelectLocalization(LessThanOrEqualTo_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('caster', GetPlayer.GetCouncillor( 'councillor_court_magi' ).MakeScope).AddScope('spell_preparation_story_cycle_scope', GetPlayer.MakeScope.Var('spell_preparation_story_cycle').Story.MakeScope).ScriptValue('court_magi_spellcasting_acceptance_value'),'(CFixedPoint)0'), '#negative_value Will not accept#!', '#positive_value Will accept#!')]"
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					#visible = "[And( Not( CharacterInteractionConfirmationWindow.IsAiMaybe ), Not( CharacterInteractionConfirmationWindow.GetRecipient.IsPlayer ) )]"
					name = "answer_score"
					raw_text = "[SelectLocalization(LessThanOrEqualTo_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('caster', GetPlayer.GetCouncillor( 'councillor_court_magi' ).MakeScope).AddScope('spell_preparation_story_cycle_scope', GetPlayer.MakeScope.Var('spell_preparation_story_cycle').Story.MakeScope).ScriptValue('court_magi_spellcasting_acceptance_value'),'(CFixedPoint)0'), '#negative_value', '#positive_value')] [GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('caster', GetPlayer.GetCouncillor( 'councillor_court_magi' ).MakeScope).AddScope('spell_preparation_story_cycle_scope', GetPlayer.MakeScope.Var('spell_preparation_story_cycle').Story.MakeScope).ScriptValue('court_magi_spellcasting_acceptance_value')|0]#!"
					align = nobaseline
				}
			}
		}
	}
	
	type container_spell_effects_tooltip = container {
		
		vbox = {
			datamodel = "[Story.MakeScope.GetList('spell_tag_list')]"
			using = DefaultTooltipBackground
			alwaystransparent = no
			
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "[Story.Custom('SpellName')]"
				default_format = "#T"
				margin_left = 20
				margin_top = 10
			}
			
			spacer = { 
				size = { 10 10 } 
			}
			
			item = {
				text_multi = {
					layoutpolicy_horizontal = expanding
					text = SPELL_EFFECT_EFFECT_BULLETPOINT
					autoresize = yes
					max_width = 350
					using = Font_Size_Small
					alwaystransparent = yes
					margin_left = 20
					margin_right = 20
					margin_bottom = 10
				}
			}
		}
	}
	
	type widget_bound_entity = vbox
	{
		# Requires
		# datacontext = story (component)
		
		background = {
			using = Background_Area_Light
			margin_top = 2
			alpha = 0.6
		}

		background = {
			using = Background_Frame
			margin_top = 2
			margin_bottom = 2
			margin_right = 3
		}
		
		widget = {
			size = { 520 40 }

			#### BACKGROUND ####
			
			# Fulfilled
			background = {
				spriteType = Corneredtiled
				using = Color_Green
				alpha = 0.3
				texture = "gfx/interface/colors/white.dds"

				margin_left = -2

				using = Mask_Rough_Edges

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
					mirror = horizontal
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
					spriteType = Corneredtiled
					blend_mode = alphamultiply
					alpha = 0.2
				}
			}

			#### Name ####
			text_single = {
				name = "bound_entity_creature"
				parentanchor = left
				text = "[Localize(Concatenate(Story.MakeScope.Var('bound_entity_creature').GetFlagName,'_bound_entity_name'))]"
				default_format = "#high"
				using = Font_Size_Medium
				align = nobaseline
				margin_top = 7
				margin_left = 15
			}
			
			#### Type ####
			text_single = {
				name = "bound_entity_type"
				parentanchor = right
				text = "[Localize(Concatenate(Story.MakeScope.Var('bound_entity_type').GetFlagName,'_bound_entity_type'))]"
				default_format = "#high"
				using = Font_Size_Small
				align = nobaseline
				margin_top = 9
				margin_right = 15
			}
		}
		
		text_multi = {
			text = "[Localize(Concatenate(Story.MakeScope.Var('bound_entity_creature').GetFlagName,'_bound_entity_desc'))]"
			default_format = "#weak"
			using = Font_Size_Small
			autoresize = yes
			max_width = 480
			margin_top = 10
			margin_bottom = 10
			align = nobaseline
			layoutpolicy_horizontal = expanding
		}
		
		vbox = {
			datamodel = "[Story.MakeScope.GetList('bound_entity_attribute_list')]"
			layoutpolicy_horizontal = expanding
			
			item = {
				text_multi = {
					raw_text = "#BOL [Localize(Concatenate(Scope.GetFlagName, '_bound_entity_attribute_name'))]#!: #weak [Localize(Concatenate(Scope.GetFlagName, '_bound_entity_attribute_desc'))]#!"
					
					using = Font_Size_Small
					
					autoresize = yes
					align = left
					layoutpolicy_horizontal = expanding
					
					margin_left = 10
					margin_bottom = 10
					
					max_width = 500
				}
			}
		}
		
		hbox = {
			layoutpolicy_horizontal = expanding
			
			text_single = {
				visible = "[Story.MakeScope.Var('bound_entity_location').IsSet]"
				raw_text = "At [Story.MakeScope.Var('bound_entity_location').Province.GetName]"
				
				margin_left = 10
				margin_bottom = 10
			}
			
			expand = {}
			
			text_single = {
				raw_text = "Bond Strength: #V [Story.MakeScope.Var('bond_strength').GetValue|0]#! (#negative_value -4/year#!)"
				
				margin_right = 10
				margin_bottom = 10
			}
		}
	}
}