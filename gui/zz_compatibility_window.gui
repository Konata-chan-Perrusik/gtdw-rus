types GHCompTypes
{
    type gh_compatibility_warning_window = window {
		visible = "[Or(GetVariableSystem.HasValue( 'gh_compatibility_warning_window', 'visible' ), And(GetScriptedGui('any_mod_is_loaded').IsShown(GuiScope.End), GetVariableSystem.HasValue( 'mod_detected', 'visible' )))]"
        layer = top
		parentanchor = center
		using = Window_Decoration_Spike
        using = Window_Background
        
        vbox = {
            using = Window_Margins
            set_parent_size_to_minimum = yes
            
            header_pattern = {
                layoutpolicy_horizontal = expanding

                blockoverride "header_text" {
                   text = "gh_warning_title"
                }
				blockoverride "button_close"
				{
					onclick = "[GetVariableSystem.Clear( 'gh_compatibility_warning_window')]"
					onclick = "[GetVariableSystem.Clear( 'mod_detected')]"
				}
            }
			
			gh_cfp_is_loaded = {}
			gh_rice_is_loaded = {}
			gh_mbi_is_loaded = {}
			gh_fb_is_loaded = {}

			vbox = {
				visible = "[GetVariableSystem.HasValue( 'gui_overwritten', 'visible' )]"			
				text_single = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 500
					text = "gh_files_are_overwritten"
					default_format = "#bold"
					align = left
					fontsize = 17
					fontsize_min = 14
				}
				
				spacer = { size = { 0 10 } }

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					size = { 395 280 }
					
					blockoverride "scrollbox_margins" {
						margin = { 0 0 }
					}
					
					blockoverride "scrollbox_content" {
						vbox = {
							gh_overwrite_hud = {}
							gh_overwrite_interaction_marriage = {}
							gh_overwrite_window_activity_planner = {}
							gh_overwrite_window_artifact_details = {}
							gh_overwrite_window_barbershop = {}
							gh_overwrite_window_character = {}
							gh_overwrite_window_character_finder = {}
							gh_overwrite_window_character_focus = {}
							gh_overwrite_window_character_lifestyle = {}
							gh_overwrite_window_council = {}
							gh_overwrite_window_county_view = {}
							gh_overwrite_window_culture = {}
							gh_overwrite_window_decisions = {}
							gh_overwrite_window_diverge_culture = {}
							gh_overwrite_window_dynasty = {}
							gh_overwrite_window_dynasty_house = {}
							gh_overwrite_window_dynasty_tree = {}
							gh_overwrite_window_factions = {}
							gh_overwrite_window_faith = {}
							gh_overwrite_window_intrigue = {}
							gh_overwrite_window_inventory = {}
							gh_overwrite_window_menatarms = {}
							gh_overwrite_window_menatarms_type_view = {}
							gh_overwrite_window_military = {}
							gh_overwrite_window_ruler_designer = {}
							gh_overwrite_window_title = {}					
						}
					}
				}	
				spacer = { size = { 540 10 } }
			}
			
			text_multi = {
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 500
				text = "gh_ending_warning_description"
				align = left
				fontsize = 17
				fontsize_min = 14
			}
			spacer = { size = { 540 20 } }
        }
    }
	
	type gh_cfp_is_loaded = gh_mod_detected_type {
		visible = "[GetScriptedGui('is_cfp_loaded_sgui').IsShown(GuiScope.End)]"
		blockoverride "text" { text = "CFP_DETECTED" }
	}
	type gh_rice_is_loaded = gh_mod_detected_type {
		visible = "[GetScriptedGui('is_rice_loaded_sgui').IsShown(GuiScope.End)]"
		blockoverride "text" { text = "RICE_DETECTED" }
	}
	type gh_mbi_is_loaded = gh_mod_detected_type {
		visible = "[GetScriptedGui('is_mbi_loaded_sgui').IsShown(GuiScope.End)]"
		blockoverride "text" { text = "MBI_DETECTED" }
	}
	type gh_fb_is_loaded = gh_mod_detected_type {
		visible = "[GetScriptedGui('is_fb_loaded_sgui').IsShown(GuiScope.End)]"
		blockoverride "text" { text = "FB_DETECTED" }
	}

	type gh_overwrite_hud = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/hud" }
    }
	type gh_overwrite_interaction_marriage = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/interaction_marriage" }
    }
	type gh_overwrite_window_activity_planner = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_activity_planner" }
    }
	type gh_overwrite_window_artifact_details = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_artifact_details" }
    }
	type gh_overwrite_window_barbershop = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_barbershop" }
    }
	type gh_overwrite_window_character = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_character" }
		blockoverride "text_explanation" { text = "window_character_incompatibility_desc" }
    }
	type gh_overwrite_window_character_finder = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_character_finder" }
    }
	type gh_overwrite_window_character_focus = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_character_focus" }
    }
	type gh_overwrite_window_character_lifestyle = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_character_lifestyle" }
        blockoverride "text_explanation" { text = "window_character_lifestyle_incompatibility_desc" }
    }
	type gh_overwrite_window_council = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_council" }
		blockoverride "text_explanation" { text = "window_council_incompatibility_desc" }
    }
	type gh_overwrite_window_county_view = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_county_view" }
        blockoverride "text_explanation" { text = "window_county_view_incompatibility_desc" }
    }
	type gh_overwrite_window_culture = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_culture" }
		blockoverride "text_explanation" { text = "window_culture_incompatibility_desc" }
    }
	type gh_overwrite_window_decisions = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_decisions" }
		blockoverride "text_explanation" { text = "window_decisions_incompatibility_desc" }
    }
	type gh_overwrite_window_diverge_culture = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_activity_planner" }
    }
	type gh_overwrite_window_dynasty = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_dynasty" }
    }
	type gh_overwrite_window_dynasty_house = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_dynasty_house" }
    }
	type gh_overwrite_window_dynasty_tree = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_dynasty_tree" }
    }
	type gh_overwrite_window_factions = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_factions" }
		blockoverride "text_explanation" { text = "window_factions_incompatibility_desc" }
    }
	type gh_overwrite_window_faith = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_faith" }
		blockoverride "text_explanation" { text = "window_faith_incompatibility_desc" }
    }
	type gh_overwrite_window_inventory = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_inventory" }
		blockoverride "text_explanation" { text = "window_inventory_incompatibility_desc" }
    }
	type gh_overwrite_window_intrigue = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_intrigue" }
    }
	type gh_overwrite_window_menatarms = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_menatarms" }
		blockoverride "text_explanation" { text = "window_menatarms_incompatibility_desc" }
    }
	type gh_overwrite_window_menatarms_type_view = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_menatarms_type_view" }
    }
	type gh_overwrite_window_military = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_military" }
		blockoverride "text_explanation" { text = "window_military_incompatibility_desc" }
    }
	type gh_overwrite_window_ruler_designer = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_ruler_designer" }
    }
	type gh_overwrite_window_title = gh_basic_overwrite_type {
        blockoverride "gui_window_name" { raw_text = "gui/window_title" }
    }
	
	type gh_basic_overwrite_type = vbox {
		layoutpolicy_horizontal = expanding
		
		state = {
			trigger_on_create = yes
			on_start = "[GetVariableSystem.Set( 'gh_compatibility_warning_window', 'visible'  )]"
			on_start = "[GetVariableSystem.Set( 'gui_overwritten', 'visible'  )]"
		}
		spacer = { size = { 0 20 } }
		
		text_single = {
			block "gui_window_name" {
				raw_text = ""
			}
			default_format = "#high"
			autoresize = yes
			max_width = 500
			align = center
			fontsize = 18
			fontsize_min = 14
		}
		spacer = { size = { 0 15 } }
		text_multi = {
			autoresize = yes
			max_width = 500
			block "text_explanation" {
				text = "generic_incompatibility_desc"
			}
			align = nobaseline
			fontsize = 17
			fontsize_min = 14
		}
		
		spacer = { size = { 0 30 } }
		
		divider_light = { layoutpolicy_horizontal = expanding }
    }

	type gh_mod_detected_type = vbox {	
	
		state = {
			trigger_on_create = yes
			on_start = "[GetVariableSystem.Set( 'mod_detected', 'visible'  )]"
		}
		
		layoutpolicy_horizontal = expanding
		text_single = {
			layoutpolicy_horizontal = expanding
			autoresize = yes
			max_width = 500
			block "text" {
				text = ""
			}
			align = left
			fontsize = 17
			fontsize_min = 14
			margin_top = 5
			margin_bottom = 15
		}
	}
}