window = {
	name = "artifact_details_view"
	size = { 1050 60% }
	layer = middle

	position = { 500 200 }

	using = Window_Movable
	using = Window_Background
	using = Window_Decoration_Spike

	datacontext = "[GetVariableSystem]"
	datacontext = "[ArtifactDetailsView.GetArtifact]"

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Set( 'details_right_side_tab', 'claims' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
	}

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "ARTIFACT_DETAILS_TITLE"
			}

			blockoverride "button_close"
			{
				onclick = "[ArtifactDetailsView.Close]"
			}
		}

		hbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			# left vbox is the artifact details
			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				minimumsize = { 400 -1 }

				hbox = {
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
							blend_mode = alphamultiply
						}
					}

					vbox = {
						layoutpolicy_vertical = expanding

						button_artifact = {
							size = { 160 160 }
						}

						expand = {}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin_top = 13

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								text = "[Artifact.GetRarityAndType]"
								max_width = 250
								using = Font_Size_Small
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_multi = {
								text = "[Artifact.GetNameNoTooltip]"
								max_width = 250
								autoresize = yes
								using = Font_Size_Medium
								default_format = "#high"
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding
									margin_right = 10

									expand = {}

									button_edit_text = {
										visible = "[Artifact.GetOwner.IsLocalPlayer]"
										onclick = "[Artifact.OpenRenameWindow]"
										tooltip = "RENAME_ARTIFACT"
										size = { 25 25 }
									}

									button_kill_list = {
										visible = "[DataModelHasItems( Artifact.GetKills )]"
										onclick = "[ToggleGameViewData( 'artifact_kill_list', Artifact.GetID  )]"
										tooltip = "OPEN_ARTIFACT_KILL_LIST_TOOLTIP"
										size = { 25 25 }
									}
								}

								expand = {}
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5
							
							hbox = {
								visible = "[Artifact.MakeScope.Var('writing_culture').IsSet]"
		
								hbox = {
									spacing = 2
									datacontext = "[Artifact.MakeScope.Var('writing_culture').Culture]"
		
									icon_flat_standard = {
										size = { 20 20 }
										visible = "[ObjectsEqual( Culture.GetLanguage, GetPlayer.GetCulture.GetLanguage )]"
										texture = "gfx/interface/icons/culture_pillars/language.dds"
									}
		
									icon_flat_standard = {
										size = { 20 20 }
										visible = "[Not( ObjectsEqual( Culture.GetLanguage, GetPlayer.GetCulture.GetLanguage ))]"
										texture = "gfx/interface/icons/culture_pillars/language_diverge.dds"
									}
		
									text_multi = {
										datacontext = "[Culture.GetLanguage]"
										text = "[CulturePillar.GetName]"
										autoresize = yes
										max_width = 220
									}
								}
							}

							hbox_artifact_durability = {
								visible = "[Artifact.GetOwner.IsLocalPlayer]"
								margin_top = 5
							}

							expand = {}
						}

						hbox = {
							visible = "[Artifact.GetOwner.IsLocalPlayer]"
							layoutpolicy_horizontal = expanding
							margin_top = 5

							hbox = {
								spacing = 5

								button_round = {
									name = "reforge"
									size = { 30 30 }

									button_icon_highlight = {
										parentanchor = center
										size = { 20 20 }
										texture = "gfx/interface/icons/flat_icons/reforge.dds"
									}

									onclick = "[ToggleGameViewData( 'reforge_artifact', Artifact.GetID )]"
									tooltip = "[Artifact.GetReforgeOrRepairTooltip( Artifact.GetOwner.Self )]"
									enabled = "[Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self )]"

									icon = {
										name = "selection_glow"
										visible = "[Artifact.IsDurabilityLow]"
										parentanchor = center
										size = { 45 45 }

										state = {
											trigger_on_create = yes

											name = max_glow
											next = min_glow
											duration = 1
											using = Animation_Curve_Default
											alpha = 0.5
										}

										state = {
											name = min_glow
											next = max_glow
											duration = 1.6
											using = Animation_Curve_Default
											alpha = 0.3
										}

										background = {
											texture = "gfx/interface/component_masks/mask_fade_circle.dds"
											tintcolor = { 1 0.8 0.6 1 }
										}
									}
								}

								text_single = {
									text = "REFORGE_OR_REPAIR"
									max_width = 200
									align = nobaseline
								}

								expand = {}
							}

							expand = {}
						}

						hbox = {
							visible = "[Artifact.GetOwner.IsPlayerInteractionWithTargetArtifactValid( 'destroy_artifact_interaction', Artifact.Self )]"
							layoutpolicy_horizontal = expanding

							hbox = {
								spacing = 5

								button_round = {
									name = "destroy"
									size = { 30 30 }

									button_icon_highlight = {
										parentanchor = center
										size = { 20 20 }
										texture = "gfx/interface/icons/flat_icons/destroy_artifact.dds"
									}

									visible = "[Artifact.GetOwner.IsPlayerInteractionShown( 'destroy_artifact_interaction' )]"
									enabled = "[Artifact.GetOwner.IsPlayerInteractionWithTargetArtifactValid( 'destroy_artifact_interaction', Artifact.Self )]"
									onclick = "[Artifact.GetOwner.OpenPlayerInteractionWithTargetArtifact( 'destroy_artifact_interaction', Artifact.Self )]"
									tooltip = "[Artifact.GetOwner.GetPlayerInteractionWithTargetArtifactTooltip( 'destroy_artifact_interaction', Artifact.Self )]"
								}

								text_single = {
									text = "INVENTORY_DESTROY_ARTIFACT"
									max_width = 200
									align = nobaseline
								}

								expand = {}
							}

							expand = {}
						}
						
						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(GetScriptedGui('magic_gui_artifact_is_selected_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('target', Artifact.MakeScope).End))]"

							hbox = {
								spacing = 5

								button_round = {
									name = "add_to_magic_target_artifact"
									size = { 30 30 }

									button_icon_highlight = {
										parentanchor = center
										size = { 20 20 }
										texture = "gfx/interface/icons/flat_icons/magic_add_icon.dds"
									}

									onclick = "[GetScriptedGui('magic_gui_select_artifact_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('target', Artifact.MakeScope).End)]"
								}

								text_single = {
									raw_text = "Add to [magic|E] Targets"
									max_width = 200
									align = nobaseline
								}

								expand = {}
							}

							expand = {}
						}
						
						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GetScriptedGui('magic_gui_artifact_is_selected_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('target', Artifact.MakeScope).End)]"

							hbox = {
								spacing = 5

								button_round = {
									name = "remove_magic_target_artifact"
									size = { 30 30 }

									button_icon_highlight = {
										parentanchor = center
										size = { 20 20 }
										texture = "gfx/interface/icons/flat_icons/magic_add_icon.dds"
									}

									onclick = "[GetScriptedGui('magic_gui_select_artifact_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('target', Artifact.MakeScope).End)]"
								}

								text_single = {
									raw_text = "Remove from [magic|E] Targets"
									max_width = 200
									align = nobaseline
								}

								expand = {}
							}

							expand = {}
						}

						vbox = {
							spacing = 5
							visible = "[And( Not( Artifact.GetOwner.IsLocalPlayer ), Artifact.HasClaim( GetPlayer ) )]"
							layoutpolicy_horizontal = expanding
							margin_bottom = 5

							hbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									text = "DETAILS_TAB_CLAIM_INTERACTIONS"
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 2

								expand = {}

								button_round = {
									name = "steal"
									size = { 35 35 }

									button_icon_highlight = {
										parentanchor = center
										size = { 25 25 }
										texture = "gfx/interface/icons/flat_icons/scheme.dds"
									}

									enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact')]"
									onclick = "[Artifact.GetOwner.OpenPlayerInteraction('start_stealing_back_artifact')]"
									tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip( 'start_stealing_back_artifact' )]"
								}

								button_round = {
									name = "declare_war"
									size = { 35 35 }

									button_icon_highlight = {
										size = { 25 25 }
										parentanchor = center
										texture = "gfx/interface/icons/flat_icons/declare_war.dds"
									}

									enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction')]"
									onclick = "[Artifact.GetOwner.OpenPlayerInteraction('declare_war_interaction')]"
									tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('declare_war_interaction')]"
								}

								button_round = {
									name = "duel"
									size = { 35 35 }

									button_icon_highlight = {
										parentanchor = center
										size = { 25 25 }
										texture = "gfx/interface/icons/flat_icons/duel.dds"
									}

									enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction')]"
									onclick = "[Artifact.GetOwner.OpenPlayerInteraction('challenge_for_artifact_interaction')]"
									tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('challenge_for_artifact_interaction')]"
								}

								expand = {
									layoutpolicy_horizontal = expanding
								}
							}

							expand = {}
						}

						expand = {}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					vbox = {
						datamodel = "[Artifact.MakeScope.GetList('artifact_magic_resistance_modifier_list')]"
						layoutpolicy_horizontal = expanding
						item = {
							text_single = {
								layoutpolicy_horizontal = expanding
								max_width = 300
								autoresize = yes
								raw_text = "• [magic_resistance|E]: #positive_value +[Artifact.MakeScope.Var(Scope.GetFlagName).GetValue|0]#!"
							}
						}
					}

					vbox = {
						datamodel = "[Artifact.MakeScope.GetList('artifact_magic_regeneration_modifier_list')]"
						layoutpolicy_horizontal = expanding
						item = {
							text_single = {
								layoutpolicy_horizontal = expanding
								max_width = 300
								autoresize = yes
								raw_text = "• [mana_regeneration|E]: #positive_value +[Artifact.MakeScope.Var(Scope.GetFlagName).GetValue|0]#!"
							}
						}
					}

					vbox = {
						datamodel = "[Artifact.MakeScope.GetList('artifact_magic_overwhelmation_modifier_list')]"
						layoutpolicy_horizontal = expanding
						item = {
							text_single = {
								layoutpolicy_horizontal = expanding
								max_width = 300
								autoresize = yes
								raw_text = "• [overwhelmation|E]: #positive_value +[Artifact.MakeScope.Var(Scope.GetFlagName).GetValue|0]#! per spell cast"
							}
						}
					}
					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }

						vbox = {
							datamodel = "[Artifact.MakeScope.GetList('artifact_aspect_modifier_list')]"
							
							item = {
								text_single = {
									layoutpolicy_horizontal = expanding
									autoresize = yes
									raw_text = "• [Localize(Concatenate('aspect_',Scope.GetFlagName))]:[Localize(Concatenate(Scope.GetFlagName, '_i'))]#positive_value +[Artifact.MakeScope.Var(Scope.GetFlagName).GetValue|0]#!"
								}
							}
							
							text_multi = {
								text = "[Artifact.GetModifierEffects]"
								max_width = 410
								autoresize = yes
							}
						}
						expand = {}
					}
					hbox = {
						visible = "[Artifact.MakeScope.Var('mana_capacity').IsSet]"
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }

						text_multi = {
							visible = "[EqualTo_CFixedPoint(Artifact.MakeScope.Var('stored_mana').GetValue, '(CFixedPoint)-1')]"
							raw_text = "• [mana|E] Capacity: @magic_icon!#V ∞#!"
							max_width = 410
							autoresize = yes
						}
						
						text_multi = {
							visible = "[And(Not(EqualTo_CFixedPoint(Artifact.MakeScope.Var('stored_mana').GetValue, '(CFixedPoint)-1')), EqualTo_CFixedPoint(Artifact.MakeScope.Var('mana_capacity').GetValue, '(CFixedPoint)-1'))]"
							raw_text = "• [mana|E] Capacity: @magic_icon!#V [Artifact.MakeScope.Var('stored_mana').GetValue|0]#!/#V ∞#!"
							max_width = 410
							autoresize = yes
						}

						text_multi = {
							visible = "[And(Not(EqualTo_CFixedPoint(Artifact.MakeScope.Var('stored_mana').GetValue, '(CFixedPoint)-1')), Not(EqualTo_CFixedPoint(Artifact.MakeScope.Var('mana_capacity').GetValue, '(CFixedPoint)-1')))]"
							raw_text = "• [mana|E] Capacity: @magic_icon!#V [Artifact.MakeScope.Var('stored_mana').GetValue|0]#!/#V [Artifact.MakeScope.Var('mana_capacity').GetValue|0]#!"
							max_width = 410
							autoresize = yes
						}
						expand = {}
					}

					spacer = {
						size = { 0 5 }
					}

					hbox = {
						name = "fallback"
						visible = "[Not( Artifact.CanBenefitPlayer )]"
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }

						text_multi = {
							text = "ARTIFACT_FALLBACK_EFFECT"
							max_width = 390
							autoresize = yes

							margin_bottom = 5
						}

						expand = {}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						scrollbox = {
							name = "artifact_description_scrollarea"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							blockoverride "scrollbox_background"
							{
								background = {
									using = Background_Area
								}
							}

							scrollwidget = {
								text_multi = {
									name = "artifact_description"
									text = "[Artifact.GetDesc]"
									max_width = 410
									autoresize = yes
									default_format = "#flavor"

									margin_top = 15
									margin_left = 20
								}
							}

							blockoverride "scrollbox_background_fade" {
								icon = {
									alpha = 0
								}
							}
						}
					}
				}

				expand = {}
			}

			# right vbox is claims and history tabs
			vbox = {
				layoutpolicy_vertical = expanding
				minimumsize = { 500 -1 }

				hbox = {
					name = "right_side_tabs"
					layoutpolicy_horizontal = expanding

					button_tab = {
						layoutpolicy_horizontal = expanding
						text = "DETAILS_TAB_CLAIMS"
						onclick = "[VariableSystem.Set( 'details_right_side_tab', 'claims' )]"
						down = "[VariableSystem.HasValue( 'details_right_side_tab', 'claims' )]"
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						text = "DETAILS_TAB_HISTORY"
						onclick = "[VariableSystem.Set( 'details_right_side_tab', 'history' )]"
						down = "[VariableSystem.HasValue( 'details_right_side_tab', 'history' )]"
					}
					
					button_tab = {
						layoutpolicy_horizontal = expanding
						raw_text = "Knowledge"
						visible = "[DataModelHasItems(Artifact.MakeScope.GetList('knowledge_entry_list'))]"
						onclick = "[VariableSystem.Set( 'details_right_side_tab', 'knowledge' )]"
						down = "[VariableSystem.HasValue( 'details_right_side_tab', 'knowledge' )]"
					}
				}

				scrollbox = {
					name = "knowledge"
					visible = "[VariableSystem.HasValue( 'details_right_side_tab', 'knowledge' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						vbox = {
							name = "knowledge_entry_list"
							datamodel = "[Artifact.MakeScope.GetList('knowledge_entry_list')]"
							
							layoutpolicy_horizontal = expanding
							spacing = 10

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									
									margin_bottom = 10
									
									background = {
										using = Background_Area_Dark_Border
										alpha = 0.3
									}
									
									hbox = {
										layoutpolicy_horizontal = expanding
										
										background = {
											block "header_background_color"
											{
												using = Background_Area_Solid
											}
											alpha = 0.8
										}
									
										text_single = {
											layoutpolicy_horizontal = expanding
											text = "[Scope.Story.Custom('KnowledgeEntryName')]"
											
											margin_left = 5
											margin_bottom = 10
											
											max_width = 430
										}
									
										expand = {}
										
										text_single = {
											margin_bottom = 10
											margin_right = 30
											
											visible = "[And(Not(GetScriptedGui('knowledge_entry_is_learned_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)), GreaterThan_CFixedPoint(GuiScope.SetRoot(Scope.Story.MakeScope).AddScope('researcher', GetPlayer.MakeScope).AddScope('knowledge_entry', Scope.Story.MakeScope).ScriptValue('knowledge_entry_success_chance_value'), '(CFixedPoint)0'))]"
											raw_text = "~6 months"
										}
									
										widget = {
											visible = "[And(GetScriptedGui('knowledge_entry_is_readable_scripted_gui').IsShown(GuiScope.SetRoot(Artifact.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End), Not(EqualTo_CFixedPoint(Scope.ScriptValue('knowledge_entry_skill_frame_value'), '(CFixedPoint)0')))]"
											size = { 40 40 }
											
											text_single = {
												position = { -16 8 }
												visible = "[Not(GetScriptedGui('knowledge_entry_is_learned_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End))]"
												raw_text = "[GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry', Scope.Story.MakeScope).AddScope('researcher', GetPlayer.MakeScope).ScriptValue('knowledge_entry_success_chance_value')|0]%"
												min_width = 24
												default_format = "#high"
												align = nobaseline
											
												background = {
													texture = "gfx/interface/window_character/character_view_skills_bg.dds"
													frame = "[FixedPointToInt(Scope.ScriptValue('knowledge_entry_skill_frame_value'))]"
													framesize = { 70 26 }
													margin = { 10 0 }
												}
											}
											
											icon = {
												visible = "[GetScriptedGui('knowledge_entry_is_learned_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)]"
												texture = "gfx/interface/icons/symbols/icon_check.dds"
												position = { -10 11 }
												size = { 18 18 }
												
												background = {
													texture = "gfx/interface/window_character/character_view_skills_bg_generic.dds"
													frame = 1
													framesize = { 70 26 }
													margin = { 10 0 }
													
													modify_texture = {
														color = { 0.95 0.01 0.01 1 }
														blend_mode = overlay
													}
												}
											}
										
											icon = {
												size = { 32 32 }
												framesize = { 60 60 }
												frame = "[FixedPointToInt(Scope.ScriptValue('knowledge_entry_skill_frame_value'))]"
												texture = "gfx/interface/icons/icon_skills.dds"
											}
										}
										
										widget = {
											visible = "[And(Not(GetScriptedGui('knowledge_entry_is_readable_scripted_gui').IsShown(GuiScope.SetRoot(Artifact.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)), Not(EqualTo_CFixedPoint(Scope.ScriptValue('knowledge_entry_cipher_skill_frame_value'), '(CFixedPoint)0')))]"
											size = { 40 40 }
											
											text_single = {
												position = { -22 8 }
												raw_text = "46%"
												default_format = "#high"
												align = nobaseline
											
												background = {
													texture = "gfx/interface/window_character/character_view_skills_bg.dds"
													frame = "[FixedPointToInt(Scope.ScriptValue('knowledge_entry_cipher_skill_frame_value'))]"
													framesize = { 70 26 }
													margin = { 10 0 }
												}
											}
										
											icon = {
												size = { 32 32 }
												framesize = { 60 60 }
												frame = "[FixedPointToInt(Scope.ScriptValue('knowledge_entry_cipher_skill_frame_value'))]"
												texture = "gfx/interface/icons/icon_skills.dds"
											}
										}
										
										knowledge_entry_aspect_skill_display = {
											visible = "[And(GetScriptedGui('knowledge_entry_is_readable_scripted_gui').IsShown(GuiScope.SetRoot(Artifact.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End), EqualTo_CFixedPoint(Scope.ScriptValue('knowledge_entry_skill_frame_value'), '(CFixedPoint)0'))]"
										}
										
										knowledge_entry_cipher_aspect_skill_display = {
											visible = "[And(Not(GetScriptedGui('knowledge_entry_is_readable_scripted_gui').IsShown(GuiScope.SetRoot(Artifact.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)), EqualTo_CFixedPoint(Scope.ScriptValue('knowledge_entry_skill_frame_value'), '(CFixedPoint)0'))]"
										}
									}

									hbox = {
										visible = "[GetScriptedGui('knowledge_entry_is_readable_scripted_gui').IsShown(GuiScope.SetRoot(Artifact.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)]"
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										margin = { 10 0 }
									
										text_multi = {
											visible = "[Scope.Var('knowledge_entry_name').IsSet]"
											text = "[Localize(Concatenate(Scope.Var('knowledge_entry_name').GetFlagName, '_desc'))]"
											maximumsize = { 270 480 }
											min_width = 270
											autoresize = yes
											fontsize_min = 12
										}
									
										expand = {}
										
										hbox = {
											layoutpolicy_horizontal = expanding
											
											#divider_light = {
											#	layoutpolicy_vertical = expanding
											#}
											
											vbox = {
												layoutpolicy_horizontal = expanding
												
												margin_left = 5
												
												text_multi = {
													visible = "[GetScriptedGui('knowledge_entry_is_learned_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)]"
													text = "[GetScriptedGui('knowledge_entry_is_learned_scripted_gui').BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)]"
													autoresize = yes
													multiline = yes
													max_width = 180
												}
												
												button_standard = {
													raw_text = "Study"
													
													visible = "[GetScriptedGui('learn_knowledge_entry_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).AddScope('required_artifact_scope', Artifact.MakeScope).End)]"
													enabled = "[GetScriptedGui('learn_knowledge_entry_scripted_gui').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).AddScope('required_artifact_scope', Artifact.MakeScope).End)]"
													onclick = "[GetScriptedGui('learn_knowledge_entry_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).AddScope('required_artifact_scope', Artifact.MakeScope).End)]"
													tooltip = "[GetScriptedGui('learn_knowledge_entry_scripted_gui').BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).AddScope('required_artifact_scope', Artifact.MakeScope).End)]"
												}
												
												button_standard = {
													raw_text = "Cancel"
													
													visible = "[GetScriptedGui('cancel_studying_knowledge_entry_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)]"
													onclick = "[GetScriptedGui('cancel_studying_knowledge_entry_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)]"
													tooltip = "[GetScriptedGui('cancel_studying_knowledge_entry_scripted_gui').BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)]"
												}
											}
										}
									}
									
									vbox = {
										visible = "[Not(GetScriptedGui('knowledge_entry_is_readable_scripted_gui').IsShown(GuiScope.SetRoot(Artifact.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End))]"
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										margin = { 10 0 }
									
										button_icon = {
											size = { 60 60 }
											texture = "gfx/interface/icons/focuses/martial_authority_focus.dds"
											
											onclick = "[GetScriptedGui('decipher_knowledge_entry_scripted_gui').Execute(GuiScope.SetRoot(Artifact.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End)]"
										}
									
										text_single = {
											raw_text = "CIPHER"
											autoresize = yes
											fontsize_min = 12
										}
									}
									
									vbox = {
										visible = "[And(GetScriptedGui('knowledge_entry_is_readable_scripted_gui').IsShown(GuiScope.SetRoot(Artifact.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End), GetScriptedGui('knowledge_entry_is_learned_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('knowledge_entry_scope', Scope.Story.MakeScope).End))]"
										datamodel = "[Scope.GetList('knowledge_entry_spell_list')]"
										spacing = 12
										margin_left = 5
										
										divider_light = {
											layoutpolicy_horizontal = expanding
										}
						
										item = {
											widget_spell_entry = {
												size = { 472 110 }
												datacontext = "[Scope.Story]"
												blockoverride "button_effects" {
													onclick = "[GetScriptedGui('learn_spell_from_character_scripted_gui').Execute(GuiScope.SetRoot(CharacterInteractionConfirmationWindow.GetActor.MakeScope).AddScope('spell_to_learn_scope', Scope.Story.MakeScope).End)]"
													onclick = "[GetVariableSystem.Clear( 'character_interaction_change_spell' )]"
												}
											}
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "history"
					visible = "[VariableSystem.HasValue( 'details_right_side_tab', 'history' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						fixedgridbox = {
							name = "history_list"
							datamodel = "[Artifact.GetHistory.GetEntries]"
							addcolumn = 500
							addrow = 142

							item = {
								widget = {
									minimumsize = { 470 138 }

									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding

										background = {
											using = Background_Area_With_Header
										}

										hbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												text = "[HistoryEntry.GetTitle]"
												margin = { 10 6 }
												align = nobaseline
												max_width = 400
											}

											expand = {}
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin = { 10 0 }

											portrait_head_small = {
												name = "actor"
												datacontext = "[HistoryEntry.GetActor]"
												visible = "[HistoryEntry.HasActor]"
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												margin = { 5 0 }

												text_multi = {
													text = "[HistoryEntry.GetDescription]"
													maximumsize = { 270 90 }
													min_width = 270
													autoresize = yes
													fontsize_min = 12
												}
											}

											expand = {}

											vbox = {
												name = "actor_house"
												datacontext = "[HistoryEntry.GetActor.GetHouse]"
												visible = "[And( Or( Not( HistoryEntry.HasRecipient ), ObjectsEqual( HistoryEntry.GetRecipient, HistoryEntry.GetActor ) ), HistoryEntry.GetActor.IsValid )]"
												margin = { 5 0 }

												coa_house_small = {}

												text_multi = {
													text = "[DynastyHouse.GetBaseNameNoTooltip]"
													max_width = 80
													autoresize = yes
												}
											}

											portrait_head_small = {
												name = "recipient"
												datacontext = "[HistoryEntry.GetRecipient]"
												visible = "[And( HistoryEntry.HasRecipient, Not( ObjectsEqual( HistoryEntry.GetRecipient, HistoryEntry.GetActor ) ) )]"

												blockoverride "portrait_transformation"
												{
													portrait_scale = { -1 1 }
													portrait_offset = { 1 0 }
												}
											}
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "artifact_claims"
					visible = "[VariableSystem.HasValue( 'details_right_side_tab', 'claims' )]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					blockoverride "scrollbox_empty"
					{
						visible = "[IsDataModelEmpty(ArtifactDetailsView.GetClaimants)]"
						text = "DETAILS_TAB_NO_CLAIMANTS"
					}

					blockoverride "scrollbox_content" {
						fixedgridbox = {
							name = "claims_list"
							datamodel = "[ArtifactDetailsView.GetClaimants]"
							addcolumn = 500
							addrow = 142

							item = {
								widget = {
									size = { 470 138 }

									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding

										background = {
											using = Background_Area_With_Header
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin_left = 10
											margin_right = 22

											hbox = {
												layoutpolicy_horizontal = expanding
												margin_top = 5
												margin_bottom = 8

												text_single = {
													name = "character_name"
													visible = "[ClaimantEntry.IsCharacter]"
													text = "[ClaimantEntry.GetCharacter.GetUINameNoTooltip|U]"
													max_width = 400
												}

												text_single = {
													name = "house_name"
													visible = "[ClaimantEntry.IsHouse]"
													text = "[house|E] [ClaimantEntry.GetHouse.GetNameNoTooltip]"
													max_width = 400
												}

												expand = {}
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												margin_top = 5
												margin_bottom = 9

												portrait_head_small = {
													name = "character"
													visible = "[ClaimantEntry.IsCharacter]"
													datacontext = "[ClaimantEntry.GetCharacter]"
												}

												coa_house_medium = {
													name = "house"
													visible = "[ClaimantEntry.IsHouse]"
													datacontext = "[ClaimantEntry.GetHouse]"
												}

												vbox = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding

													hbox = {
														layoutpolicy_horizontal = expanding
														visible = "[ClaimantEntry.IsHouse]"
														margin_left = 10

														text_single = {
															text = "CLAIMANT_ENTRY_HOUSE_HEAD"
															align = nobaseline
															multiline = yes
															max_width = 240
														}

														expand = {}
													}

													expand = {}

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 6

														icon = {
															name = "flag_icon"
															visible = "[And( ClaimantEntry.IsCharacter, Not( ClaimantEntry.CanDeclareWarForClaim ) )]"
															texture = "gfx/interface/icons/icon_retreat.dds"
															size = { 30 30 }
															tooltip = "CLAIMANT_NOT_A_THREAT"
															using = tooltip_ne
														}

														text_single = {
															datacontext = "[ClaimantEntry.GetCharacter]"

															visible = "[And( ClaimantEntry.IsCharacter, Not( ClaimantEntry.CanDeclareWarForClaim ) )]"
															layoutpolicy_horizontal = expanding
															text = "CHARACTER_CANNOT_DECLARE_WAR_SHORT"
															align = nobaseline
														}
													}
												}
											}
										}
									}

									widget = {
										name = "army_composition"
										datacontext = "[ClaimantEntry.GetArmyComposition]"
										visible = "[GreaterThan_int32(ArmyComposition.GetCurrentNumberOfSoldiers, '(int32)0' )]"
										size = { 120 45 }
										parentanchor = right|bottom
										position = { -10 -10 }

										background = {
											using = Background_Area_Dark
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"

											margin = { 0 6 }

											hbox = {
												spacing = 6

												icon = {
													name = "icon_soldier"
													size = { 25 25 }
													texture = "gfx/interface/icons/icon_soldier.dds"
												}

												text_single = {
													text = "[ArmyComposition.GetSoldierCountString]"
													using = Font_Size_Medium
													default_format = "#high"
													align = nobaseline
												}

												army_quality_icon = {}
											}

											progressbar_standard = {
												name = "soldiers_max"
												size = { 40 8 }

												min = 0
												max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
												value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
											}
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "spells"
					visible = "[VariableSystem.HasValue( 'details_right_side_tab', 'spells' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						vbox = {
							name = "spell_list"
							datamodel = "[Artifact.MakeScope.GetList('artifact_spell_list')]"
							layoutpolicy_horizontal = expanding
							spacing = 8

							item = {
								widget_spell_entry = {
									datacontext = "[Scope.Story]"
								}
							}
						}
					}
				}
			}
		}
	}
}

types GHCompTypes { # Make the gui warning disappear
    type gh_overwrite_window_artifact_details = vbox {}
}
